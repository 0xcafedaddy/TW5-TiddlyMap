{"version":3,"sources":["felixhayashi/tiddlymap/js/widget.map.js"],"names":["_utils","require","_DialogManager","_CallbackManager","_ViewAbstraction","_EdgeType","_Popup","_vis","_widget","MapWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAttr","getAttribute","isDebug","_utils2","default","isTrue","$tm","config","sys","debug","bindTo","callbackManager","_CallbackManager2","dialogManager","_DialogManager2","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","tmap:tm-store-position","handleStorePositions","tmap:tm-generate-widget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","repaintGraph","visListeners","click","handleVisSingleClickEvent","doubleClick","stabilized","handleVisStabilizedEvent","selectNode","deselectNode","handleVisDeselectNode","dragStart","handleVisDragStart","dragEnd","hoverNode","hoverEdge","handleVisHoverElement","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","stabilizationProgress","stabilizationIterationsDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","contextmenu","handleContextMenu","widgetDomListeners","handleWidgetKeyup","handleVisDoubleClickEvent","handleWidgetKeydown","conVector","from","edge","callback","_this2","eTyFilter","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","to","viewNS","view","raw","name","open","isConfirmed","outTObj","type","getText","namespace","getConfig","_EdgeType2","exists","save","insertEdge","isEdgeTypeVisible","args","getLabel","preventFitAfterRebuild","sysMeta","ref","setEntry","tiddlerExists","setText","touch","misc","defaultViewLabel","node","x","y","n1","insertNode","n2","message","Array","prototype","slice","arguments","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","graphDomNode","isPreviewed","isTiddlyWikiFakeDom","renderPreview","renderFullWidget","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","header","appendChild","placeholder","makeChildWidget","getTranscludeNode","renderChildren","body","widget","setDomListeners","window","addLoadingBar","tooltip","_Popup2","showDelay","popups","delay","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","contains","doFitAfterStabilize","initAndRenderEditorBar","initAndRenderGraph","registry","reloadRefreshTriggers","checkForFreshInstall","mainEditorId","url","query","graphLoadingBarDomNode","rebuildEditorBar","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","getPaths","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","setVariable","getTiddlerNode","children","push","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","changedTiddlers","updates","network","isZombieWidget","rebuildGraph","reinitNetwork","rebuildGraphOptions","handleChanges","isViewSwitched","hasChangedAttributes","nodeTypes","isViewUpdated","update","ignoreNextViewModification","reloadBackgroundImage","resetEdgeTypeWL","resetFocus","duration","hasChangedElements","hidePopups","removeChildDomNodes","hide","remove","refreshTriggers","str","parseStringArray","i","length","add","handleTriggeredRefresh","hasNetworkStabilized","resetData","graphData","edges","clear","nodes","edgesById","nodesById","physics","visOptions","solver","centralGravity","rebuildGraphData","hasElements","fitGraph","start","graph","getGraph","getRefreshedDataSet","setField","getTiddlersById","stop","localHolders","maybeMatches","inGraph","isShowNeighbourhood","tRef","isSystemOrDraft","getId","modified","nodeFilter","getNodeFilter","matches","getMatches","getVisOptions","_vis2","DataSet","makeHashMap","setEnabled","enabled","Network","canvas","getElementsByTagName","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","toggleEnlargedMode","halfscreen-button","halfscreenButton","focus","ev","_this3","getSelectedNodes","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","keys","nodeIds","role","ucFirst","paramObject","elements","handleRemoveElements","preventDefault","selectNodes","getSelection","zoomView","enlargedMode","interaction","stopPropagation","openTiddlerWithId","_this4","nodeId","getNodeAt","offsetX","offsetY","selectedNodes","contextMenu","show","div","mode","registerTransclude","render","ctrlKey","focusButtonStateTRef","inArray","deleteByPrefix","isLiveView","clipBoard","ids","addNode","get","returnType","breakpoint","sidebarBreakpoint","innerWidth","_this5","globalOptions","vis","parseJSON","merge","localOptions","manipulation","data","resetVisManipulationBar","addEdge","handleConnectionEvent","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","_this6","getField","_ViewAbstraction2","isClone","newView","isCreate","protoView","setView","_this7","isLocked","references","getOccurrences","count","toString","filter","joinAndWrap","rename","_this8","visInherited","JSON","stringify","viewConfig","preselects","filter.prettyNodeFltr","filter.prettyEdgeFltr","vis-inherited","createdOn","numberOfNodes","dialog","extend","getPropertiesByPrefix","fields","prvBg","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","_this9","tempImagePath","defaultName","getSnapshotTitle","numberOfEdges","height","action","handleDownloadSnapshot","navigateTo","addPlaceholder","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","text","toDataURL","stripPreamble","getWithoutPrefix","_this10","viewname","dispatchEvent","destroy","msg","trigger","curTiddler","liveTab","fallbackView","openStandardConfirmDialog","handleRemoveNodes","handleRemoveEdges","edgeIds","_this11","tiddlers","params","stringifyList","delete-from","deletionCount","deleteNodes","removeNode","success","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","withNotify","getNodeData","positions","getPositions","saveNodeData","properties","idsOfNodesWithoutPosition","setNodesMoveable","setOptions","animation","getContainer","clearTimeout","activeFitTimeout","fit","_this12","redraw","easingFunction","setTimeout","_this13","isMatch","makeNode","tObj","draft.title","_this14","indeces","tById","globalDefaults","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","inherited-local-default-style","inherited-group-styles","global.tmap.style","local-node-style","scope","store","addToPreselects","global","p","undefined","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","_ref","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","width","rect","getBoundingClientRect","distRight","clientWidth","left","parseInt","calculatedHeight","innerHeight","top","distBottom","style","evt","target","selected","assignActiveStyle","isArray","defaultColor","colorObj","highlight","hover","context2d","drawImage","backgroundImage","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","allETy","description","isVisInEditMode","isShown","populator","display","setAttribute","total","_ref3","_destructVis","_this15","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","views","viewRef","getVariable","genUUID","defaultViewHolder","noCache","imgTObj","bgFieldValue","ajaxCallback","b64","img","src","onload","urlField","getImgFromWeb","makeDataUri","ltNew","ltOld","ds","getValues","isInFS","hasClass","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","setGraphButtonEnabled","tmap","tiddlymap"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/widget.map.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport DialogManager        from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n    this.dialogManager = new DialogManager(this.callbackManager, this);\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-store-position': this.handleStorePositions,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ]\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ]\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ]\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    var eTyFilter = this.view.getEdgeTypeFilter();\n\n    var param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      viewNS: this.view.getConfig('edge_type_namespace'),\n      eTyFilter: eTyFilter.raw\n    };\n\n    var name = 'getEdgeType';\n    this.dialogManager.open(name, param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        var type = utils.getText(outTObj);\n\n        var options = {\n          namespace: this.view.getConfig('edge_type_namespace')\n        };\n\n        type = new EdgeType(type, null, options);\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) type.save();\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        if (!this.view.isEdgeTypeVisible(type.id)) {\n\n          var args = {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          };\n\n          this.dialogManager.open('edgeNotVisible', args);\n\n        }\n\n        this.preventFitAfterRebuild = true;\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  };\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    var sysMeta = $tm.ref.sysMeta;\n    if (!utils.getEntry(sysMeta, 'showWelcomeMessage', true)) return;\n\n    // set flag\n    utils.setEntry(sysMeta, 'showWelcomeMessage', false);\n\n    var args = {};\n    var name = 'welcome';\n    this.dialogManager.open(name, args, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      var view = $tm.misc.defaultViewLabel;\n\n      var node = { label: 'Have fun with', x: 0, y: 0 };\n      var n1 = $tm.adapter.insertNode(node, view);\n\n      node = { label: 'TiddlyMap!!', x: 100, y: 100 };\n      var n2 = $tm.adapter.insertNode(node, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  };\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    var param = { message : message };\n    this.dialogManager.open('getConfirmation', param, callback);\n\n  };\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      var args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  };\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  };\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    var snapshotTRef = this.view.getRoot() + '/snapshot';\n    var snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    var label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      var placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  };\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // flag that determines whether to zoom after stabilization finished;\n    // always set to false after the next stabilization\n    this.doFitAfterStabilize = true;\n\n    // flag that determines whether to zoom after rebuilding the graph;\n    // always set to false after the next rebuild\n    this.preventFitAfterRebuild = false;\n\n    // *first* inject the bar\n    this.initAndRenderEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      var url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  };\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    var addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  };\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  };\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   */\n  initAndRenderEditorBar() {\n\n    this.rebuildEditorBar();\n\n  };\n\n  /**\n   * Creates this widget's child-widgets.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    // register variables\n\n    var view = this.view;\n    var variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.getPaths().edgeTypeFilter,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: 'tmap-neigh-scope-button'\n                          + (view.isEnabled('neighbourhood_scope')\n                             ? ' ' + 'tmap-active-button'\n                             : '')\n    };\n\n    for (var name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    var body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      var el = utils.getElementNode('span', view.getLabel(), 'tmap-view-label');\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  };\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#updates}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  };\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    var changedTiddlers = updates.changedTiddlers;\n    var rebuildEditorBar = false;\n    var rebuildGraph = false;\n    var reinitNetwork = false;\n    var rebuildGraphOptions = {};\n\n    // check for callback changes\n    this.callbackManager.handleChanges(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes()\n       || updates[$tm.path.options]\n       || updates[$tm.path.nodeTypes]\n       || changedTiddlers[this.view.getRoot()]) {\n\n      this.logger('warn', 'View switched (or main config change)');\n\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n\n      rebuildEditorBar = true;\n      reinitNetwork = true;\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh its components\n      var isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated && !this.ignoreNextViewModification) {\n\n        this.logger('warn', 'View components modified');\n\n        this.reloadBackgroundImage();\n        rebuildEditorBar = true;\n        rebuildGraph = true;\n        rebuildGraphOptions.resetEdgeTypeWL = true;\n\n        if (!this.preventFitAfterRebuild) {\n          rebuildGraphOptions.resetFocus = { delay: 0, duration: 0 };\n        }\n\n      } else { // neither view switch or view modification\n\n        if (updates[$tm.path.nodeTypes]) {\n          rebuildGraph = true;\n\n        } else if (this.hasChangedElements(changedTiddlers)) {\n          rebuildGraph = true;\n        }\n\n      }\n    }\n\n    if (reinitNetwork) {\n      this.initAndRenderGraph(this.graphDomNode);\n      this.hidePopups(0, true);\n\n    } else if (rebuildGraph) {\n      this.rebuildGraph(rebuildGraphOptions);\n      this.hidePopups(0, true);\n    }\n\n    if (rebuildEditorBar) {\n\n      this.removeChildDomNodes();\n      this.rebuildEditorBar();\n\n    } else {\n\n      // give children a chance to update themselves\n      this.refreshChildren(changedTiddlers);\n\n    }\n\n    // reset this again\n    this.ignoreNextViewModification = false;\n\n  };\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  };\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    var str = this.getAttr('refresh-triggers')\n              || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (var i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  };\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [options] - An optional options object.\n   * @param {boolean} [options.refreshData=false] - If this is set to\n   *     true, all datasets will be cleared before new data is added.\n   *     This guarantees a fresh start. This option should only be\n   *     used when the topic of the graph changes (= view switched).\n   * @param {boolean} [options.refreshOptions=false] - If this is set\n   *     to true, the vis options will also be reloaded. This option\n   *     should only be used if the options have actually changed, which\n   *     is always the case when a view is switched or sometimes when\n   *     a view is modified.\n   * @param {Hashmap} [options.resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation). If the global flag `preventFitAfterRebuild`\n   *     is set to true at the time `rebuildGraph` is called with the\n   *     `resetFocus` option specified, then it overrules this option\n   *     and the fit will not take place. After the rebuild,\n   *     `preventFitAfterRebuild` is said to false again.\n   */\n  rebuildGraph(options) {\n\n    if (utils.isPreviewed(this)) return;\n\n    this.logger('debug', 'Rebuilding graph');\n\n    options = options || {};\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    if (options.resetData) {\n      this.graphData.edges.clear();\n      this.graphData.nodes.clear();\n      this.graphData.edgesById = null;\n      this.graphData.nodesById = null;\n    }\n\n    if (!this.view.isEnabled('physics_mode')) {\n\n      // in static mode we need to ensure that objects spawn\n      // near center so we need to set physics from\n      // zero to something. Yes, we override the users\n      // central gravity value… who cares about central\n      // gravity in static mode anyways.\n      var physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0.015;\n    }\n\n    if (!options.resetFocus) {\n      // option or data resets always overrule any flags!\n      this.doFitAfterStabilize = false;\n    }\n\n    this.rebuildGraphData();\n\n    //~ this.rebuildGraphData({\n      //~ resetEdgeTypeWL: options.resetEdgeTypeWL\n    //~ });\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n    // see https://github.com/almende/vis/issues/939\n    this.network.stabilize();\n\n    // resetting the focus is not the same as zooming after stabilization,\n    // the question is whether after a rebuild the focus should be immediately\n    // reset or not. Zooming after stabilization does always(!) takes place\n    // after a rebuild, in contrast, resetting the focus doesn't necessarily take place.\n    if (options.resetFocus && !this.preventFitAfterRebuild) {\n\n      // a not-prevented focus reset will always also cause a fit after stabilize\n      this.doFitAfterStabilize = true;\n      this.fitGraph(options.resetFocus.delay, options.resetFocus.duration);\n\n    }\n\n    // in any case, reset to default\n    this.preventFitAfterRebuild = false;\n\n  };\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  };\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    var graph = $tm.adapter.getGraph({\n      view: this.view\n    });\n\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n\n    this.graphData.nodes = this.getRefreshedDataSet(nodes, // new nodes\n                                         this.graphData.nodesById, // old nodes\n                                         this.graphData.nodes); // dataset\n\n    this.graphData.edges = this.getRefreshedDataSet(edges, // new edges\n                                         this.graphData.edgesById, // old edges\n                                         this.graphData.edges); // dataset\n\n    // create lookup tables\n\n    this.graphData.nodesById = nodes;\n    this.graphData.edgesById = edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField('$:/temp/tmap/nodes/' + this.view.getLabel(),\n                   'list',\n                   $tm.adapter.getTiddlersById(nodes));\n\n    $tm.stop('Reloading Network');\n\n    return this.graphData;\n\n  };\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  };\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  };\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  };\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    var maybeMatches = [];\n    var inGraph = this.graphData.nodesById;\n    var isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (var tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) continue;\n\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n        return true;\n      }\n\n\n      if (changedTiddlers[tRef].modified) {\n        // still may be a match so we store this and process it later\n\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      var nodeFilter = this.view.getNodeFilter('compiled');\n      var matches = utils.getMatches(nodeFilter, maybeMatches);\n      return !!matches.length;\n\n    }\n\n  };\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) this._destructVis();\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n    //~ this.edgeTypeWL = null;\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(\n      utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (var event in this.visListeners) {\n\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': function() {\n        this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': function() {\n        this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  };\n\n  handleCanvasKeyup(ev) {\n    var nodeIds = this.network.getSelectedNodes();\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        var allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        var role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else if (ev.keyCode === 13) { // ENTER\n\n      if (nodeIds.length !== 1) return;\n\n      this.openTiddlerWithId(nodeIds[0]);\n\n    }\n  }\n\n  handleDeleteElement(ev) {\n\n    var id = ev.paramObject.id;\n    var elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({\n      nodes: elements\n    });\n\n  };\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  };\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    var zoomView = !!(ev.ctrlKey || this.isInSidebar || this.enlargedMode);\n\n    if (zoomView) {\n      ev.preventDefault();\n    }\n\n    if (zoomView !== this.visOptions.interaction.zoomView) {\n\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      this.visOptions.interaction.zoomView = zoomView;\n      this.network.setOptions({ interaction: { zoomView: zoomView }});\n\n      return false;\n    }\n\n  };\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    this.tooltip.hide(0, true);\n\n    const nodeId = this.network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = this.network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      this.network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  };\n\n  handleWidgetKeyup(ev) {\n\n  };\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        var focusButtonStateTRef = this.widgetPopupsPath + '/focus';\n        utils.setText(focusButtonStateTRef,\n                      utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n        return;\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  };\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if ($tm.clipBoard) {\n      if ($tm.clipBoard.type === 'nodes') {\n        var nodes = $tm.clipBoard.nodes;\n        var ids = Object.keys(nodes);\n        if (ids.length) {\n          for (var id in nodes) {\n\n            // node already present in this view\n\n            if (this.graphData.nodesById[id]) continue;\n\n\n            this.view.addNode(nodes[id]);\n            // paste nodes already so we can select them!\n\n            this.graphData.nodes.update({\n              id: id\n            });\n          }\n          this.network.selectNodes(ids);\n          $tm.notify('pasted ' + ids.length + ' nodes into map.');\n        }\n        return;\n      }\n    }\n\n    $tm.notify('TiddlyMap clipboad is empty!');\n\n  };\n\n  handleAddNodesToClipboard(mode) {\n\n    var nodeIds = this.network.getSelectedNodes();\n    if (!nodeIds.length) return;\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds,\n                                      { returnType: 'Object' })\n    };\n\n    $tm.notify('Copied ' + nodeIds.length + ' nodes to clipboard');\n\n    if (mode === 'move') {\n      for (var i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n  };\n\n  isMobileMode() {\n\n    const breakpoint = utils.getText($tm.ref.sidebarBreakpoint, 960);\n    return (window.innerWidth <= parseInt(breakpoint));\n\n  };\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  };\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) visCallback(null);\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  };\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  };\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    this.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n      const view = new ViewAbstraction(label);\n\n      if (view.exists()) {\n        $tm.notify('Forbidden! View already exists!');\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  };\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count : references.length.toString(),\n      filter : utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    this.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getText(outTObj);\n      const view = new ViewAbstraction(label);\n\n      if (!label) {\n        $tm.notify('Invalid name!');\n\n      } else if (view.exists()) {\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n        this.view.rename(label);\n        this.setView(this.view);\n      }\n    });\n  };\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    this.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.handleStorePositions();\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  };\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    this.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  };\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  };\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  };\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  };\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n      $tm.notify('Forbidden!');\n      return;\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count : references.length.toString(),\n        filter : utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      this.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  };\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      }\n    });\n\n  };\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Object} elements - An object containing the elements to be\n   *     removed.\n   * @param {Array<Id>} elements.nodes - Removed edges.\n   * @param {Array<Id>} elements.edges - Removed nodes.\n   */\n  handleRemoveElements(elements) {\n\n    if (elements.nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(elements.nodes);\n\n    } else if (elements.edges.length) {\n      this.handleRemoveEdges(elements.edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  };\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n    this.preventFitAfterRebuild = true;\n\n  };\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * This action represents a direct graph manipulation by the user,\n   * which means it will prevent a graph fitting (viewport adjusting)\n   * in the course of the next rebuild.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersById(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    this.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      } else {\n\n        for (let i = nodeIds.length; i--;) {\n          const success = this.view.removeNode(nodeIds[i]);\n          if (success) deletionCount++;\n        }\n\n      }\n\n      this.preventFitAfterRebuild = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  };\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') return;\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n      // remove markers\n      utils.findAndRemoveClassNames([\n        'tmap-has-' + enlargedMode + '-widget',\n        'tmap-' + enlargedMode\n      ]);\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, 'tmap-has-' + type + '-widget');\n      $tw.utils.addClass(pContainer, 'tmap-has-' + type + '-widget');\n      $tw.utils.addClass(this.domNode, 'tmap-' + type);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  };\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  };\n\n  handleSetCentralTopic(event) {\n\n    let nodeId = event.paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  };\n\n  handleStorePositions(withNotify) {\n\n    const data = this.view.getNodeData();\n    const positions = this.network.getPositions();\n    for (let id in positions) {\n\n      data[id] = data[id] || {};\n\n      data[id].x = positions[id].x;\n\n      data[id].y = positions[id].y;\n    }\n    this.view.saveNodeData(data);\n    this.ignoreNextViewModification = true;\n\n    if (withNotify) {\n      $tm.notify('positions stored');\n    }\n\n  };\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) return;\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after',\n                        properties.iterations,\n                        'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n      for (let id in nodes) {\n\n        if (!nodes[id].x) {\n          idsOfNodesWithoutPosition.push(id); }\n      }\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(idsOfNodesWithoutPosition.length\n                    + ' nodes were added to the graph');\n        this.doFitAfterStabilize = true;\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.doFitAfterStabilize) {\n      this.doFitAfterStabilize = false;\n      this.fitGraph(1000, 1000);\n    }\n\n  };\n\n  /**\n   * Zooms on a specific node in the graph\n   *\n   * @param {Object} event - An object containing a `param` property\n   *     that holds a tiddler reference/title.\n   */\n  handleFocusNode(event) {\n    this.network.focus($tm.adapter.getId(event.param), {\n      scale: 1.5,\n      animation: true\n    });\n  };\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    if (this.domNode.isTiddlyWikiFakeDom === true) {\n      return true;\n    } else {\n      return !this.document.body.contains(this.getContainer());\n    }\n\n  };\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay, duration) {\n\n    // clear any existing fitting attempt\n    window.clearTimeout(this.activeFitTimeout);\n\n    duration = duration || 0;\n    delay = delay || 0;\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) return;\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = window.setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    const params = {};\n    this.dialogManager.open('addNodeToMap', params, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n          return;\n\n        } else {\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n\n      }\n\n      this.preventFitAfterRebuild = true;\n\n    });\n\n  };\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.indeces.tById[node.id];\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon]\n                 || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': 'global.' + $tm.field.nodeLabel,\n      'tidIconField': 'global.' + $tm.field.nodeIcon,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    this.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n      for (let p in local) {\n\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.preventFitAfterRebuild = true;\n\n    });\n\n  };\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  };\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode\n         || !utils.isTrue($tm.config.sys.singleClickMode)) {\n        this.handleOpenMapElementEvent(properties);\n      }\n\n\n    } else { // = clicked on an empty spot\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n    }\n\n  };\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  };\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  };\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    this.contextMenu.hide(0, true);\n\n  };\n\n  handleVisSelectNode(properties) {\n\n    // assign selected style\n    this.assignActiveStyle(properties.nodes);\n\n  };\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  };\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  };\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) return;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  };\n\n  handleVisBeforeDrawing(context2d) {\n\n    if (this.backgroundImage) {\n      //utils.drawRaster(context2d, this.network.getScale(), this.network.getViewPosition());\n      context2d.drawImage(this.backgroundImage, 0, 0);\n    }\n\n  };\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.indeces.tById[id];\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  };\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  };\n\n  handleVisBlurElement(ev) {\n\n    //~ console.log('vis blur fired');\n    //~ this.graphDomNode.style.cursor = 'auto';\n    this.tooltip.hide();\n\n  };\n\n  handleVisLoading(params) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', params.total);\n    this.graphLoadingBarDomNode.setAttribute('value', params.iterations);\n\n    //~ var text = 'Loading ' + Math.round((params.iterations / params.total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  };\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  };\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n    }\n\n  };\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n  };\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  };\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.indeces.tById[id];\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = {\n        draftTRef: draftTRef,\n        originalTRef: tRef\n      };\n\n      this.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  };\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = $tm.path.views + '/' + viewName;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = $tm.path.localHolders + '/' + utils.genUUID();\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  };\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    view = new ViewAbstraction(view);\n\n    if (!view.exists()) return;\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  };\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const text = utils.getText(viewHolderRef);\n    let view = new ViewAbstraction(text);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    if (!view.exists()) {\n      this.logger('debug', `Warning: View \"${text}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n    }\n\n    return view;\n\n  };\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = function() {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) { $tm.notify(msg); }\n    }.bind(this);\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  };\n\n  /**\n   * using an existing dataset to reflect the changes between\n   * two node sets.\n   *\n   * @param {Hashmap<id, Node>} ltNew - Lookup table that contains the\n   *     *new* set of nodes.\n   * @param {Hashmap<id, Node>} ltOld - lookup table that holds the\n   *     *old* set of nodes.\n   * @param {vis.DataSet} [ds] - The dataset to be updated\n   */\n  getRefreshedDataSet(ltNew, ltOld, ds) {\n\n    if (!ds) {\n      return new vis.DataSet(utils.getValues(ltNew));\n    }\n\n    // remove all elements;\n    // formerly I kept all elements that were included in the new set in\n    // the dataset. I would then set properties to null that are\n    // not present anymore to prevent property relicts. This turned out\n    // to be cumbersome and didn't really work with vis, especially\n    // setting nested properties to null. therefore I decided to simply\n    // remove all previous elements – surprisingly you don't see any\n    // performance decrease…\n    if (ltOld) ds.remove(Object.keys(ltOld));\n\n    // inject the new data\n    ds.update(utils.getValues(ltNew));\n\n    return ds;\n\n  };\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  };\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = 'vis-button' + ' ' + 'tmap-' + name;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  };\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<NodeId>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    //~ this.network.storePositions();\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.handleStorePositions();\n    }\n\n  };\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = 'vis-button ' + ' ' + 'tmap-' + name;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../src/plugins"}