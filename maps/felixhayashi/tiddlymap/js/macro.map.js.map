{"version":3,"sources":["felixhayashi/tiddlymap/js/macro.map.js"],"names":["_EdgeType","require","_utils","name","params","getParamSlots","run","this","substVarRefs","substituteVariableReferences","fn","command","arguments","args","Array","prototype","slice","call","result","apply","arr","i","maxArgs","push","_utils2","default","makeHashMap","basename","path","str","getVariable","getBasename","tiddler","type","testJSON","fieldName","tObj","$tw","wiki","getTiddler","JSON","parse","fields","getDataUri","SyntaxError","index","split","separator","length","l","concat","genUUID","regRepl","oldStr","regStr","regFlags","RegExp","newStr","halfOfString","substr","isETyVisible","viewNS","eTyFilter","id","isEdgeTypeMatch","getETyId","namespace","scale","parseInt","mergeFields","prefix","getPropertiesByPrefix","prop","unit","$tm","propertyPath","_typeof","hasSubString","lastIndexOf"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/macro.map.js","sourcesContent":["// @preserve\n/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/js/macro/tmap\ntype: application/javascript\nmodule-type: macro\n\n@preserve\n\n\\*/\n\n\n/*** Imports *******************************************************/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nconst name = 'tmap';\nconst params = getParamSlots(5);\n\n/**\n * @this MacroCallWidget\n * @return {string} the result of the operation or an empty string.\n * @private\n */\nfunction run() {\n\n  this.substVarRefs = this.substituteVariableReferences;\n\n  const fn = command[arguments[0]];\n  let result = null;\n\n  if (typeof fn === 'function') {\n    const args = Array.prototype.slice.call(arguments,1);\n    result = fn.apply(this, args);\n  }\n\n  return (typeof result === 'string' ? result : '');\n\n}\n\n/**\n * unfortunately tw forces us to specify params in advance so I\n * will reserve some argument slots here.\n * @private\n */\nfunction getParamSlots(maxArgs) {\n\n  const arr = [];\n  for (let i = 0; i < maxArgs; i++) {\n    arr.push({ name : ('arg' + i) });\n  }\n\n  return arr;\n\n}\n\n/**\n * In connection with tiddlymap, this macro allows us to access\n * system information from within tiddlers as well as to execute\n * some util functions.\n *\n * Every command will be called with `this` pointing to the current\n * MacroCallWidget instance!\n *\n * @private\n */\nvar command = utils.makeHashMap();\n\n/**\n * Returns the basename of the string\n *\n * @see {@link utils.basename}\n */\ncommand.basename = function(path) {\n\n  var str = path || this.getVariable('currentTiddler');\n  return utils.getBasename(str);\n\n};\n\n/**\n * TW messes with svg urls so we always use base64 encoding when\n * a data uri is requested as macro call\n */\ncommand.datauri = function(tiddler, type) {\n\n  return utils.getDataUri(tiddler, type, true);\n\n};\n\n\ncommand.testJSON = function(fieldName) {\n\n  var tObj = $tw.wiki.getTiddler(this.getVariable('currentTiddler'));\n\n  try {\n    JSON.parse(tObj.fields[fieldName]);\n    return 'valid';\n  } catch (SyntaxError) {\n    return 'malformed';\n  }\n\n};\n\ncommand.splitAndSelect = function(separator, index) {\n\n  var str = this.getVariable('currentTiddler');\n  var result = str.split(separator)[index];\n\n  return (result != null ? result : str);\n\n};\n\ncommand.concat = function() {\n\n  var str = '';\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    str += arguments[i];\n  }\n  return str;\n\n};\n\ncommand.uuid = function() {\n\n  return utils.genUUID();\n\n};\n\ncommand.regRepl = function() {\n\n  var oldStr = this.substVarRefs(arguments[0]);\n  var regStr = arguments[1];\n  var newStr = this.substVarRefs(arguments[2]);\n  var regFlags = this.substVarRefs(arguments[4]);\n\n  return oldStr.replace(new RegExp(regStr, regFlags), newStr);\n\n};\n\ncommand.halfOfString = function() {\n\n  var str = this.substVarRefs(arguments[0]);\n  if (!str) return '';\n\n  return str.substr(0, Math.ceil(str.length / 2));\n\n};\n\ncommand.isETyVisible = function(viewNS, eTyFilter, id) {\n\n  id = command.getETyId.call(this, viewNS, id);\n  return '' + utils.isEdgeTypeMatch(id, eTyFilter);\n\n};\n\ncommand.getETyId = function(viewNS, id) {\n\n  id = id || this.getVariable('currentTiddler');\n  return (new EdgeType(id, null, { namespace: viewNS })).id;\n\n};\n\ncommand.scale = function() {\n\n  var str = '';\n  for (var i = 1, l = parseInt(arguments[0]); i < l; i++) {\n    str += '[[' + i + ']]';\n  }\n  return str;\n\n};\n\ncommand.mergeFields = function() {\n\n  var tObj = utils.getTiddler(arguments[0]);\n  var prefix = arguments[1];\n  var separator = arguments[2] || ' ';\n\n  if (!tObj) return;\n\n  var fields = utils.getPropertiesByPrefix(tObj.fields, prefix);\n  var str = '';\n  for (var name in fields) {\n\n    if (typeof fields[name] === 'string') {\n\n      str += fields[name] + separator;\n    }\n  }\n  return str;\n\n};\n\ncommand.option = function(path, unit) {\n\n  var prop = $tm;\n  var propertyPath = path.split('.');\n\n  for (var i = 0; i < propertyPath.length; i++) {\n    if (typeof prop == 'object' && prop[propertyPath[i]]) {\n      prop = prop[propertyPath[i]];\n    }\n  }\n\n  // TODO: ugly, use regex\n  if (unit && typeof prop === 'string'\n     && utils.hasSubString(unit)\n     && (prop.lastIndexOf(unit) + unit.length) === prop.length) {\n    prop = prop + unit;\n  }\n\n  return prop;\n\n};\n\n/*** Exports *******************************************************/\n\nexport { run, name, params };\n"],"sourceRoot":"../../../../../src/plugins"}