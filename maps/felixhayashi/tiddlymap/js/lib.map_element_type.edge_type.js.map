{"version":3,"sources":["felixhayashi/tiddlymap/js/lib.map_element_type.edge_type.js"],"names":["_MapElementType","require","_utils","EdgeType","id","data","options","this","root","$tm","path","edgeTypes","parts","_getIdParts","name","marker","namespace","_getId","exists","_MapElementType2","default","call","_fieldMeta","ar","style","arrows","invertedArrow","toArrow","_isArrow","biArrow","prototype","Object","create","$tw","utils","extend","label","show-label","edgeTypeRegexStr","edgeTypeRegex","RegExp","str","rootPath","_utils2","getWithoutPrefix","match","getLabel","arrowObj","pos","type"],"mappings":";;;;;;;;;;AAaA,GAAAA,iBAAAC,QAAA,mHACA,IAAAC,QAAAD,QAAA,iKAqBA,QAASE,UAASC,EAAIC,EAAMC,GAE1B,GAAIF,YAAcD,UAAU,MAAOC,EAEnCE,GAAUA,KAEVC,MAAKC,KAAOC,IAAIC,KAAKC,SAErB,IAAIC,GAAQT,SAASU,YAAYT,EAAIG,KAAKC,KAC1C,KAAKI,EAAME,KAAM,MAAO,IAAIX,UAAS,eAErCI,MAAKQ,OAASH,EAAMG,MACpBR,MAAKO,KAAOF,EAAME,IAZpBP,MAAAS,UAAkBZ,EAAIC,SAcpBE,MAAKH,GAAKD,SAASc,OAAOV,KAAKQ,OAAQR,KAAKS,UAAWT,KAAKO,KAL5D,KAAKF,KAAAA,WAAYN,EAAWH,UAAS,CAErC,IAAKY,GAALZ,UAAoBY,KAApBX,IAAAc,SAAA,CACA,MAAA,IAAYN,UAAZN,EAAAU,UAAA,IAAAT,KAAAO,OAKAK,iBAAAC,QAAAC,KAAAd,KAAAA,KAAAH,GAAAG,KAAAC,KAAAL,SAAAmB,WAAAjB,EAEA,IAAAkB,GAAAhB,KAAAiB,OAAAjB,KAAAiB,MAAAC,MAEA,IAAAF,EAAA,CACAhB,KAAKmB,cAAkBpB,KAAAA,SAAQU,EAA/B,OAcET,MAAKoB,QAAUpB,KAAKqB,SAASL,EAAI,OAAShB,KAAKqB,SAASL,EAAI,SAX1DhB,MAAAsB,QAAW1B,KAAJuB,gBAAanB,KAAoBoB,OACzC,IAAApB,KAAAsB,QAAAtB,KAAAoB,QAAApB,KAAAmB,cAAA,SACF,CAcCnB,KAAKoB,QAAU,MAPjBxB,SAAA2B,UAAQC,OAAAC,OAAAb,iBAAAC,QAAAU,UAGN3B,UAAAmB,WAAAW,IAAAC,MAAAC,UAEAhB,iBAAAC,QAASS,YAETO,SACDC,iBAWDlC,UAHFmC,iBAAA,4BAgBAnC,UAASoC,cAAgB,GAAIC,QAAOrC,SAASmC,iBAE7CnC,UAASU,YAAc,SAAS4B,EAAKC,GAEnCD,EAAME,QAAAvB,QAAMwB,iBAAiBH,GAAO,GAAIC,EAAW,IACnD,IAAIG,GAAQJ,EAAII,MAAM1C,SAASoC,kBANjCpC,QACAA,OAASoC,EAAAA,IAAT,GASIvB,UAAY6B,EAAM,IAAMA,EAAM,IAAO,GAPzC1C,KAASU,EAAAA,IAAcgC,EAAA,IAAA,IAKrB1C,UAAOc,OAAA,SAAAF,EAAAC,EAAAF,GAELE,IAAAA,EAAAA,MAFK,QAAPD,GAAA,KAAAC,EAAAA,EAAA,IAAA,IAAAF,EAgBFX,UAAS2B,UAAUgB,SAAW,WAE5B,MAAOvC,MAAK6B,OAAS7B,KAAKO,KAF5BX,UAAS2B,UAAUgB,SAAW,SAAAC,EAAWC,GAEvC,GAAAC,GAAOF,EAAAC,EAFT,OAAAA,KAAA,MAAAC,GAAA,MAUaA,IAAS,aAJHrB,KAAVE,YAAAA,YAAAA,QAAUF,MAAnB,UAAuCmB,EAAAA,UAAe,uBAYvC5C","file":"../../../../felixhayashi/tiddlymap/js/lib.map_element_type.edge_type.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/EdgeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * This class is used to abstract edge types. It facilitates inter\n * alia the parsing of style information, the translation of type\n * names into actual type data or the persistance of edge type data.\n *\n * @todo Make certain properties immutable, especially\n *     the id attribute and its parts!\n *\n * @class\n * @extends MapElementType\n *\n * @param {string|EdgeType} type - Either the edge type id (name)\n *     or a tiddler reference denoting the type or an\n *     `EdgeType` object (that is directly bounced back). If the\n *     id can be translated into a tiddler object that resides in\n *     the edge type path, then its data is retrieved automatically.\n */\nfunction EdgeType(id, data, options) {\n\n  if (id instanceof EdgeType) return id; // bounce back!\n\n  options = options || {};\n\n  this.root = $tm.path.edgeTypes;\n\n  var parts = EdgeType._getIdParts(id, this.root);\n  if (!parts.name) return new EdgeType('tmap:unknown');\n\n  this.marker = parts.marker;\n  this.name = parts.name;\n  this.namespace = parts.namespace;\n  this.id = EdgeType._getId(this.marker, this.namespace, this.name);\n\n  // if the id contains no namespace itself and a namespace has\n  // been provided, moreover, a type without the namespace\n  // doesn't exist, then we apply the provided namespace and\n  // recreate the id.\n  // Attention: the namespace is really a prefix and can have a\n  // marker, which needs to be considered!\n  if (!this.namespace && options.namespace) {\n\n    if (!(new EdgeType(this.id)).exists()) {\n      return new EdgeType(options.namespace + ':' + this.name);\n    }\n  }\n\n  // call the parent constructor\n  MapElementType.call(this, this.id, this.root, EdgeType._fieldMeta, data);\n\n  var ar = this.style && this.style.arrows;\n\n  if (ar) {\n    this.invertedArrow = this._isArrow(ar, 'from');\n    this.toArrow = this._isArrow(ar, 'to') || this._isArrow(ar, 'middle');\n    // determine if bi arrows (either from+to or no arrows)\n    this.biArrow = (this.invertedArrow === this.toArrow);\n    if (this.biArrow) this.toArrow = this.invertedArrow = true;\n  } else {\n    this.toArrow = true;\n  }\n\n}\n\n// !! EXTENSION !!\nEdgeType.prototype = Object.create(MapElementType.prototype);\n// !! EXTENSION !!\n\nEdgeType._fieldMeta = $tw.utils.extend(\n  {},\n  MapElementType._fieldMeta,\n  {\n    'label': {},\n    'show-label': {}\n  }\n);\n\n/**\n * An edge-type id consists of the following parts of which the\n * first two are optional: `[marker][namespace:]name`\n *\n * The colon is not considered to be part of the namespace.\n */\nEdgeType.edgeTypeRegexStr = '^(_?)([^:_][^:]*):?([^:]*)';\nEdgeType.edgeTypeRegex = new RegExp(EdgeType.edgeTypeRegexStr);\n\nEdgeType._getIdParts = function(str, rootPath) {\n\n  str = utils.getWithoutPrefix(str || '', rootPath + '/');\n  var match = str.match(EdgeType.edgeTypeRegex) || [];\n\n  return {\n    marker: match[1] || '',\n    namespace: (match[3] && match[2]) || '',\n    name: (match[3] || match[2]) || ''\n  };\n\n};\n\nEdgeType._getId = function(marker, namespace, name) {\n\n  if (!name) return;\n\n  return (marker || '') + (namespace ? namespace + ':' : '') + name;\n\n};\n\nEdgeType.prototype.getLabel = function() {\n\n  return this.label || this.name;\n\n};\n\nEdgeType.prototype._isArrow = function(arrowObj, pos) {\n\n  var type = arrowObj[pos];\n  return (pos === 'to' && type == null\n          || type === true\n          || typeof type === 'object' && type.enabled !== false);\n\n};\n\n\n/*** Exports *******************************************************/\n\nexport default EdgeType;\n"],"sourceRoot":"../../../../../src/plugins"}