{"version":3,"sources":["felixhayashi/tiddlymap/js/startup.caretaker.js"],"names":["_vis","require","_utils","_fixer","_Adapter","_EdgeTypeSubscriberRegistry","_DialogManager","_CallbackManager","_ViewAbstraction","_EdgeType","_NodeType","_vis3","init","$tm","utils","_utils2","default","keycharm","_vis4","NodeType","_NodeType2","EdgeType","_EdgeType2","ViewAbstraction","_ViewAbstraction2","services","url","URL","window","location","href","updateGlobals","createMetaFile","cleanup","attachIndeces","handler","$tw","modules","applyMethods","edgeTypeSubscriberRegistry","_EdgeTypeSubscriberRegistry2","indeces","allETy","dialogManager","_DialogManager2","callbackManager","registry","setInterval","routineCheck","registerChangeListener","registerMousemoveListener","maybePrepareForFullscreenStart","logger","p","parent","config","makeHashMap","sys","merge","unflatten","wiki","getTiddlerData","ref","sysUserConf","vis","_vis2","parseFieldData","visUserConf","field","extend","start","r","path","pluginRoot","tmapTiddlers","getPluginInfo","tiddlers","allTitles","updateTiddlerVsIdIndeces","allTiddlers","updateNodeTypesIndeces","updateEdgeTypesIndeces","stop","_fixer2","fixId","each","tObj","tRef","isSystemOrDraft","id","fields","genUUID","setField","tById","idByT","typePath","nodeTypes","glNTy","glNTyById","eachTiddlerPlusShadows","startsWith","type","push","sort","a","b","priority","edgeTypes","et","updateIndex","attachFunctions","nirvana","isTrue","debug","console","fn","arguments","length","args","Array","prototype","slice","call","arg1","shift","hasOwnProperty","apply","timerName","time","timeEnd","notify","notifications","i","widget","destruct","isZombieWidget","splice","update","updates","checkForDublicates","dublicates","getTiddlersWithField","limit","dispatchUpdates","dublicate","vars","param","adapter","assignId","existingTiddler","attachOptions","lastCurrentTiddler","updateLiveViewTrigger","changedTiddlers","getField","loopCount","getTiddler","mouse","evt","addEventListener","registerClickListener","tempPopups","popupStates","getTiddlersByPrefix","getText","hasClass","target","getAncestorWithClass","rebuilders","options","printChanges","handleChanges","isSystemTiddler","handleSysTidChanges","handleTidChanges","prefix","tWithId","getTiddlerWithField","deleteNode","deleteByPrefix","setDefaults","defaultView","view","query","exists","defaultViewHolder","getLabel","tiddlerExists","setTiddlerData","sysMeta","originalVersion","plugin","version","name","platforms","after","before","synchronous"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/startup.caretaker.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/caretaker\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport visConfig                  from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\nimport utils                      from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport fixer                      from '$:/plugins/felixhayashi/tiddlymap/js/fixer';\nimport Adapter                    from '$:/plugins/felixhayashi/tiddlymap/js/Adapter';\nimport EdgeTypeSubscriberRegistry from '$:/plugins/felixhayashi/tiddlymap/js/EdgeTypeSubscriberRegistry';\nimport DialogManager              from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager            from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction            from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType                   from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType                   from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport vis                        from '$:/plugins/felixhayashi/vis/vis.js';\n\n/*** Code **********************************************************/\n\n/**\n * This module is responsible for registering a global namespace\n * under $tw and loading (and refreshing) the configuration.\n *\n * Attention: Careful with the order of the function calls in this\n * functions body!\n *\n */\nfunction init() {\n\n  // register utils\n  $tm.utils = utils;\n\n  // make classes publicly available\n  $tm.keycharm = vis.keycharm;\n  $tm.NodeType = NodeType;\n  $tm.EdgeType = EdgeType;\n  $tm.ViewAbstraction = ViewAbstraction;\n\n  // create namespace for services\n  $tm.services = {};\n\n  // register url\n  $tm.url = new $tm.utils.URL(window.location.href);\n\n  // build and integrate global options\n  updateGlobals();\n\n  // register meta file (if not done yet)\n  createMetaFile();\n\n  // cleanup previous session\n  cleanup();\n\n  // create indeces\n  attachIndeces($tm);\n\n  // inject modules\n  var handler = $tw.modules.applyMethods('tmap.edgetypehandler');\n  $tm.services.edgeTypeSubscriberRegistry = new EdgeTypeSubscriberRegistry(handler, $tm.indeces.allETy);\n\n  // set defaults\n  setDefaults();\n\n  // attach the adapter object to the tiddlymap namespace\n  $tm.adapter = new Adapter();\n\n  // Run the fixer to update older wikis\n  fixer.fix();\n\n  // create global callback and dialog managers\n  $tm.callbackManager = new CallbackManager();\n  $tm.dialogManager = new DialogManager($tm.callbackManager);\n\n  // all graphs need to register here. @see routineWalk()\n  $tm.registry = [];\n  window.setInterval(routineCheck, 5000);\n\n  // AT THE VERY END: register change listener with the callback manager\n  registerChangeListener($tm.callbackManager);\n\n  // register DOM listeners\n  registerMousemoveListener();\n  registerClickListener();\n\n  // check for fullscreen directives\n  maybePrepareForFullscreenStart($tm.url);\n\n  // issue notification\n  $tm.logger('warn', 'TiddlyMap\\'s caretaker successfully started');\n\n}\n\n/**\n * This function will append the global options to the tree. In case\n * this function is called again, only the option leafs are rebuild\n * so a process may safely store a reference to a branch of the option\n * tree as the reference doesn't change.\n *\n * ATTENTION: For the path options, no trailing or double slashes!\n * This is NOT unix where paths are normalized (// is not rewritten to /).\n *\n * @see\n *   - [TW5] Is there a designated place for TW plugins to store stuff in the dom?\n *     https://groups.google.com/forum/#!topic/tiddlywikidev/MZZ37XiVcvY\n * @param {object} parent The root where to insert the options into\n */\nvar attachOptions = function(parent) {\n\n  var p = parent;\n\n  // default configurations mixed with user config\n  if (!p.config) p.config = utils.makeHashMap();\n\n  // Never modify the imported config objects; instead, merge them\n  // into a new object\n\n  // attention! it is a tw-data-tiddler!\n  p.config.sys = utils.merge(\n    p.config.sys,\n    utils.unflatten($tw.wiki.getTiddlerData(p.ref.sysUserConf))\n  );\n\n  // CAREFUL: Never merge directly into the default vis config object\n  p.config.vis = utils.merge(\n    {}, visConfig, utils.parseFieldData(p.ref.visUserConf)\n  );\n\n  // a shortcut for fields property\n  if (!p.field) p.field = utils.makeHashMap();\n  $tw.utils.extend(p.field, p.config.sys.field);\n\n};\n\n/**\n * This function will cache/index some tiddler properties as javascript\n * objects for faster access.\n */\nvar attachIndeces = function(parent) {\n\n  $tm.start('Attaching Indeces');\n\n  if (!parent.indeces) {\n    parent.indeces = {};\n\n    var r = $tm.path.pluginRoot;\n    parent.indeces.tmapTiddlers = $tw.wiki.getPluginInfo(r).tiddlers;\n  }\n\n  var allTiddlers = $tw.wiki.allTitles();\n\n  updateTiddlerVsIdIndeces(parent.indeces, allTiddlers);\n  updateNodeTypesIndeces(parent.indeces);\n  updateEdgeTypesIndeces(parent.indeces);\n\n  $tm.stop('Attaching Indeces');\n\n};\n\n/**\n * TiddlyMap uses ids to reference tiddlers. This function creates\n * a table that maps ids to tRefs and vice versa.\n *\n * Two indeces are added to the indeces chain:\n * 1. tById – tiddler references by id\n * 2. idByT – ids by tiddler references\n *\n * @param {Object} [parent] - The global indeces object indeces.\n *     If not stated, $tm.indeces is used.\n * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n *     use as basis for this index. If not stated, all tiddlers in\n *     the wiki are used.\n */\nvar updateTiddlerVsIdIndeces = function(parent, allTiddlers) {\n\n  parent = parent || $tm.indeces;\n\n  // usually the fixer is not to be called at this point but\n  // since the fixer relies on the adapter and the adapter\n  // relies on indeces but the indeces must not be build before\n  // the fixer had a chance to move ids, we have to call the fixer\n  // function at this place :(\n  // @TODO: remove this fixer code in 2016/2017 when it is highly\n  // unlikely that people are still using an older version\n  fixer.fixId();\n\n  var tById = parent.tById = {}; // tiddlerById\n  var idByT = parent.idByT = {}; // idByTiddler\n\n  $tw.wiki.each(function(tObj, tRef) {\n\n    if (utils.isSystemOrDraft(tObj)) return;\n\n    var id = tObj.fields['tmap.id'];\n    if (!id) {\n      id = utils.genUUID();\n      utils.setField(tObj, 'tmap.id', id);\n    }\n\n    tById[id] = tRef; // tiddlerById\n    idByT[tRef] = id; // idByTiddler\n\n  });\n\n};\n\n/**\n * For faster access to node-type styles, we store all node-type\n * objects as indeces in a table.\n *\n * Types without a filter are not indexed since they are either\n * special types that TiddlyMap manually assignes (e.g. tmap:neighbour,\n * or tmap:selected).\n *\n * Indeces added to the indeces chain:\n * 1. glNTy – all global node types\n *\n * @param {Object} [parent] - The global indeces object indeces.\n *     If not stated, $tm.indeces is used.\n * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n *     use as basis for this index. If not stated, all tiddlers in\n *     the wiki are used.\n */\nvar updateNodeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.nodeTypes;\n  var glNTy = parent.glNTy = [];\n  var glNTyById = parent.glNTyById = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n    if (utils.startsWith(tRef, typePath)) {\n      var type = new NodeType(tRef);\n      glNTyById[type.id] = type;\n      glNTy.push(type);\n    }\n  });\n\n  glNTy.sort(function(a, b) {\n    return a.priority - b.priority;\n  });\n\n};\n\nvar updateEdgeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.edgeTypes;\n  var allETy = parent.allETy = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n\n    if (utils.startsWith(tRef, typePath)) {\n\n      var et = new EdgeType(tRef);\n      allETy[et.id] = et;\n\n    }\n\n  });\n\n  if ($tm.services.edgeTypeSubscriberRegistry) {\n    $tm.services.edgeTypeSubscriberRegistry.updateIndex(allETy);\n  }\n\n};\n\n/**\n * This function attaches all the top level functions to the\n * tiddlymap namespace.\n *\n * This will add the\n * 1. global logger method,\n * 2. the notify method\n * 3. the stopwatch methods `start` and `stop`.\n *\n * @param {Hashmap} parent - The parent object to attach the options to.\n */\nvar attachFunctions = function(parent) {\n\n  var fn = parent;\n  var nirvana = function() { /* /dev/null */ };\n\n  if (utils.isTrue($tm.config.sys.debug, false) && console) {\n\n    /**\n     * A logging mechanism that uses the first argument as type and\n     * passes all consequent arguments as console arguments. The\n     * reason for this functions existence is to be able to switch\n     * off the logging without redirecting every single console function\n     * such as log, debug, warn etc. Plus, we have more control over\n     * the logging.\n     *\n     * @see http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n     * @see http://stackoverflow.com/questions/9521921/why-does-console-log-apply-throw-an-illegal-invocation-error\n     *\n     * @param {string} type - The type of the message (debug, info, warning…)\n     *     which is exactly the same as in `console[type]`.\n     * @param {...*} message - An infinite number of arguments to be printed\n     *     (just like console).\n     */\n    fn.logger = function(/* type, [messages,] messages */) {\n      if (arguments.length < 2) return;\n      var args = Array.prototype.slice.call(arguments);\n      var arg1 = args.shift(args);\n      var type = (console.hasOwnProperty(arg1) ? arg1 : 'debug');\n      console[type].apply(console, args);\n    };\n\n    fn.start = function(timerName) {\n      console.time('[timer] ' + timerName);\n    };\n\n    fn.stop = function(timerName) {\n      console.timeEnd('[timer] ' + timerName);\n    };\n\n  } else {\n\n    fn.logger = fn.start = fn.stop = nirvana;\n\n  }\n\n  fn.notify = (utils.isTrue($tm.config.sys.notifications)\n               ? utils.notify\n               : nirvana);\n\n};\n\n/**\n * This periodic check is needed to trigger a cleanup if a graph is\n * removed since a graph itself cannot react to its destruction.\n * This includes removing listeners that were not attached to the\n * local container or calling the vis destructor.\n *\n * @todo Specify which functions are required for widgets that register\n * themselves in the registry.\n */\nvar routineCheck = function() {\n\n  for (var i = $tm.registry.length; i--;) {\n    var widget = $tm.registry[i];\n\n    if (!widget.destruct || !widget.isZombieWidget) return; // no duck!\n\n    if (widget.isZombieWidget()) { // removed!\n      $tm.logger('warn', 'a widget will be removed');\n      $tm.registry.splice(i, 1);\n      widget.destruct();\n    }\n  }\n\n};\n\n/**\n * A more advanced change system.\n *\n * @todo The MapConfigWidget does register itself in the registry to\n * have its destructor called. Is this ok?\n */\nvar dispatchUpdates = function(updates) {\n\n  var registry = $tm.registry;\n  for (var i = registry.length; i--;) {\n    var widget = registry[i];\n\n    if (!widget.destruct || !widget.isZombieWidget) return; // no duck!\n\n    if (widget.update && !widget.isZombieWidget()) {\n      widget.update(updates);\n    }\n  }\n\n};\n\nvar checkForDublicates = function(tObj) {\n\n  var id = tObj.fields['tmap.id'];\n\n  if (!id) return;\n\n  var dublicates = utils.getTiddlersWithField('tmap.id', id, { limit: 2 });\n  delete dublicates[tObj.fields.title];\n\n  var dublicate = Object.keys(dublicates)[0];\n\n  if (dublicate) {\n\n    var vars = {\n      param: {\n        changedTiddler: tObj.fields.title,\n        existingTiddler: dublicate,\n        id: id\n      }\n    };\n\n    $tm.dialogManager.open('dublicateIdInfo', vars);\n\n  }\n\n  if (dublicate) {\n    // remove any defined edges\n    utils.setField(tObj, 'tmap.edges', undefined);\n    // override id\n    $tm.adapter.assignId(tObj, true);\n  }\n\n};\n\n/**\n * Builds and registers globals and the functions that depend on them.\n */\nvar updateGlobals = function(parent) {\n\n  attachOptions($tm);\n  attachFunctions($tm);\n\n  // attention: logger() cannot be called before functions are rebuild\n  $tm.logger('warn', 'Rebuilt globals');\n\n};\n\nvar lastCurrentTiddler = null;\nvar updateLiveViewTrigger = function(changedTiddlers) {\n\n  if (changedTiddlers['$:/HistoryList']) {\n    var tRef = utils.getField('$:/HistoryList', 'current-tiddler');\n  } else if (changedTiddlers['$:/temp/focussedTiddler']) {\n    var tRef = utils.getField('$:/temp/focussedTiddler', 'text');\n  }\n\n  if (tRef != null && lastCurrentTiddler !== tRef) {\n    lastCurrentTiddler = tRef;\n    utils.setField('$:/temp/tmap/currentTiddler', 'text', tRef);\n  }\n\n};\n\n/**\n * Only for debugging\n */\nvar printChanges = function(changedTiddlers, loopCount) {\n\n  if (!utils.isTrue($tm.config.sys.debug, false)) return;\n\n  $tm.logger('warn', '=== Refresh ' + loopCount + ' ===');\n\n  for (var tRef in changedTiddlers) {\n\n    var c = changedTiddlers[tRef].deleted ? '[Deleted]' : '[Modified]';\n\n    $tm.logger('warn', c, tRef, $tw.wiki.getTiddler(tRef));\n  }\n\n};\n\n/**\n * Saves the last mousemove event under $tm.mouse\n */\nvar registerMousemoveListener = function() {\n\n  $tm.mouse = {};\n\n  var fn = function(evt) { $tm.mouse = evt; };\n  window.addEventListener('mousemove', fn, false);\n\n};\n\n/**\n * @TODO: suggest this to Jeremy for TW popup handling\n */\nvar registerClickListener = function() {\n\n  var tempPopups = $tm.path.tempPopups;\n  window.addEventListener('click', function(evt) {\n\n    var popupStates = utils.getTiddlersByPrefix(tempPopups);\n\n    for (var i = popupStates.length; i--;) {\n      if (utils.getText(popupStates[i])) break;\n    }\n\n    if (i === -1) return;\n\n    if (!$tw.utils.hasClass(evt.target, 'tc-drop-down')\n       && !utils.getAncestorWithClass(evt.target, 'tc-drop-down')) {\n    // = clicked on an element that isn't a dropdown or inside one\n      for (var i = popupStates.length; i--;) {\n        utils.setText(popupStates[i], '');\n      }\n    }\n\n  }, false);\n};\n\nvar registerChangeListener = function(callbackManager) {\n\n  var loopCount = 0;\n  var rebuilders = {};\n  rebuilders[$tm.path.options] = updateGlobals;\n  rebuilders[$tm.path.nodeTypes] = updateNodeTypesIndeces;\n  rebuilders[$tm.path.edgeTypes] = updateEdgeTypesIndeces;\n\n  $tw.wiki.addEventListener('change', function(changedTiddlers) {\n\n    $tm.start('Caretaker handling changes');\n\n    printChanges(changedTiddlers, loopCount++);\n    callbackManager.handleChanges(changedTiddlers);\n\n    var updates = { changedTiddlers: changedTiddlers };\n\n    for (var tRef in changedTiddlers) {\n\n\n      var tObj = utils.getTiddler(tRef);\n      if (tObj && tObj.isDraft()) continue;\n\n\n      if ($tw.wiki.isSystemTiddler(tRef)) {\n\n        handleSysTidChanges(tRef, tObj, updates, rebuilders);\n      } else {\n\n        handleTidChanges(tRef, tObj, updates);\n      }\n\n    }\n\n    dispatchUpdates(updates);\n\n    // NOTE: changes will affect the next refresh cycle\n    updateLiveViewTrigger(changedTiddlers);\n\n    $tm.stop('Caretaker handling changes');\n\n  });\n\n};\n\nvar handleSysTidChanges = function(tRef, tObj, updates, rebuilders) {\n\n  for (var prefix in rebuilders) {\n\n    if (utils.startsWith(tRef, prefix) && !updates[prefix]) {\n\n      $tm.logger('warn', '[System change]', prefix);\n\n      rebuilders[prefix]();\n\n      updates[prefix] = true;\n      return;\n    }\n  }\n\n};\n\nvar handleTidChanges = function(tRef, tObj, updates) {\n\n  if (tObj) { // created or modified\n\n    checkForDublicates(tObj);\n\n    // call assignId IN ANY CASE to make sure the index\n    // stays intact, also after a renaming operation\n    $tm.adapter.assignId(tObj);\n\n  } else { // deleted or renamed\n\n    var id = $tm.indeces.idByT[tRef];\n\n    // Ignore tiddler without id; assuming draft\n    if (!id) return;\n\n    var tWithId = utils.getTiddlerWithField('tmap.id', id);\n\n    if (tWithId) { // only renamed\n\n      $tm.logger('warn', '[Renamed]', tRef, 'into', tWithId);\n\n    } else { // removed\n\n      // remove node; any edges pointing in/out; update indeces\n      // CAREFUL with recursion here!\n      $tm.adapter.deleteNode(id);\n\n    }\n\n  }\n};\n\nvar cleanup = function() {\n\n  utils.deleteByPrefix('$:/temp/felixhayashi');\n  utils.deleteByPrefix('$:/temp/tiddlymap');\n  utils.deleteByPrefix('$:/temp/tmap');\n\n};\n\nvar setDefaults = function() {\n\n  var defaultView = $tm.config.sys.defaultView;\n  if (!defaultView) return;\n\n  utils.setField($tm.ref.defaultViewHolder, 'text', defaultView);\n\n};\n\nvar maybePrepareForFullscreenStart = function(url) {\n\n  if (!url.query['tmap-enlarged']) return;\n\n  var ref = $tm.ref;\n  var tRef = utils.getTiddlersByPrefix('$:/state/tab/sidebar-')[0];\n\n  utils.setText(tRef, ref.mainEditor);\n\n  var view = new ViewAbstraction(url.query['tmap-view']);\n  if (view.exists()) {\n    utils.setField(ref.defaultViewHolder, 'text', view.getLabel());\n  }\n\n};\n\nvar createMetaFile = function() {\n\n  if (utils.tiddlerExists($tm.ref.sysMeta)) return;\n\n  $tm.logger('warn', 'Creating meta file');\n\n  var plugin = $tw.wiki.getTiddler($tm.path.pluginRoot);\n  $tw.wiki.setTiddlerData($tm.ref.sysMeta, {\n    // the version originally installed\n    originalVersion: plugin.fields.version,\n    // the data structure in use corresponds to version x\n    // if the structure is obsolete, it will be automatically\n    // fixed by the fixer module.\n    dataStructureState: '0.6.9',\n    // whether or not to display a welcome message\n    showWelcomeMessage: true\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.caretaker';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'startup', 'tmap.environment' ];\nexport const before = [ 'rootwidget' ];\nexport const synchronous = true;\nexport const startup = init;\n"],"sourceRoot":"../../../../../src/plugins"}