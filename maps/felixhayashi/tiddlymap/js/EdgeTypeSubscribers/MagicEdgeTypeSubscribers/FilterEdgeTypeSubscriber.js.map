{"version":3,"sources":["felixhayashi/tiddlymap/js/EdgeTypeSubscribers/MagicEdgeTypeSubscribers/FilterEdgeTypeSubscriber.js"],"names":["_utils","require","_AbstractMagicEdgeTypeSubscriber","FilterEdgeTypeSubstriber","allEdgeTypes","options","arguments","length","undefined","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_extends","priority","edgeType","namespace","tObj","fieldName","filter","fields","toRefs","_utils2","default","getMatches","toWL"],"mappings":"kjBAaA,IAAAA,QAAAC,QAAA,wFACA,IAAAC,kCAAAD,QAAA;;;;;;;;;;GAWME,oDAKJ,SAAAA,GAAYC,GAA4B,GAAdC,GAAcC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAAAG,iBAAAC,KAAAP,EAAA,OAAAQ,4BAAAD,MAAAP,EAAAS,WAAAC,OAAAC,eAAAX,IAAAY,KAAAL,KAChCN,EADgCY,UAChBC,SAAU,IAAOZ,uDAM/Ba,GAER,MAAOA,GAASC,YAAc,6DAOTC,EAAMC,GAE3B,GAAMC,GAASF,EAAKG,OAAOF,EArB7B,IAAAG,GAAAC,QAAAC,QAAAC,WAAAL,EAAAM,KAyBE,OAAOJ,oEApBRrB,yBAAAA","file":"../../../../../../felixhayashi/tiddlymap/js/EdgeTypeSubscribers/MagicEdgeTypeSubscribers/FilterEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/filter\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * The FilterEdgeTypeSubstriber deals with connections that are stored inside\n * tiddler fields via a dynamic filter.\n *\n * @see http://tiddlymap.org/#tw-filter\n * @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/206\n */\nclass FilterEdgeTypeSubstriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-filter';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName) {\n\n    const filter = tObj.fields[fieldName];\n    //noinspection UnnecessaryLocalVariableJS\n    const toRefs = utils.getMatches(filter, toWL);\n\n    return toRefs;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { FilterEdgeTypeSubstriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}