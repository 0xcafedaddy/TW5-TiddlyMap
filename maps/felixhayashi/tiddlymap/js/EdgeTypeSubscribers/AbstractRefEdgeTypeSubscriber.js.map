{"version":3,"sources":["felixhayashi/tiddlymap/js/EdgeTypeSubscribers/AbstractRefEdgeTypeSubscriber.js"],"names":["_utils","require","_Edge","_exception","_AbstractEdgeTypeSubscriber","AbstractRefEdgeTypeSubscriber","tObj","toWL","typeWL","refsByType","this","getReferences","_utils2","default","hasElements","fromId","fields","idByT","$tm","indeces","allETy","allEdgeTypes","fromTRef","getTiddlerRef","edges","makeHashMap","typeId","toRefs","type","i","length","toTRef","$tw","wiki","tiddlerExists","isSystemOrDraft","id","utils","hashString","_Edge2","MissingOverrideError"],"mappings":"oVAaA,IAAAA,QAAAC,QAAA,wFACA,IAAAC,OAAAD,QAAA,qFACA,IAAAE,YAAAF,QAAA,iDAAA,IAAAG,6BAAAH,QAAA;;;;;;;;;;GAUMI,uPAKMC,EAAMC,EAAMC,GAGpB,GAAIC,GAAaC,KAAKC,cAAcL,EAAMC,EAAMC,EAEhD,KAAKC,IAAeG,QAAAC,QAAMC,YAAYL,GAAa,MAEnD,IAAIM,GAAST,EAAKU,OAAO,UACzB,IAAIC,GAAQC,IAAIC,QAAQF,KA3B5B,IAAAG,GAAAV,KAAAW,YA6BI,IAAIC,GAAWV,QAAAC,QAAMU,cAAcjB,EAEnC,IAAIkB,GAAQZ,QAAAC,QAAMY,aAElB,KAAK,GAAIC,KAAUjB,GAAY,CAE7B,GAAIkB,GAASlB,EAAWiB,EArBxBrB,KAAAA,EAAAA,QA0BA,IAAIuB,GAAOR,EAAOM,EAClB,KAAK,GAAIG,GAAIF,EAAOG,OAAQD,KAAM,CAChC,GAAIE,GAASJ,EAAOE,EAEpB,KAAKE,IACCC,IAAIC,KAAKC,cAAcH,IACxBnB,QAAAC,QAAMsB,gBAAgBJ,IACrBxB,IAASA,EAAKwB,GAAU,QAE9B,IAAIK,GAAKR,EAAKQ,GAAKJ,IAAIK,MAAMC,WAAWhB,EAAWS,EAjCzDP,GAAAY,GAAA,GAAAG,QAAA1B,QAAAE,EAAAE,EAAAc,GAAAH,EAAAQ,GAAAA,IAsCE,MAAOZ,2CAgBKlB,EAAMC,EAAMC,GAExB,KAAM,IAAAL,YAAAqC,qBAAyB9B,KAAM,8FAvB7B0B","file":"../../../../../felixhayashi/tiddlymap/js/EdgeTypeSubscribers/AbstractRefEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractRefEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * Parent class for all subscribers that retrieve or store\n * non-TiddlyMap edges ({@see TmapEdgeTypeSubscriber) from a tiddler,\n * for example tag or list references.\n */\nclass AbstractRefEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    // references to other tiddlers grouped by their edge type\n    var refsByType = this.getReferences(tObj, toWL, typeWL);\n\n    if (!refsByType || !utils.hasElements(refsByType)) return;\n\n    var fromId = tObj.fields['tmap.id'];\n    var idByT = $tm.indeces.idByT;\n    var allETy = this.allEdgeTypes;\n    var fromTRef = utils.getTiddlerRef(tObj);\n\n    var edges = utils.makeHashMap();\n\n    for (var typeId in refsByType) {\n\n      var toRefs = refsByType[typeId];\n\n      if (!toRefs) continue;\n\n\n      var type = allETy[typeId];\n      for (var i = toRefs.length; i--;) {\n        var toTRef = toRefs[i];\n\n        if (!toTRef\n          || !$tw.wiki.tiddlerExists(toTRef)\n          || utils.isSystemOrDraft(toTRef)\n          || (toWL && !toWL[toTRef])) continue;\n\n        var id = type.id + $tw.utils.hashString(fromTRef + toTRef);\n        edges[id] = new Edge(fromId, idByT[toTRef], type.id, id);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * Returns a list of tiddlers (= tiddler names) that are targeted by the specified tiddler.\n   * Note: All referenced tiddlers have to be grouped by their edge type.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @param {Object<id, EdgeType>} typeWL - a whitelist that defines that only Tiddlers that are linked\n   *     via a type specified in the list may be included in the result.\n   * @return {Object<string, TiddlerReference[]>|null} a list of referenced tiddlers grouped by their edge type.\n   */\n  getReferences(tObj, toWL, typeWL) {\n\n    throw new MissingOverrideError(this, 'getReferencesFromField');\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractRefEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}