{"version":3,"sources":["felixhayashi/tiddlymap/js/EdgeTypeSubscribers/TmapEdgeTypeSubscriber.js"],"names":["_utils","require","_Edge","_AbstractEdgeTypeSubscriber","TmapEdgeTypeSubscriber","allEdgeTypes","options","arguments","length","undefined","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_extends","priority","tObj","toWL","typeWL","connections","_utils2","default","parseFieldData","tById","$tm","indeces","fromId","fields","edges","makeHashMap","conId","con","toTRef","to","type","edge","id","genUUID","writeFieldData","config","sys","jsonIndentation","edgeType"],"mappings":"gjBAaA,IAAAA,QAAAC,QAAA,wFACA,IAAAC,OAAAD,QAAA,qFAAA,IAAAE,6BAAAF,QAAA;;;;;;;;;;GAWMG,kDAEJ,SAAAA,GAAYC,GAA4B,GAAdC,GAAcC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAAAG,iBAAAC,KAAAP,EAAA,OAAAQ,4BAAAD,MAAAP,EAAAS,WAAAC,OAAAC,eAAAX,IAAAY,KAAAL,KAChCN,EADgCY,UAChBC,SAAU,GAAMZ,uDAM9Ba,EAAMC,EAAMC,GAEpB,GAAIC,GAAcC,QAAAC,QAAMC,eAAeN,EAAM,aAC7C,KAAKG,EAAa,MAElB,IAAII,GAAQC,IAAIC,QAAQF,KA5B5B,IAAAG,GAAAV,EAAAW,OAAA,UAMA,IAAAC,GAAAR,QAAAC,QAAAQ,aAEA,KAAA,GAAAC,KAAAX,GAAA,CA2BM,GAAIY,GAAMZ,EAAYW,EACtB,IAAIE,GAAST,EAAMQ,EAAIE,GACvB,IAAID,KAAYf,GAAQA,EAAKe,OAAcd,GAAUA,EAAOa,EAAIG,OAAQ,CAvBxEjC,EAAAA,GAAAA,GAAAA,QAAAA,QAyB0ByB,EAAQK,EAAIE,GAAIF,EAAIG,KAAMJ,IAvBhB,MAAd3B,wCAI1Ba,EAAAmB,EAAAD,GAiCE,GAAIf,GAAcC,QAAAC,QAAMC,eAAeN,EAAM,gBAG7CmB,GAAKC,GAAKD,EAAKC,IAAMhB,QAAAC,QAAMgB,SAE3BlB,GAAYgB,EAAKC,KAAOH,GAAIE,EAAKF,GAAIC,KAAMA,EAAKE,GAGhDhB,SAAAC,QAAMiB,eAAetB,EAAM,aAAcG,EAAaK,IAAIe,OAAOC,IAAIC,gBAhCrE,OAAIf,wCAOEM,EAAAA,EAAST,GAoCf,IAAKY,EAAKC,GAAI,MA/Bb,IAAAjB,GAAAC,QAAAC,QAAAC,eAAAN,EAAA,uBAIFG,GAAAgB,EAAAC,GAoCChB,SAAAC,QAAMiB,eAAetB,EAAM,aAAcG,EAAaK,IAAIe,OAAOC,IAAIC,gBAErE,OAAON,uCAOCO,GAlCRP,MAAKC,kEAOLnC,uBAAAA","file":"../../../../../felixhayashi/tiddlymap/js/EdgeTypeSubscribers/TmapEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/tmap\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * TiddlyMap's original EdgeTypeSubscriber. It will store and retrieve edges by relying on\n * json stored in a tiddler field.\n *\n * @constructor\n */\nclass TmapEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 0, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    var connections = utils.parseFieldData(tObj, 'tmap.edges');\n    if (!connections) return;\n\n    var tById = $tm.indeces.tById;\n    var fromId = tObj.fields['tmap.id'];\n\n    var edges = utils.makeHashMap();\n\n    for (var conId in connections) {\n\n      var con = connections[conId];\n      var toTRef = tById[con.to];\n      if (toTRef && (!toWL || toWL[toTRef]) && (!typeWL || typeWL[con.type])) {\n\n        edges[conId] = new Edge(fromId, con.to, con.type, conId);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  insertEdge(tObj, edge, type) {\n\n    // load existing connections\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // assign new id if not present yet\n    edge.id = edge.id || utils.genUUID();\n    // add to connections object\n    connections[edge.id] = {to: edge.to, type: type.id};\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  deleteEdge (tObj, edge, type) {\n\n    if (!edge.id) return;\n\n    // load\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // delete\n    delete connections[edge.id];\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return true;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { TmapEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../src/plugins"}