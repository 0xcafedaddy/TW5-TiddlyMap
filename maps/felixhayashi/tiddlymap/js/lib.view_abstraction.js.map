{"version":3,"sources":["felixhayashi/tiddlymap/js/lib.view_abstraction.js"],"names":["_EdgeType","require","_utils","ViewAbstraction","view","options","this","_registerPaths","isCreate","_createView","exists","rebuildCache","prototype","_noNeedToRebuildCache","comp","_utils2","default","makeHashMap","config","_getConfigPath","nodeFilter","edgeTypeFilter","$tw","Tiddler","fields","title","getWithoutPrefix","$tm","path","views","hasSubString","t","getRandomLabel","plural","generateNewTitle","getPaths","isForce","destroy","protoView","results","cp","getRoot","isHidden","field","viewMarker","id","genUUID","wiki","addTiddler","defaultEdgeTypeFilter","isLocked","update","updates","changedTiddlers","edgeTypes","hasKeyWithPrefix","nodeData","getNodeData","getNodeFilter","getEdgeTypeFilter","addPlaceholder","tRef","tiddlerExists","getCreationDate","asString","Date","utils","formatDateString","val","getLabel","getBasename","filter","deleteTiddlers","getMatches","newLabel","rename","oldLabel","notify","defaultView","oldRoot","setEntry","mv","newRoot","sys","ref","sysUserConf","liveTab","fallbackView","setField","tObj","nodes","startsWith","saveNodeData","isEnabled","name","getConfig","isRebuild","defValue","getTiddler","getHierarchyEdgeTypes","labels","setConfig","args","arguments","orderByEdges","indeces","tById","prop","match","logger","length","undefined","isExplicitNode","expr","replace","node","regex","escapeRegExp","_getAddNodeFilterPart","isLiveView","misc","liveViewLabel","setNodeFilter","force","text","setEdgeTypeFilter","f","addNode","part","saveNodePosition","removeNode","src","allETy","raw","matches","whitelist","type","Object","keys","pretty","getPrettyFilter","getEdgeTypeMatches","compileFilter","namespace","_EdgeType2","isEdgeTypeMatch","compiled","data","map","equals","saveNodeStyle","_typeof","p","extend","writeFieldData","jsonIndentation","x","y","setCentralTopic","style"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/lib.view_abstraction.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * This class abstracts the various pieces that together make up the\n * view such as map, edge filter, node filter, config etc.\n * If {@code isCreate} is not specified, the viewAbstraction will only\n * represent the view and not create it or any missing part of it.\n *\n * @param {string|ViewAbstraction|Tiddler} view - The view\n * @param {boolean} [isCreate] - True if the view should be created and override\n *     any existing view, false otherwise.\n * @constructor\n */\nfunction ViewAbstraction(view, options) {\n\n  options = options || {};\n\n  if (view instanceof ViewAbstraction) {\n    // bounce back the object we received\n    return view;\n  }\n\n  // start building paths\n  this._registerPaths(view, options.isCreate);\n\n  if (options.isCreate) {\n\n    this._createView(options);\n\n  } else if (!this.exists()) { // no valid config path\n\n    // if the view doesn't exist, then we return a dummy object\n    // whose sole purpose is to tell the world that this\n    // view doesn't exist.\n    return { exists: function() {  return false; } };\n\n  }\n\n  // force complete rebuild\n  this.rebuildCache();\n\n}\n\n/**\n * If a ViewAbstraction instance has been modified and changes\n * have been persisted, then the next refresh cycle would trigger\n * a rebuild of the cache since tiddlers related to this view\n * changed. To avoid this, all functions that modify the state\n * of this view related to cached properties need to set a flag\n * in this variable. This flag prevents a rebuild in the next\n * refresh cycle.\n *\n * NOTE: This is done for mere performance reasons, if some\n * function is implemented without setting this flag to true\n * at the end, it doesn't real cause trouble.\n *\n */\nViewAbstraction.prototype._noNeedToRebuildCache = false;\n\n/**\n *\n */\nViewAbstraction.prototype._registerPaths = function(view, isCreate) {\n\n  // attention: To ensure that the refresh mechanism detects changes,\n  // comp is only allowed to have direct child properties\n  this.comp = this.comp || utils.makeHashMap();\n  this.comp.config = this._getConfigPath(view, isCreate);\n\n  // the view's store (=local store) for node properties\n  this.comp.map = this.comp.config + '/map';\n\n  // filter stores\n  this.comp.nodeFilter = this.comp.config + '/filter/nodes';\n  this.comp.edgeTypeFilter = this.comp.config + '/filter/edges';\n\n};\n\n/**\n * Will try to translate the constructor param into the config path.\n *\n * @private\n * @param {*} view - The constructor param to abstract or create the view.\n * @param {boolean} isCreate - If true and the supplied view did not\n *     result in a proper path, we will create one.\n * @result {string|undefined} The path or undefined if translation failed.\n */\nViewAbstraction.prototype._getConfigPath = function(view, isCreate) {\n\n  if (view instanceof $tw.Tiddler) { // is a tiddler object\n    return view.fields.title;\n  }\n\n  if (typeof view === 'string') {\n\n    // remove prefix and slash\n    view = utils.getWithoutPrefix(view, $tm.path.views + '/');\n\n    if (view && !utils.hasSubString(view, '/')) {\n      // a valid label must not contain any slashes\n      return $tm.path.views + '/' + view; // add prefix (again)\n    }\n  }\n\n  if (isCreate) {\n    var t = $tm.path.views + '/' + utils.getRandomLabel({ plural: true });\n    return $tw.wiki.generateNewTitle(t);\n  }\n\n};\n\n/**\n * A hashmap of all paths (tiddler titles) that make up this view.\n *\n * @return {Hashmap} The paths.\n */\nViewAbstraction.prototype.getPaths = function() {\n\n  return this.comp;\n\n};\n\n/**\n * Will create the config tiddler which means that the view will\n * start to exist.\n *\n * @private\n */\nViewAbstraction.prototype._createView = function(options) {\n\n  // destroy any former view that existed in this path\n  if (this.exists()) {\n\n    if (!options.isForce) return;\n\n    this.destroy();\n  }\n\n  var protoView = new ViewAbstraction(options.protoView);\n  if (protoView.exists()) {\n    var results = utils.cp(protoView.getRoot(), this.comp.config, true);\n  }\n\n  // create new view\n  var fields = {};\n  fields.title = this.comp.config;\n\n  if (!options.isHidden) {\n    fields[$tm.field.viewMarker] = true;\n  }\n\n  // an id is actually not used for view in TM, I just reserve it…\n  fields.id = utils.genUUID();\n\n  $tw.wiki.addTiddler(new $tw.Tiddler(\n    utils.getTiddler(this.comp.config), // in case we cloned the view\n    fields\n  ));\n\n  this.setEdgeTypeFilter($tm.filter.defaultEdgeTypeFilter);\n\n};\n\nViewAbstraction.prototype.isLocked = function() {\n\n  return $tw.wiki.isShadowTiddler(this.comp.config);\n\n};\n\n/**\n *\n * @see ViewAbstraction#rebuildCache\n *\n * @return {boolean} True if the instance has updated itself\n */\nViewAbstraction.prototype.update = function(updates) {\n\n  var changedTiddlers = updates.changedTiddlers;\n\n  if (updates[$tm.path.edgeTypes]\n     || utils.hasKeyWithPrefix(changedTiddlers, this.comp.config)) {\n\n    this.rebuildCache();\n\n    return true;\n\n  }\n\n};\n\n/**\n * This method will rebuild the cache.\n */\nViewAbstraction.prototype.rebuildCache = function(isForce) {\n\n  if (!isForce && this._noNeedToRebuildCache) {\n    this._noNeedToRebuildCache = false;\n    return;\n  }\n\n  this.config = this.getConfig(null, true);\n  this.nodeData = this.getNodeData(null, true);\n  this.nodeFilter = this.getNodeFilter(null, true);\n  this.edgeTypeFilter = this.getEdgeTypeFilter(null, true);\n\n};\n\n/**\n * clones the tiddler denoted via tRef and uses it as placeholder\n * for this view when a widget using this view is displayed in\n * static mode\n */\nViewAbstraction.prototype.addPlaceholder = function(tRef) {\n\n  utils.cp(tRef, this.getRoot() + '/snapshot', true);\n\n};\n\n/**\n * A view exists if the constructor parameter was successfully\n * translated into a {@link TiddlerReference} that corresponds to\n * an existing view tiddler in the store.\n *\n * @return {boolean} True if it exists, false otherwise.\n */\nViewAbstraction.prototype.exists = function() {\n  return utils.tiddlerExists(this.comp.config);\n};\n\n/**\n * The path to the config tiddler that represents the view.\n *\n * @return {TiddlerReference} The view path.\n */\nViewAbstraction.prototype.getRoot = function() {\n  return this.comp.config;\n};\n\n/**\n * Returns this view's creation date.\n *\n * @param {boolean} [asString] True if the returned value should be\n *     a string in any case.\n * @return {string|object|undefined} The creation date in the specified\n *     output format.\n */\nViewAbstraction.prototype.getCreationDate = function(asString) {\n\n  var val = $tw.wiki.getTiddler(this.comp.config).fields['created'];\n  if (asString) {\n    // note: th will be translated as well!\n    return (val instanceof Date\n            ? $tw.utils.formatDateString(val, 'DDth MMM YYYY')\n            : '');\n  }\n\n  return val;\n\n};\n\n/**\n * The label of the view (which is basically the roots basename).\n *\n * @return {string} The label (name) of the view.\n */\nViewAbstraction.prototype.getLabel = function() {\n\n  return utils.getBasename(this.comp.config);\n\n};\n\n/**\n * Method to remove all tiddlers prefixed with the views root. This\n * will make the view non-existent.\n *\n * ATTENTION: Do not use the object anymore after you called\n * this function!\n */\nViewAbstraction.prototype.destroy = function() {\n\n  // delete the view and all tiddlers stored in its path (map, edge-filter etc.)\n  var filter = '[prefix[' + this.getRoot() + ']]';\n  utils.deleteTiddlers(utils.getMatches(filter));\n\n};\n\n/**\n *\n */\nViewAbstraction.prototype.getOccurrences = function() {\n\n  var filter = '[regexp:text[<\\\\$(tiddlymap|tmap).*?view=.'\n               + this.getLabel()\n               + '..*?>]]';\n  return utils.getMatches(filter);\n\n};\n\nViewAbstraction.prototype.rename = function(newLabel) {\n\n  if (typeof newLabel !== 'string') return false;\n\n  if (utils.inArray('/', newLabel)) {\n    $tm.notify('A view name must not contain any \"/\"');\n    return false;\n  }\n\n  // keep a reference to the old label before we change it\n  var oldLabel = this.getLabel();\n\n  // start the renaming\n  var newRoot = $tm.path.views + '/' + newLabel;\n  var oldRoot = this.getRoot();\n  var results = utils.mv(oldRoot, newRoot, true);\n\n  // update references\n\n  if ($tm.config.sys.defaultView === oldLabel) {\n    utils.setEntry($tm.ref.sysUserConf,\n                    'defaultView',\n                    newLabel);\n  }\n\n  if ($tm.config.sys.liveTab.fallbackView === oldLabel) {\n    utils.setEntry($tm.ref.sysUserConf,\n                    'liveTab.fallbackView',\n                    newLabel);\n  }\n\n  $tw.wiki.each(function(tObj, tRef) {\n\n    if (tObj.fields['tmap.open-view'] === oldLabel) {\n\n      // update global node data fields referencing this view\n      utils.setField(tRef, 'tmap.open-view', newLabel);\n\n    } else if (utils.startsWith(tRef, $tm.path.views)) {\n\n      // update all local node data referencing this view\n      var view = new ViewAbstraction(tRef);\n      if (!view.exists()) return;\n\n      var nodes = view.getNodeData();\n      for (var id in nodes) {\n\n        if (nodes[id]['open-view'] === oldLabel) {\n\n          nodes[id]['open-view'] = newLabel;\n        }\n      }\n      view.saveNodeData(nodes);\n\n    }\n\n  });\n\n  this._registerPaths(newLabel);\n  this.rebuildCache();\n\n};\n\n/**\n * All configurations that are toggled via checkboxes to have a value\n * either `true` or `false` can be accessed via this method.\n *\n * @param {string} name - The configs name without the `_config` prefix.\n * @return {boolean} True if the configuration is enabled, false otherwise.\n */\nViewAbstraction.prototype.isEnabled = function(name) {\n\n  return utils.isTrue(this.getConfig(name), false);\n\n};\n\n/**\n * Returns a configuration value relating to the given name. If no name\n * is given, an object with all configurations is returned.\n *\n * @param {string} [name] - Instead of all configurations being returned,\n *     only the configuration named name is returned. The initial \"config.\"\n *     may be omitted.\n * @param {boolean} [isRebuild] - True if to rebuild the cache, false otherwise.\n * @result {string|Object} If `type` is not specified an object containing\n *     all configurations is returned, otherwise a single value will be returned.\n */\nViewAbstraction.prototype.getConfig = function(name, isRebuild, defValue) {\n\n  if (!isRebuild && this.config) {\n\n    var config = this.config;\n\n  } else {\n\n    var fields = $tw.wiki.getTiddler(this.comp.config).fields;\n    var config = utils.getPropertiesByPrefix(fields, 'config.');\n\n  }\n\n  // TODO use regex to add \"config.\"\n  return (name\n          ? config[(utils.startsWith(name, 'config.') ? name : 'config.' + name)]\n          : config);\n\n};\n\n/**\n * If the active layout is set to *hierarchical*, this function will\n * return all edges that define the hierarchical order of this view.\n * If the layout is not set to *hierarchical*, an empty array is\n * returned.\n *\n * @return {Array<string>} A list of edge labels of edges that define\n *     the hierarchy.\n */\nViewAbstraction.prototype.getHierarchyEdgeTypes = function() {\n\n  if (this.getConfig('layout.active') !== 'hierarchical') return [];\n\n  var orderByEdges = utils.getPropertiesByPrefix(this.getConfig(), 'config.layout.hierarchical.order-by-', true);\n\n  var labels = utils.makeHashMap();\n  for (var id in orderByEdges) {\n\n    if (orderByEdges[id] === 'true') {\n\n      var tObj = utils.getTiddler($tm.indeces.tById[id]);\n      if (tObj) {\n        labels[utils.getBasename(tObj.fields.title)] = true;\n      }\n    }\n  }\n\n  return labels;\n\n};\n\n/**\n *\n */\nViewAbstraction.prototype.setConfig = function() {\n\n  var args = arguments;\n\n  if (args[0] == null) return; // null or undefined\n\n  if (args.length === 1 && typeof args[0] === 'object') {\n\n    for (var prop in args[0]) {\n\n      this.setConfig(prop, args[0][prop]);\n    }\n\n  } else if (args.length === 2 && typeof args[0] === 'string') {\n\n    var prop = utils.getWithoutPrefix(args[0], 'config.');\n    var val = args[1];\n\n    if (val === undefined) return;\n\n    if (val === null) {\n\n      $tm.logger('debug', 'Removing config', prop);\n      delete this.config['config.'+prop]; // todo set this to null\n\n    } else {\n\n      if (prop === 'edge_type_namespace') {\n        var match = val.match(/[^:]+/);\n        val = (match ? match[0] : '');\n      }\n\n    }\n\n    $tm.logger('log', 'Setting config', prop, val);\n    this.config['config.'+prop] = val;\n\n\n  } else { // not allowed\n\n    return;\n\n  }\n\n  // save\n  $tw.wiki.addTiddler(new $tw.Tiddler(\n    $tw.wiki.getTiddler(this.comp.config),\n    this.config\n  ));\n\n  this._noNeedToRebuildCache = true;\n\n};\n\n/**\n * Whether the node is already explicitly contained in the filter,\n * i.e. whether it is explicitly referenced by its title.\n */\nViewAbstraction.prototype.isExplicitNode = function(node) {\n\n  // @Todo: this way of testing is not 100% save as a node might\n  // have been added to the filter explicitly AND via a group filter.\n  var regex = $tw.utils.escapeRegExp(this._getAddNodeFilterPart(node));\n  return this.getNodeFilter('raw').match(regex);\n\n};\n\nViewAbstraction.prototype.isLiveView = function() {\n\n  return (this.getLabel() === $tm.misc.liveViewLabel);\n\n};\n\nViewAbstraction.prototype._getAddNodeFilterPart = function(node) {\n\n  if (!node) { throw 'Supplied param is not a node!'; }\n\n  var id = (typeof node === 'object' ? node.id : node);\n  return '[field:tmap.id[' + id + ']]';\n\n};\n\n/**\n * Sets and rebuilds the node filter according to the expression provided.\n *\n * @param {string} expr - A tiddlywiki filter expression.\n */\nViewAbstraction.prototype.setNodeFilter = function(expr, force) {\n\n  expr = expr.replace(/[\\n\\r]/g, ' ');\n\n  if (this.getNodeFilter('raw') === expr) {\n    // already up to date;\n    // This check is critical to prevent recursion!\n    return;\n  }\n\n  if (this.isLiveView() && !force) {\n    var text = 'You must not change the live view\\'s node filter!';\n    $tm.notify(text);\n    return;\n  }\n\n  utils.setField(this.comp.nodeFilter, 'filter', expr);\n\n  $tm.logger('debug','Node filter set to', expr);\n\n  // rebuild filter now and prevent another rebuild at refresh\n  this.nodeFilter = this.getNodeFilter(null, true);\n\n  this._noNeedToRebuildCache = true;\n\n};\n\nViewAbstraction.prototype.setEdgeTypeFilter = function(expr) {\n\n  expr = expr.replace(/[\\n\\r]/g, ' ');\n\n  if (this.getEdgeTypeFilter('raw') === expr) { // already up to date\n    // This check is critical to prevent recursion!\n    return;\n  }\n\n  utils.setField(this.comp.edgeTypeFilter, 'filter', expr);\n\n  $tm.logger('debug','Edge filter set to', expr);\n\n  // rebuild filter now\n  this.edgeTypeFilter = this.getEdgeTypeFilter(null, true);\n\n  // and prevent another unecessary rebuild at refresh\n  this._noNeedToRebuildCache = true;\n\n};\n\n/**\n * Method to append a filter part to the current filter (*or*-style).\n *\n * @param {string} A tiddlywiki filter expression.\n */\nViewAbstraction.prototype.addNode = function(node) {\n\n  if (this.isExplicitNode(node)) return false;\n\n  var part = this._getAddNodeFilterPart(node);\n  this.setNodeFilter(this.getNodeFilter('raw') + ' ' + part);\n\n  this.saveNodePosition(node);\n\n};\n\n/**\n * Removes a node from the the view filter that has been\n * explicitly added before.\n *\n * ATTENTION: Never remove the node data (i.e. style and positions)\n * from the node-data store. This will be done by a garbage\n * collector. See Adapter.prototype._removeObsoleteViewData\n */\nViewAbstraction.prototype.removeNode = function(node) {\n\n  if (!this.isExplicitNode(node)) return false;\n\n  var part = this._getAddNodeFilterPart(node);\n  var f = this.getNodeFilter('raw').replace(part, '');\n\n  this.setNodeFilter(f);\n  return true;\n\n};\n\n/**\n * Method will return a tiddlywiki edge-type filter that is used to\n * decide which edge types are displayed by the graph.\n *\n * @param {(\"raw\"|\"pretty\"|\"matches\"|\"whitelist\")} [type]\n *     Use this param to control the output type.\n * @param {boolean} [isRebuild] - True if to rebuild the cache,\n *     false otherwise.\n * @result {*}\n *     Depends on the type param:\n *     - raw: the original filter string\n *     - pretty: the prettyfied filter string for usage in textareas\n *     - matches: {Array<string>} all matches\n *     - whitelist: A lookup table where all matches are true\n */\nViewAbstraction.prototype.getEdgeTypeFilter = function(type, isRebuild) {\n\n  if (!isRebuild && this.edgeTypeFilter) {\n\n    var f = this.edgeTypeFilter;\n\n  } else {\n\n    var f = utils.makeHashMap();\n    var allETy = $tm.indeces.allETy;\n    var src = Object.keys(allETy);\n    var tObj = $tw.wiki.getTiddler(this.comp.edgeTypeFilter);\n\n    f.raw = (tObj && tObj.fields.filter || '');\n    f.pretty = utils.getPrettyFilter(f.raw);\n    f.matches = utils.getEdgeTypeMatches(f.raw, allETy);\n    f.whitelist = utils.getLookupTable(f.matches);\n\n  }\n\n  return (type ? f[type] : f);\n\n};\n\nViewAbstraction.prototype.isEdgeTypeVisible = function(type) {\n\n  var options = {\n    namespace: this.getConfig('edge_type_namespace')\n  };\n\n  var type = new EdgeType(type, null, options);\n\n  return utils.isEdgeTypeMatch(type.id, this.edgeTypeFilter.raw);\n\n};\n\n/**\n * Method will return a tiddlywiki node filter that is used to\n * decide which nodes are displayed by the graph.\n *\n * @param {(\"raw\"|\"pretty\"|\"compiled\")} [type]\n *     Use this param to control the output type.\n * @param {boolean} [isRebuild] - True if to rebuild the cache,\n *     false otherwise.\n * @result {*}\n *     Depends on the type param:\n *     - raw: the original filter string\n *     - pretty: the prettyfied filter string for usage in textareas\n *     - compiled: {Array<string>} all matches\n */\nViewAbstraction.prototype.getNodeFilter = function(type, isRebuild) {\n\n  if (!isRebuild && this.nodeFilter) {\n\n    var f = this.nodeFilter;\n\n  } else {\n\n    var f = utils.makeHashMap();\n    var tObj = $tw.wiki.getTiddler(this.comp.nodeFilter);\n\n    f.raw = (tObj && tObj.fields.filter) || '';\n    f.pretty = utils.getPrettyFilter(f.raw);\n    f.compiled = $tw.wiki.compileFilter(f.raw);\n\n  }\n\n  return (type ? f[type] : f);\n\n};\n\n/**\n * This method will return the node data stored in the view.\n *\n * @todo When to delete obsolete data?\n *\n * @param {boolean} [isRebuild] - True if to rebuild the cache, false otherwise.\n * @result {Hashmap<Id, Object>} A Hashmap with node data.\n *     Note: If the view doesn't exist, the hashmap will be empty.\n */\nViewAbstraction.prototype.getNodeData = function(id, isRebuild) {\n\n  var data = (!isRebuild && this.nodeData\n              ? this.nodeData\n              : utils.parseFieldData(this.comp.map, 'text', {}));\n\n  return (id ? data[id] : data);\n\n};\n\nViewAbstraction.prototype.equals = function(view) {\n\n  if (view === this) return true;\n\n  view = new ViewAbstraction(view);\n  return (view.exists() && this.getRoot() === view.getRoot());\n\n};\n\n/**\n * This function will merge the given data in the view's node store.\n *\n * If two arguments are provided, the first parameter is assumed\n * to be a node id and the second to be the data object. The data\n * will extend the existing data. If data is not an object, it is\n * assumed to be a delete directive and consequently the node data\n * in the store will be deleted.\n *\n * Otherwise, if a single object parameter is provided, it is regarded\n * as a node collection and the whole object is used to extend the store.\n *\n * @TODO I need to delete data of nodes that are not in view anymore\n */\nViewAbstraction.prototype.saveNodeData = function() {\n\n  const args = arguments;\n  const data = this.getNodeData();\n\n  if (args.length === 2) {\n\n    if (typeof args[1] === 'object') {\n      if (args[1] === null) {\n        // remember – in js null is an object :D\n        // we use null as a signal for deletion of the item\n        data[args[0]] = undefined;\n      } else {\n        data[args[0]] = $tw.utils.extend(data[args[0]] || {}, args[1]);\n      }\n    }\n\n  } else if (args.length === 1 && typeof args[0] === 'object') {\n\n    $tm.logger('log', 'Storing data in', this.comp.map);\n\n    $tw.utils.extend(data, args[0]);\n\n  } else {\n    return;\n  }\n\n  utils.writeFieldData(this.comp.map, 'text', data, $tm.config.sys.jsonIndentation);\n\n  // cache new values and prevent rebuild at refresh\n  this.nodeData = data;\n\n  this._noNeedToRebuildCache = true;\n\n};\n\nViewAbstraction.prototype.saveNodePosition = function(node) {\n\n  if (node.id && node.x && node.y) {\n    this.saveNodeData(node.id, { x: node.x, y: node.y });\n  }\n\n};\n\nViewAbstraction.prototype.setCentralTopic = function(id) {\n\n  this.setConfig('central-topic', id);\n\n};\n\nViewAbstraction.prototype.saveNodeStyle = function(id, style) {\n\n  // remove any previos style from store;\n  // @TODO: optimize this only null in style var needs to be removed\n  var data = this.getNodeData()[id];\n  if (data) {\n    // delete all previous properties, except positions\n    for (var p in data) {\n      if (p !== 'x' && p !== 'y') {\n        data[p] = undefined;\n      }\n    }\n  }\n\n  // save new style\n  this.saveNodeData(id, style);\n\n};\n\n/*** Exports *******************************************************/\n\nexport default ViewAbstraction;\n"],"sourceRoot":"../../../../../src/plugins"}