{"version":3,"sources":["felixhayashi/tiddlymap/js/lib.fixer.js"],"names":["_utils","require","_ViewAbstraction","_EdgeType","moveEdges","path","view","matches","_utils2","default","getTiddlersByPrefix","i","length","type","getBasename","_EdgeType2","exists","save","edges","$tw","wiki","getTiddlerData","j","id","$tm","adapter","insertEdge","deleteTiddler","executeUpgrade","toVersion","curVersion","upgrade","isLeftVersionGreater","msg","setEntry","ref","sysMeta","fixer","fixId","meta","before","after","dataStructureState","originalVersion","userConf","nodeIdField","getEntry","moveFieldValues","logger","selector","allViews","viewRefs","getMatches","filter","_ViewAbstraction2","getRoot","liveView","setNodeFilter","setConfig","refresh-trigger","refresh-triggers","utils","stringifyList","confRef","visUserConf","unflatten","_typeof","groups","NodeType","setTiddlerData","glNTy","indeces","liveTab","getTiddler","hasTag","setField","views","eTyFilter","confKey","getConfig","defaultEdgeTypeFilter","edgeTypes","replaceAll","edgeTypePath","setEdgeTypeFilter","f"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/lib.fixer.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/fixer\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\n\n/*** Code **********************************************************/\n\nvar moveEdges = function(path, view) {\n\n  var matches = utils.getTiddlersByPrefix(path);\n  for (var i = 0; i < matches.length; i++) {\n\n    // create edge type\n    var type = utils.getBasename(matches[i]);\n    if (type === '__noname__') { type = 'tmap:unknown'; }\n    type = new EdgeType(type);\n\n    if (!type.exists()) type.save();\n\n    // move edges\n    var edges = $tw.wiki.getTiddlerData(matches[i]);\n    for (var j = 0; j < edges.length; j++) {\n      // prefix formerly private edges with view name as namespace\n      edges[j].type = (view ? view + ':' : '') + type.id;\n      $tm.adapter.insertEdge(edges[j]);\n    }\n\n    // finally remove the store\n    $tw.wiki.deleteTiddler(matches[i]);\n\n  }\n\n};\n\nvar executeUpgrade = function(toVersion, curVersion, upgrade) {\n\n  if (!utils.isLeftVersionGreater(toVersion, curVersion)) return;\n  // = current data structure version is newer than version we\n  // want to upgrade to.\n\n  // issue debug message\n  $tm.logger('debug',  'Upgrading data structure to ' + toVersion);\n  // execute fix\n  var msg = upgrade();\n  // update meta\n  utils.setEntry($tm.ref.sysMeta, 'dataStructureState', toVersion);\n\n  return msg;\n\n};\n\nvar fixer = {};\n\n/**\n * Special fix that is not invoked along with the other fixes but\n * when creating the index (see caretaker code).\n *\n * Changes:\n * 1. The node id field is moved to tmap.id if **original version**\n *    is below v0.9.2.\n */\nfixer.fixId = function() {\n\n  var meta = $tw.wiki.getTiddlerData($tm.ref.sysMeta, {});\n  var upgrade = { before: '0.9.0', after: '0.9.2' };\n\n  executeUpgrade('0.9.2', meta.dataStructureState, function() {\n\n    if (utils.isLeftVersionGreater('0.9.2', meta.originalVersion)) {\n      // path of the user conf at least in 0.9.2\n      var userConf = '$:/plugins/felixhayashi/tiddlymap/config/sys/user';\n      var nodeIdField = utils.getEntry(userConf, 'field.nodeId', 'tmap.id');\n      utils.moveFieldValues(nodeIdField, 'tmap.id', true, false);\n    }\n\n  });\n\n};\n\nfixer.fix = function() {\n\n  var meta = $tw.wiki.getTiddlerData($tm.ref.sysMeta, {});\n\n  $tm.logger('debug', 'Fixer is started');\n  $tm.logger('debug', 'Data-structure currently in use: ', meta.dataStructureState);\n\n  /**\n   * Changes:\n   * 1. Edges are stored in tiddlers instead of type based edge stores\n   * 2. No more private views\n   */\n  executeUpgrade('0.7.0', meta.dataStructureState, function() {\n\n    // move edges that were formerly \"global\"\n    moveEdges('$:/plugins/felixhayashi/tiddlymap/graph/edges', null);\n\n    // move edges that were formerly bound to view (\"private\")\n    var filter = $tm.selector.allViews;\n    var viewRefs = utils.getMatches(filter);\n    for (var i = 0; i < viewRefs.length; i++) {\n      var view = new ViewAbstraction(viewRefs[i]);\n      moveEdges(view.getRoot()+'/graph/edges', view);\n    }\n\n  });\n\n  /**\n   * Changes:\n   * 1. Changes to the live view filter and refresh trigger field\n   */\n  executeUpgrade('0.7.32', meta.dataStructureState, function() {\n\n    var liveView = new $tm.ViewAbstraction('Live View');\n    if (!liveView.exists()) return;\n\n    // Only listen to the current tiddler of the history list\n    liveView.setNodeFilter('[field:title{$:/temp/tmap/currentTiddler}]',\n                           true);\n\n    liveView.setConfig({\n      'refresh-trigger': null, // delete the field (renamed)\n      'refresh-triggers': $tw.utils.stringifyList([\n        '$:/temp/tmap/currentTiddler'\n      ])\n    });\n\n  });\n\n  /**\n   * Changes:\n   * 1. Group styles for matches and neighbours are now modulized\n   *    and stored as node-types.\n   * 2. vis user configuration is restored unflattened!\n   *    The user only interacts through the GUI.\n   * 3. If the node id field was \"id\" it is moved to tmap.id\n   */\n  executeUpgrade('0.9.0', meta.dataStructureState, function() {\n\n    var confRef = $tm.ref.visUserConf;\n    var userConf = utils.unflatten($tw.wiki.getTiddlerData(confRef, {}));\n\n    if (typeof userConf.groups === 'object') {\n\n      var type = new $tm.NodeType('tmap:neighbour');\n      type.setStyle(userConf.groups['neighbours']);\n      type.save();\n\n      delete userConf.groups;\n      $tw.wiki.setTiddlerData(confRef, userConf);\n\n    }\n\n  });\n\n  /**\n   * Changes:\n   * 1. The node id field is moved to tmap.id if **original version**\n   *    is below v0.9.2.\n   */\n  fixer.fixId();\n\n\n  /**\n   * This will ensure that all node types have a prioritization field\n   * set.\n   */\n  executeUpgrade('0.9.16', meta.dataStructureState, function() {\n\n    var glNTy = $tm.indeces.glNTy;\n    for (var i = glNTy.length; i--;) {\n      glNTy[i].save(null, true);\n    }\n\n  });\n\n  /**\n   * Fixes the live tab\n   */\n  executeUpgrade('0.10.3', meta.dataStructureState, function() {\n\n    var liveTab = $tm.ref.liveTab;\n    if (utils.getTiddler(liveTab).hasTag('$:/tags/SideBar')) {\n      $tw.wiki.deleteTiddler(liveTab);\n      utils.setField(liveTab, 'tags', '$:/tags/SideBar');\n    }\n\n  });\n\n  /**\n   * 1) Fixes the edge type filter. Before, an empty filter was\n   * treated as default filter, i.e. no links and tags shown.\n   * Now an empty filter means that we show all edge types.\n   *\n   * 2) Adds prefix to hide private edges per default\n   *\n   * 3) Corrects view-namespaces (formerly stored with colon).\n   *\n   */\n  executeUpgrade('0.11.0', meta.dataStructureState, function() {\n\n    const views = utils.getMatches($tm.selector.allViews);\n\n    for (let i = views.length; i--;) {\n\n      const view = new ViewAbstraction(views[i]);\n      let eTyFilter = view.getEdgeTypeFilter('raw');\n      const confKey = 'edge_type_namespace';\n      view.setConfig(confKey, view.getConfig(confKey));\n\n      let f = $tm.filter.defaultEdgeTypeFilter;\n\n      if (eTyFilter) {\n\n        // remove any occurences of the egde type path prefix\n        const edgeTypePath = $tm.path.edgeTypes;\n        eTyFilter = utils.replaceAll(eTyFilter, '', [\n          edgeTypePath,\n          edgeTypePath + '/',\n          '[prefix[' + edgeTypePath + ']]',\n          '[prefix[' + edgeTypePath + '/]]',\n          [ '[suffix[tw-body:link]]', '[[tw-body:link]]' ],\n          [ '[suffix[tw-list:tags]]', '[[tw-list:tags]]' ],\n          [ '[suffix[tw-list:list]]', '[[tw-body:list]]' ],\n          [ '[suffix[tmap:unknown]]', '[[tmap:unknown]]' ],\n          [ '[suffix[unknown]]', '[[tmap:unknown]]' ],\n        ]);\n\n        f = '-[prefix[_]] ' + eTyFilter;\n\n      }\n\n      view.setEdgeTypeFilter(f);\n    }\n\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport default fixer;\n\n"],"sourceRoot":"../../../../../src/plugins"}