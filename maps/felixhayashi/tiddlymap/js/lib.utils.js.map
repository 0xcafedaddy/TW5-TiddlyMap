{"version":3,"sources":["felixhayashi/tiddlymap/js/lib.utils.js"],"names":["_vis","require","_exception","_URL","utils","deleteTiddlers","tiddlers","keys","Object","storyList","$tw","wiki","getTiddlerList","i","length","tRef","getTiddlerRef","tiddlerExists","index","indexOf","splice","deleteTiddler","moveFieldValues","oldName","newName","isRemoveOldField","isIncludeSystemTiddlers","allTiddlers","allTitles","tObj","getTiddler","isDraft","fields","isSystemTiddler","undefined","addTiddler","Tiddler","getLabel","tiddler","aliasField","title","ucFirst","string","toUpperCase","slice","convert","col","outputType","getValues","_vis2","default","DataSet","get","returnType","Array","isArray","result","push","getDataUri","type","isForceBase64","imgTObj","encoding","contentTypeInfo","body","replace","btoa","hasOwnProp","obj","key","prototype","hasOwnProperty","call","makeHashMap","initialValues","map","create","defineProperty","enumerable","configurable","writable","value","bind","getMatches","filter","source","compileFilter","_typeof","callback","eTyFiltAutoPrefix","getEdgeTypeMatches","edgeTypes","titles","iterator","removePrefix","path","getTiddlersByPrefix","prefix","isEdgeTypeMatch","isMatch","matches","isInteger","Number","escapeRegex","Math","floor","str","replaceAll","subString","defaultReplacement","subStrings","replacement","isTrue","n","confVal","defVal","parseInt","isNaN","getTiddlerNode","attributes","getTranscludeNode","isBlock","tag","children","getElementNode","text","className","node","registerTransclude","widget","name","domNode","removeArrayElement","makeChildWidget","isReload","getBasename","substring","lastIndexOf","message","notifier","display","isShadowTiddler","isPreviewed","el","parentNode","hasClass","parentDomNode","cls","getAncestorWithClass","getPropertiesByPrefix","r","p","startsWith","substr","getWithoutPrefix","hasKeyWithPrefix","hasElements","groupByProperty","prop","getIterableCollection","classNames","elements","document","item","j","removeClass","val","findAndRemoveClassNames","getElementsByClassName","URL","createObjectURL","field","data","xhr","console","parseJSON","getImgFromWeb","imgUri","XMLHttpRequest","responseType","onerror","e","log","onload","JSON","this","Error","status","blob","response","window","send","indent","setField","parse","writeFieldData","expr","trim","stringify","getPrettyFilter","re","operands","match","stringsPlusDummies","split","operandIndex","setEntry","getTiddlerData","clone","src","dest","isLeftVersionGreater","v1","checkVersions","getEntry","defValue","v2","getField","getText","setText","getFirstElementByClassName","root","isRequired","EnvironmentError","getRandomInt","min","max","random","pickRandom","arr","getRandomLabel","options","noun","adjective","object","plural","merge","_merge","offsetLeft","x","context","lineTo","height","y","offsetTop","moveTo","width","arguments","drawRaster","scaleFactor","viewPosition","rasterSize","color","canvas","child","strokeStyle","isSystemOrDraft","isCapt","l","listeners","event","target","task","getCreationFields","unshift","Function","apply","getChildWidgetByProperty","removeDOMChildNodes","removeChild","setDomListeners","fnNames","oldPrefix","childNodes","addTWlisteners","id","addEventListener","bindTo","fn","newPrefix","mv","isForce","isDelete","targets","fromToMapper","oldTRef","newTRef","cp","limit","keysOfItemsWithProperty","haystack","needle","deleteByPrefix","sub","joinAndWrap","left","right","separator","join","getLookupTable","lookupTable","keyOfItemWithProperty","deletedTiddlers","getArrayValuesAsHashmapKeys","fieldName","lookupKey","idx","getTiddlersWithField","viewLabel","isIncludeDrafts","hop","draftTitle","getTiddlerWithField","generateDraftTitle","c","getModificationFields","getSnapshotTitle","flatten","Date","toDateString","opts","makeDraftTiddler","isobject","targetTitle","findDraft","output","newKey","step","draftTiddler","draft.title","draft.of","unflatten","touch","key2","getkey","recipient","key1","_requestFullscreen","db","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","_exitFullscreen","d","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","exitFullscreen","_fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","fullscreenElement","_fullscreenChange","delimiter","uuid","rnd","prev","forEach","chars","isarray","safe","toString","parsedKey","shift","genUUID","CHARS"],"mappings":"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","file":"../../../../felixhayashi/tiddlymap/js/lib.utils.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/utils\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport vis from '$:/plugins/felixhayashi/vis/vis.js';\nimport { EnvironmentError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport URL from '$:/plugins/felixhayashi/tiddlymap/js/URL';\n\n/*** Code **********************************************************/\n\n/**\n * A utilities class that contains universally used helper functions\n * to abbreviate code and make my life easier.\n *\n * ATTENTION: This module must not require any other tiddlymap file\n * in order to avoid cyclic dependencies. For the same reason,\n * it must also not access the `$tm.*` object.\n *\n * Exceptions to this restriction:\n *   - The utils module may access all `$tm.*` properties\n *     defined in startup.environment.\n *   - The utils module may require vendor libs or tiddlymap libs\n *     that only require vendor libs themselves.\n *\n * @see Dom utilities {@link https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/*}\n * @namespace utils\n */\nconst utils = {};\n\n/**\n * Pendant to tw native {@code addTiddlers()}.\n *\n * Also removes tiddlers from the river.\n *\n * @param {TiddlerCollection} tiddlers - A collection of tiddlers\n * to be removed.\n */\nutils.deleteTiddlers = function(tiddlers) {\n\n  var keys = Object.keys(tiddlers);\n  var storyList = $tw.wiki.getTiddlerList('$:/StoryList');\n\n  for (var i = keys.length; i--;) {\n    var tRef = utils.getTiddlerRef(tiddlers[keys[i]]);\n    if (!$tw.wiki.tiddlerExists(tiddlers[keys[i]])) {\n      // this check is important!\n      // see https://github.com/Jermolene/TiddlyWiki5/issues/1919\n      continue;\n    }\n\n    var index = storyList.indexOf(tRef);\n    if (index !== -1) { // tiddler is displayed in river\n      storyList.splice(index, 1);\n      utils.setField('$:/StoryList', 'list', storyList);\n    }\n\n    // finally delete the tiddler;\n\n\n    $tw.wiki.deleteTiddler(tRef);\n\n  }\n\n};\n\nutils.moveFieldValues = function(oldName,\n                                 newName,\n                                 isRemoveOldField,\n                                 isIncludeSystemTiddlers,\n                                 tiddlers) {\n\n  if (oldName === newName) return;\n\n  var allTiddlers = tiddlers || $tw.wiki.allTitles();\n  for (var i = allTiddlers.length; i--;) {\n    var tObj = utils.getTiddler(allTiddlers[i]);\n    if (tObj.isDraft()\n       || !tObj.fields[oldName]\n       || (!isIncludeSystemTiddlers\n           && $tw.wiki.isSystemTiddler(allTiddlers[i]))) {\n      continue;\n    }\n\n    var fields = {};\n    fields[newName] = tObj.fields[oldName];\n    if (isRemoveOldField) {\n      fields[oldName] = undefined;\n    }\n    $tw.wiki.addTiddler(new $tw.Tiddler(tObj, fields));\n\n  }\n\n};\n\n/**\n * @param {Tiddler} tiddler\n * @param {string} aliasField - A tiddler field that contains an\n *     alternative title (e.g. \"caption\").\n * @return {string|undefined} If the `aliasField` exists and is not\n *     empty, the value of the `aliasField` otherwise the tiddler's\n *     title or undefined if the tiddler doesn't exist.\n */\nutils.getLabel = function(tiddler, aliasField) {\n  var tObj = utils.getTiddler(tiddler);\n  return (tObj && tObj.fields[aliasField]\n          ? tObj.fields[aliasField]\n          : tObj.fields.title);\n};\n\n/**\n * Uppercase the first letter of a string.\n */\nutils.ucFirst = function(string) {\n  return string && string[0].toUpperCase() + string.slice(1);\n};\n\n/**\n * Transforms a collection of a certain type into a collection of\n * another type.\n *\n * **Attention**: When trying to convert an array into a object, the\n * array will be simply bounced back. Let's hope no one added enumerable\n * properties to Array.prototype :)\n *\n * @param {Collection} col - The collection to convert.\n * @param {CollectionTypeString} [outputType=\"dataset\"] - The output type.\n * @return {Collection} A **new** collection of type `outputType`.\n */\nutils.convert = function(col, outputType) {\n\n  if (typeof col !== 'object') return;\n\n  switch (outputType) {\n\n  case 'array':\n    return utils.getValues(col);\n  case 'hashmap': // fall through alias\n  case 'object':\n    if (col instanceof vis.DataSet) { // a dataset\n      return col.get({ returnType: 'Object' }); // careful has proto\n    } else { // object (array is an object itself)\n      return col; // bounce back\n    }\n\n  case 'dataset':\n  default:\n    if (col instanceof vis.DataSet) {\n      return col; // bounce back\n    }\n    if (!Array.isArray(col)) {\n      col = utils.getValues(col);\n    }\n\n    return new vis.DataSet(col);\n\n  }\n\n};\n\n/**\n * Extract all the values from a collection. If `col` is an object,\n * only properties are considered that are its own and iterable.\n *\n * @param {Collection} col\n * @return {Array} An array\n */\nutils.getValues = function(col) {\n\n  if (Array.isArray(col)) {\n    return col; // bounce back.\n  } else if (col instanceof vis.DataSet) { // a dataset\n    return col.get({ returnType: 'Array' });\n  }\n\n  const result = [];\n  const keys = Object.keys(col);\n  for (let i = keys.length; i--;) {\n    result.push(col[keys[i]]);\n  }\n\n  return result;\n\n};\n\n\nutils.getDataUri = function(tiddler, type, isForceBase64) {\n\n  const imgTObj = utils.getTiddler(tiddler);\n  type = type || imgTObj.fields.type || 'image/svg+xml';\n  let body = imgTObj.fields.text;\n  let encoding = $tw.config.contentTypeInfo[type].encoding;\n\n  if (type === 'image/svg+xml') {\n\n    // see http://stackoverflow.com/questions/10768451/inline-svg-in-css\n    body = body.replace(/\\r?\\n|\\r/g, ' ');\n\n    if (!utils.hasSubString('xmlns', body)) {\n      // @tiddlywiki it is bad to remove the xmlns attribute!\n\n      body = body.replace(/<svg/, '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n\n  }\n\n  if (isForceBase64 && encoding !== 'base64') {\n    encoding = 'base64';\n    body = window.btoa(body);\n  }\n\n  return `data:${type};${encoding},${body}`;\n\n};\n\n/**\n * @deprecated Use $tw.utils.hop instead\n *\n * I use this method on all objects that I didn't create myself.\n *\n * Why this? Well,\n *\n * 1. How do I know if the object was created via {} or\n *    utils.makeHashMap()? If the latter is the case,\n *    `hasOwnProperty()` doesn't exist.\n * 2. When the object is used as hashtable, hasOwnProperty\n *    could be overridden.\n *\n * @see http://www.2ality.com/2012/01/objects-as-maps.html\n *\n * Hope ECMA6 is out soon with dedicated datastructures.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n *\n * @param {Object} obj - The object.\n * @param {*} key - The key.\n * @result {boolean} True if key is the own property of obj.\n */\nutils.hasOwnProp = function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\n/**\n * Factory function to return a prototypeless object that is used as\n * map. It only has the property hasOwnProperty in order to to be\n * exchangeble with other framworks that depend on this method like\n * e.g. visjs.\n *\n * @param {Object} [initialValues] - an object whose own properties will be\n *     used to initialize the map.\n */\nutils.makeHashMap = function(initialValues) {\n\n  var map = Object.create(null);\n  Object.defineProperty(map, 'hasOwnProperty', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: Object.prototype.hasOwnProperty.bind(map)\n  });\n\n  if (initialValues) {\n    for (var key in initialValues) {\n      if (initialValues.hasOwnProperty(key)) {\n        map[key] = initialValues[key];\n      }\n    }\n  }\n\n  return map;\n\n};\n\n/**\n * This function facilitates to check whether a list of tiddlers\n * matches a certain filter. If the tiddler does not exist, it is not\n * returned as match. If no list is specified, all tiddlers in\n * the wiki are considered.\n *\n * @Todo: skip drafts! Or not?\n *\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @param {TiddlerCollection} [tiddlers] - A set of tiddlers used as\n *     source. If not defined, all tiddlers and system tiddlers are\n *     selected. Shadows are *not* included.\n * @return {Array.<TiddlerReference>}\n */\nutils.getMatches = function(filter, tiddlers) {\n\n  // use wiki as default source\n  var source = undefined;\n\n  if (typeof filter === 'string') {\n    filter = $tw.wiki.compileFilter(filter);\n  }\n\n  // if a source is provided, create an iterator callback\n  if (tiddlers != null && typeof tiddlers === 'object') {\n\n    // shortcuts for performance\n    var wiki = $tw.wiki;\n\n    if (!Array.isArray(tiddlers)) {\n      tiddlers = Object.keys(tiddlers);\n    }\n\n    source = function(callback) {\n      for (var i = tiddlers.length; i--;) {\n        var tObj = wiki.getTiddler(tiddlers[i]);\n        callback(tObj, tiddlers[i]);\n      }\n    };\n\n  }\n\n  return filter.call($tw.wiki, source);\n\n};\n\n// @todo move this to environment\nvar eTyFiltAutoPrefix = '[all[]] ';\n\nutils.getEdgeTypeMatches = function(filter, titles) {\n\n  if (!titles) {\n    var prefix = $tm.path.edgeTypes + '/';\n    titles = utils.getTiddlersByPrefix(prefix, {\n      iterator: 'eachTiddlerPlusShadows',\n      removePrefix: true\n    });\n  }\n\n  if (titles != null && !Array.isArray(titles)) {\n    titles = Object.keys(titles);\n  }\n\n  return utils.getMatches(eTyFiltAutoPrefix + (filter || ''), titles);\n\n};\n\nutils.isEdgeTypeMatch = function(title, filter) {\n\n  return utils.isMatch(title, eTyFiltAutoPrefix + (filter || ''));\n\n};\n\n/**\n * Tries to match a single tiddler object against a filter.\n * Returns a boolean value.\n *\n * @param {Tiddler} tiddler - The object to apply the filter to.\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @return {boolean} True if the tiddler matches the filter, false otherwise.\n */\nutils.isMatch = function(tiddler, filter) {\n\n  var tRef = utils.getTiddlerRef(tiddler);\n  var matches = utils.getMatches(filter, [ tRef ]);\n\n  return tRef === matches[0];\n\n};\n\n/**\n * Polyfill until `isInteger` has become official. If the target\n * value is an integer, return true, otherwise return false.\n * If the value is NaN or infinite, return false.\n *\n * @param {*} value - The value to be tested for being an integer.\n * @return {boolean} True if the value is an integer, false otherwise.\n */\nutils.isInteger = Number.isInteger || function(value) {\n  return typeof value === 'number' &&\n         isFinite(value) &&\n         Math.floor(value) === value;\n};\n\n/**\n * When we do not know the string, we need to escape it.\n * @deprecated use tw's escapeRegExp instead\n */\nutils.escapeRegex = function(str) {\n\n  return str.replace(/[-$^?.+*[\\]\\\\(){}|]/g, '\\\\$&');\n\n};\n\nutils.replaceAll = function(str, defaultReplacement, subStrings) {\n\n  defaultReplacement = defaultReplacement || '';\n\n  for (var i = subStrings.length; i--;) {\n\n    var subString = subStrings[i];\n    var replacement = defaultReplacement;\n\n    if (Array.isArray(subString)) {\n      replacement = subString[1];\n      subString = subString[0];\n    }\n\n    str = str.replace(subString, replacement);\n  }\n\n  return str;\n\n};\n\n/**\n * Sadly, setting fields with tw means that we lose the type information\n * since field values are persisted as strings and the type is not\n * included.\n *\n * To ensure that flags are always interpreted correctly, the following\n * function exists.\n *\n * We regard the following values as `true` (order matters):\n *\n * # Any string that can be translated into a number unequal `0`\n * # `\"true\"`\n * # Any number unequal `0`\n * # Boolean `true`\n *\n * The following as false (order matters):\n *\n * # Any string that can be translated into number `0`\n * # Every string unequal `\"true\"`\n * # The number `0`\n * # Boolean `false`\n *\n */\nutils.isTrue = function(confVal, defVal) {\n\n  if (confVal == null) {\n    return !!defVal;\n  } else if (typeof confVal === 'string') {\n    var n = parseInt(confVal);\n    return (isNaN(n) ? (confVal === 'true') : (n !== 0));\n  } else if (typeof confVal === 'boolean') {\n    return confVal;\n  } else if (typeof confVal === 'number') {\n    return (n !== 0);\n  }\n\n  return false;\n\n};\n\n/**\n * Gets a tiddler reference from a tRef or tObj\n *\n * @param {Tiddler} tiddler - A tiddler reference or object.\n * @return {TiddlerReference|undefined} A tiddler reference (title)\n */\nutils.getTiddlerRef = function(tiddler) {\n\n  if (tiddler instanceof $tw.Tiddler) {\n    return tiddler.fields.title;\n  } else if (typeof tiddler === 'string') {\n    return tiddler;\n  }\n\n};\n\n/**\n *\n */\nutils.getTiddlerNode = function(tiddler) {\n\n  var tRef = utils.getTiddlerRef(tiddler);\n  return {\n    type: 'tiddler',\n    attributes: { tiddler: { type: 'string', value: tRef } },\n    children: []\n  };\n\n};\n\n/**\n *\n */\nutils.getTranscludeNode = function(tiddler, isBlock) {\n\n  var tRef = utils.getTiddlerRef(tiddler);\n  return {\n    type: 'transclude',\n    attributes: { tiddler: { type: 'string', value: tRef } },\n    children: [],\n    isBlock: !!isBlock\n  };\n\n};\n\n/**\n *\n */\nutils.getElementNode = function(type, text, className) {\n\n  var node = {\n    type: 'element',\n    tag: type,\n    attributes: { class: { type: 'string', value: className }},\n    children: []\n  };\n\n  if (text) { node.children.push({type: 'text', text: text }); }\n\n  return node;\n\n};\n\n/**\n *\n */\nutils.registerTransclude = function(widget, name, tiddler, domNode) {\n\n  // if an instance exists, remove it\n  utils.removeArrayElement(widget.children, widget[name]);\n\n  var node = utils.getTiddlerNode(tiddler);\n  node.children.push(utils.getTranscludeNode(null, true));\n  widget[name] = widget.makeChildWidget(node);\n  widget.children.push(widget[name]);\n\n  return widget[name];\n\n};\n\n/**\n * Similar to {@code wiki.getTiddler()} but also accepts a tObj as\n * argument, thus, making it unnecessary to always differentiate or remember\n * if we are dealing with an object or a reference.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js#L866\n * @param {Tiddler} tiddler - A tiddler reference or object.\n * @param {boolean} isReload - If set to true the tiddler freshly reloaded\n *     from the db and any potentially passed tiddler object is ignored.\n * @return {Tiddler} A tiddler object.\n */\nutils.getTiddler = function(tiddler, isReload) {\n\n  if (tiddler instanceof $tw.Tiddler) {\n    if (!isReload) {\n      return tiddler;\n    }\n    tiddler = tiddler.fields.title;\n  }\n\n  return $tw.wiki.getTiddler(tiddler);\n\n};\n\n/**\n * Returns the basename of a path. A path is a string with slashes.\n *\n * @param {string} path - The path\n * @return {string} The basename\n */\nutils.getBasename = function(path) {\n\n  return path.substring(path.lastIndexOf('/') + 1);\n\n};\n\n/**\n * This function uses the tw-notification mechanism to display a\n * temporary message.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/dom/notifier.js\n * @param {string} message - A short message to display.\n */\nutils.notify = function(message) {\n\n  var tRef = '$:/temp/tiddlymap/notify';\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title : tRef,\n    text : message\n  }));\n  $tw.notifier.display(tRef);\n\n};\n\n/**\n * Checks if tiddlers (including shadow tiddlers) exist.\n *\n * @param {Tiddler} tiddler\n * @return {boolean} True if the tiddler exists, false otherwise\n */\nutils.tiddlerExists = function(tiddler) {\n\n  var tRef = utils.getTiddlerRef(tiddler);\n  return tRef && ($tw.wiki.tiddlerExists(tRef) || $tw.wiki.isShadowTiddler(tRef));\n\n};\n\n/**\n * The function allows to detect whether a widget is displayed\n * in preview or not.\n */\nutils.isPreviewed = function(widget) {\n\n  if (widget) {\n    if (widget.getVariable('tv-tiddler-preview')) {\n      return true;\n    } else { // fallback for < v5.1.9\n      var cls = 'tc-tiddler-preview-preview';\n      return !!utils.getAncestorWithClass(widget.parentDomNode, cls);\n    }\n  }\n\n  return false;\n\n};\n\n/**\n * If an ancestor that possesses a specified class exists the the\n * element will be returned, otherwise undefined is returned.\n */\nutils.getAncestorWithClass = function(el, cls) {\n\n  if (typeof el !== 'object' || typeof cls !== 'string') return;\n\n  while (el.parentNode) {\n    el = el.parentNode;\n    if ($tw.utils.hasClass(el, cls)) { return el; }\n  }\n\n};\n\n/**\n * Returns a new object that contains only properties that start with\n * a certain prefix. The prefix is optionally removed from the result.\n *\n * @param {Object} obj\n * @param {string} prefix - The start sequence\n * @param {boolean} [removePrefix=false] - True if the prefix shall be removed\n *     from the resulting property name, false otherwise.\n * @result {object}\n */\nutils.getPropertiesByPrefix = function(obj, prefix, removePrefix) {\n\n  var r = utils.makeHashMap();\n  for (var p in obj) {\n    if (utils.startsWith(p, prefix)) {\n      r[(removePrefix ? p.substr(prefix.length) : p)] = obj[p];\n    }\n  }\n\n  return r;\n\n};\n\n/**\n * Function to remove the prefix of a string\n */\nutils.getWithoutPrefix = function(str, prefix) {\n\n  return utils.startsWith(str, prefix)\n         ? str.substr(prefix.length)\n         : str;\n\n};\n\n/**\n *\n */\nutils.hasKeyWithPrefix = function(obj, prefix) {\n\n  for (var p in obj) {\n\n    if (utils.startsWith(p, prefix)) {\n      return true;\n    }\n  }\n  return false;\n\n};\n\n\n\n/**\n * Helper to increase the code semantics.\n *\n * @param {string} str - The string to work with.\n * @param {string} prefix - The sequence to test.\n * @result {boolean} True if `str` starts with `prefix`, false otherwise.\n */\nutils.startsWith = function(str, prefix) {\n\n  return (str.substring(0, prefix.length) === prefix);\n\n};\n\n/**\n * Function to find out whether an object has any enumerable properties\n * or, in case of an array, elements.\n *\n * @param {Object} obj\n * @return {boolean} True if at least one enumerable property exists,\n *     false otherwise.\n */\nutils.hasElements = function(obj) {\n\n  return (Object.keys(obj).length > 0);\n\n};\n\n/**\n *\n */\nutils.groupByProperty = function(col, prop) {\n\n  col = utils.getIterableCollection(col);\n\n  var result = utils.makeHashMap();\n  var keys = Object.keys(col);\n  for (var i in keys) {\n    var item = col[keys[i]];\n    var val = item[prop];\n    if (val == null) { // null or undefined\n      throw 'Cannot group by property ' + prop;\n    } else {\n      if (!Array.isArray(result[val])) {\n        result[val] = [];\n      }\n      result[val].push(item);\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Searches the dom for elements that possess a certain class\n * and removes this class from each element.\n *\n * @param {Array<string>} classNames - The class names to remove.\n */\nutils.findAndRemoveClassNames = function(classNames) {\n\n  for (var i = classNames.length; i--;) {\n    var elements = document.getElementsByClassName(classNames[i]);\n    for (var j = elements.length; j--;) {\n      $tw.utils.removeClass(elements[j], classNames[i]);\n    }\n  }\n\n};\n\n/**\n * Parse json from field or return default value on error.\n *\n * @param {Tiddler} tiddler - The tiddler containing the json.\n * @param {string} field - The field with the json data.\n * @param {Object} [data] - An optional default value.\n * @return {*} Either the parsed data or the default data.\n */\nutils.parseFieldData = function(tiddler, field, data) {\n\n  var tObj = utils.getTiddler(tiddler);\n  if (!tObj) return data;\n\n  if (!field) field = 'text';\n\n  return utils.parseJSON(tObj.fields[field], data);\n\n};\n\n/**\n * Loads the image from web and passes it to the callback as\n * object url.\n */\nutils.getImgFromWeb = function(imgUri, callback) {\n\n  if (!imgUri || typeof callback !== 'function') return;\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', imgUri, true);\n  xhr.responseType = 'blob';\n  xhr.onerror = function(e) { console.log(e); };\n  xhr.onload = function(e) {\n    if (this.readyState === 4 && this.status === 200) {\n      var blob = this.response;\n      callback(window.URL.createObjectURL(blob));\n    }\n  };\n\n  try { xhr.send();  } catch (e) { console.log(e); }\n\n};\n\n/**\n * Try to turn the string into a javascript object. If the\n * transformation fails, return the optionally provided `data` object.\n *\n * @param {string} str - The string to parse.\n * @param {*} data - The default value if the operation fails.\n * @return {*} Either the object resulting from the parsing operation\n *     or `undefined` or `data` if the operation failed.\n */\nutils.parseJSON = function(str, data) {\n\n  try {\n    return JSON.parse(str);\n  } catch (Error) {\n    return data;\n  }\n\n};\n\n/**\n * Serialize json data and store it in a tiddler's field.\n *\n * @param {Tiddler} tiddler - The tiddler to store the json in.\n * @param {string} field - The field that will store the json.\n * @param {Object} data - The json data.\n * @param {int} [indent = 0] - the indentation\n */\nutils.writeFieldData = function(tiddler, field, data, indent) {\n\n  if (typeof data !== 'object') {\n    return;\n  }\n\n  indent = parseInt(indent);\n  indent = (indent > 0 && field === 'text' ? indent : 0);\n\n  utils.setField(tiddler, field, JSON.stringify(data, null, indent));\n\n};\n\n/**\n * Turns the filter expression in a nicely formatted (but unusable)\n * text, making it easier to edit long filter expressions.\n *\n * @param {string} expr - A valid filter expression.\n * @result {string} A formatted (unusable) filter expression.\n */\nutils.getPrettyFilter = function(expr) {\n\n  // remove outer spaces and separate operands\n  expr = expr.trim().replace('][', '] [');\n\n  // regex to identify operands\n  var re = /[+-]?\\[.+?[\\]\\}\\>]\\]/g;\n\n  // get operands\n  var operands = expr.match(re);\n\n  // replace operands with dummies and trim again to avoid trailing spaces\n  expr = expr.replace(re, ' [] ').trim();\n\n  // turn it into an array\n  var stringsPlusDummies = expr.split(/\\s+/);\n\n  var operandIndex = 0;\n  var parts = [];\n  for (var i = 0; i < stringsPlusDummies.length; i++) {\n    parts[i] = (stringsPlusDummies[i] === '[]'\n              ? operands[operandIndex++]\n              : stringsPlusDummies[i]);\n  }\n\n  return parts.join('\\n');\n\n};\n\n/**\n * Set a tiddler field to a given value.\n *\n * Setting the title field to another value will clone the tiddler.\n * In this case, better use @link{utils.clone} as this is\n * semantically stronger.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n *\n * @return {$tw.Tiddler|undefined} The tiddler object containing\n *     the field with the assigned value.\n */\nutils.setField = function(tiddler, field, value) {\n\n  if (!tiddler || !field) return;\n\n  const tRef = utils.getTiddlerRef(tiddler);\n  const fields = { title: tRef };\n  fields[field] = value;\n\n  // do not use any tObj provided, it may result in a lost update!\n  let tObj = $tw.wiki.getTiddler(tRef, true);\n\n  if (field !== 'text' && tObj && !tObj.fields.text) {\n    fields.text = '';\n  }\n\n  tObj = new $tw.Tiddler(tObj, fields);\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\n/**\n * Clone a tiddler and give it another title.\n * This means the tiddlers are equal except from their titles.\n */\nutils.clone = function(src, dest) {\n\n  utils.setField(src, 'title', dest);\n\n};\n\n/**\n * Set the value of a data tiddler entry (index) to a given value\n */\nutils.setEntry = function(tiddler, prop, value) {\n\n  $tw.wiki.setText(utils.getTiddlerRef(tiddler), null, prop, value);\n\n};\n\n/**\n * Get the value of a data tiddler entry (index)\n */\nutils.getEntry = function(tiddler, prop, defValue) {\n\n  var data = $tw.wiki.getTiddlerData(utils.getTiddlerRef(tiddler), {});\n  return (data[prop] == null ? defValue : data[prop]);\n\n};\n\n//~ utils.getNestedProperty = function(obj, propPath) {\n//~\n  //~ propPath = propPath.split(\".\");\n  //~ for (var i = propPath.length; i--;) {\n    //~ if (obj !== null && typeof obj === \"object\") {\n      //~ obj = obj[propPath[i]];\n  //~ }\n  //~\n//~ };\n\n/**\n * Compare versions.\n * @return {boolean} Unlike `$tw.utils.checkVersions`, this function\n * only returns true if the left argument is greater than the right\n * argument.\n */\nutils.isLeftVersionGreater = function(v1, v2) {\n\n  return v1 !== v2 && $tw.utils.checkVersions(v1, v2);\n\n};\n\n\n\n\n/**\n * Get a tiddler's field value. If the field does not exist or\n * its value is an empty string, return the default or an empty\n * string.\n */\nutils.getField = function(tiddler, field, defValue) {\n\n  var tObj = utils.getTiddler(tiddler);\n  return (!tObj\n          ? defValue || ''\n          : tObj.fields[field] || defValue || '');\n\n};\n\nutils.getText = function(tiddler, defValue) {\n\n  return utils.getField(tiddler, 'text', defValue);\n\n};\n\nutils.setText = function(tiddler, value) {\n\n  utils.setField(tiddler, 'text', value);\n\n};\n\n/**\n * Works like get `getElementById()` but is based on a class name.\n * It will return the first element inside an optional parent (root)\n * that has a class of this name.\n *\n * @param {string} cls - The class name to search for.\n * @param {DOMElement} [root=document] - The context to search in.\n * @param {boolean} [isRequired=true] - If true, an exception will be\n *     thrown if no element can be retrieved. This is important\n *     when depending on third party modules and class names change!\n * @throws {EnvironmentError} - May be thrown if\n *    `isRequired` is set to true.\n * @return {DOMElement} Either a dom element or null is returned.\n */\nutils.getFirstElementByClassName = function(cls, root, isRequired) {\n\n  var el = (root || document).getElementsByClassName(cls)[0];\n  if (!el && (typeof isRequired === 'boolean' ? isRequired : true)) {\n    var text = `Missing element with class \"${cls}\" inside ${root}`;\n    throw new EnvironmentError(text);\n  }\n\n  return el;\n\n};\n\n/**\n * Checks whether a tiddler is a draft or not.\n *\n * @param {Tiddler} tiddler - The tiddler to check on.\n */\nutils.isDraft = function(tiddler) {\n\n  var tObj = utils.getTiddler(tiddler);\n  return (tObj && tObj.isDraft());\n\n};\n\nutils.getRandomInt = function(min, max) {\n\n  return Math.floor(Math.random() * (max - min) + min);\n\n};\n\nutils.pickRandom = function(arr) {\n\n  return arr[utils.getRandomInt(0, arr.length-1)];\n\n};\n\nutils.getRandomLabel = function(options) {\n\n  options = options || {};\n\n  var adjective = [\n    'exciting', 'notable', 'epic', 'new', 'fancy',\n    'great', 'cool', 'fresh', 'funky', 'clever'\n  ];\n\n  var noun = [\n    'concept', 'idea', 'thought', 'topic', 'subject'\n  ];\n\n  return 'My'\n         + ' ' + utils.pickRandom(adjective) + ' '\n         + (options.object || utils.pickRandom(noun))\n         + (options.plural ? 's' : '');\n\n};\n\n/**\n * Merges `src` into `dest` which means that the merge transforms\n * the `dest` object itself. If src and dest both have the same\n * property path, src does only replace the primitive data type\n * at the end of the path.\n *\n * @todo Should null really be skipped or treated as value?\n *\n * @param {Object} dest - The destination object.\n * @param {...Object} src - At least one object to merge into `dest`.\n * @return {Object} The original `dest` object.\n */\nutils.merge = (function() {\n\n  var _merge = function(dest, src) {\n\n    if (typeof dest !== 'object') { dest = {}; }\n\n    for (var p in src) {\n      if (src.hasOwnProperty(p)) {\n        if (src[p] != null) { // skip null or undefined\n          dest[p] = (typeof src[p] === 'object'\n                     ? _merge(dest[p], src[p])\n                     : src[p]); // primitive type, stop recursion\n        }\n      }\n    }\n\n    return dest;\n  };\n\n  return function(dest /*[,src], src*/) {\n\n    // start the merging; i = 1 since first argument is the destination\n    for (var i = 1, l = arguments.length; i < l; i++) {\n      var src = arguments[i];\n      if (src != null && typeof src === 'object') {\n        dest = _merge(dest, src);\n      }\n    }\n\n    return dest;\n\n  };\n\n})();\n\n/**\n * This function will draw a raster on the network canvas that will\n * adjust to the network's current scaling factor and viewport offset.\n *\n * @param {CanvasRenderingContext2D} context - The canvas's context\n *     passed by vis.\n * @param {number} scaleFactor - The current scale factor of the network.\n * @param {Object} viewPosition - Object with x and y that represent the\n *     current central focus point of the view.\n * @param {number} rasterSize - The size of the squares that are drawn.\n * @param {string} color - A string parsed as CSS color value.\n */\nutils.drawRaster = function(context, scaleFactor, viewPosition, rasterSize, color) {\n\n  var rasterSize = parseInt(rasterSize) || 10;\n  var canvas = context.canvas;\n  var width = canvas.width / scaleFactor;\n  var height = canvas.width / scaleFactor;\n  var offsetLeft = viewPosition.x - (width / 2);\n  var offsetTop = viewPosition.y - (height / 2);\n\n  // draw vertical lines\n  for (var x = offsetLeft; x < width; x += rasterSize) {\n    context.moveTo(x, offsetTop);\n    context.lineTo(x, height);\n  }\n\n  // draw horizontal lines\n  for (var y = offsetTop; y < height; y += rasterSize) {\n    context.moveTo(offsetLeft, y);\n    context.lineTo(width, y);\n  }\n\n  context.strokeStyle = color || '#D9D9D9';\n  context.stroke();\n\n};\n\n/**\n * Get a tiddler's text or otherwise return a default text.\n */\nutils.isSystemOrDraft = function(tiddler) {\n\n  if ($tw.wiki.isSystemTiddler(utils.getTiddlerRef(tiddler))) {\n    return true;\n  }\n\n  var tObj = utils.getTiddler(tiddler);\n  return tObj && tObj.isDraft();\n\n};\n\n/**\n * Function to merge an array of tiddlers into a single tiddler.\n *\n * @param {Array<TiddlerReference|TiddlerObject>} tiddlers - The\n *     tiddlers to merge.\n * @param {string} [title=null] - The title where the result is\n *     written to. If not specified, the first array item is used\n *     as output title.\n */\nutils.getMergedTiddlers = function(tiddlers, title) {\n\n  if (!Array.isArray(tiddlers)) return;\n\n  // turn all array elements into tiddler objects\n  for (var i = tiddlers.length; i--;) {\n    tiddlers[i] = utils.getTiddler(tiddlers[i]);\n  }\n\n  if (!tiddlers.length) return;\n\n  tiddlers.push(\n    { title: (title || tiddlers[0].fields.title) },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  // add context for `apply()` function\n  tiddlers.unshift(null);\n\n  return new (Function.prototype.bind.apply($tw.Tiddler, tiddlers));\n\n};\n\n/**\n * Depth first search\n */\nutils.getChildWidgetByProperty = function(widget, prop, val) {\n\n  var children = widget.children;\n  for (var i = children.length; i--;) {\n    var child = children[i];\n    if (child[prop] === val) {\n      return child;\n    } else {\n      child = utils.getChildWidgetByProperty(child, prop, val);\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n};\n\n/**\n * Adds or removes listeners from the target in capture or\n * non-capture (bubbling) mode.\n *\n * @param {string} task - Either \"add\" or \"remove\". Make sure to\n *     always call add and remove with *excatly* the same listeners\n *     Note: if you use bind, you change the function object.\n * @param {Element} target - The element to attach or remove the\n *     listener to or from.\n * @param {Object<string, (Function|Array)>} listeners - The key is\n *     the event name and the value is either a handler function\n *     or an array where the first index is the handler function and\n *     the second is a boolean that specifies whether to use capture\n *     or not.\n * @param {boolean} [isCapt=false] - Whether to run the handler in\n *     bubbling or capturing phase.\n */\nutils.setDomListeners = function(task, target, listeners, isCapt) {\n\n  isCapt = (typeof isCapt === 'boolean' ? isCapt : false);\n  task = task + 'EventListener';\n\n  for (var event in listeners) {\n\n\n    var l = listeners[event];\n\n    if (typeof l === 'function') {\n\n      target[task](event, l, isCapt);\n    } else { // expect Array\n\n      target[task](event, l[0], (typeof l[1] === 'boolean' ? l[1] : isCapt));\n    }\n\n  }\n\n};\n\n/**\n * If the array contains the element, the element is removed from\n * the array in-place and the removed element.\n */\nutils.removeArrayElement = function(arr, el) {\n\n  var index = arr.indexOf(el);\n  if (index > -1) {\n    return arr.splice(index, 1)[0];\n  }\n\n};\n\n/**\n * Removes all child nodes of a DOM element. This includes element\n * and non-element objects.\n */\nutils.removeDOMChildNodes = function(el) {\n\n  for (var i = el.childNodes.length; i--;) {\n    el.removeChild(el.childNodes[i]);\n  }\n\n};\n\n/**\n * Register listeners to widget using a hashmap.\n *\n * @param {Hashmap<Key, Function>} listeners - The listeners to attach.\n * @param {Widget} widget - the widget to attach the listeners to.\n * @param {Object} context - The context to bind the listeners to.\n */\nutils.addTWlisteners = function(listeners, widget, context) {\n  for (var id in listeners) {\n\n    widget.addEventListener(id, listeners[id].bind(context));\n  }\n};\n\n/**\n * Force early binding of functions to this context.\n *\n * @param context the context to bind this function to (typically `this`)\n * @param {Array<string>} fnNames - The prototype function names\n *     to bind to this context.\n */\nutils.bindTo = function(context, fnNames) {\n\n  for (var i = fnNames.length; i--;) {\n    var fn = context[fnNames[i]];\n    context[fnNames[i]] = fn.bind(context);\n  }\n\n};\n\n/**\n * Renames all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are prefixed with `newPrefix` by replacing\n * `oldPrefix` with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @param {boolean} [isDelete=true] - True, if the tiddlers with the\n *     old prefix should be deleted or false, if they should be kept.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nutils.mv = function(oldPrefix, newPrefix, isForce, isDelete) {\n\n  if (oldPrefix === newPrefix || !oldPrefix || !newPrefix) return;\n\n  isForce = (typeof isForce === 'boolean' ? isForce : false);\n  isDelete = (typeof isDelete === 'boolean' ? isDelete : true);\n\n  // prepare\n  var targets = utils.getTiddlersByPrefix(oldPrefix);\n  var fromToMapper = utils.makeHashMap();\n  for (var i = targets.length; i--;) {\n    var oldTRef = targets[i];\n    var newTRef = oldTRef.replace(oldPrefix, newPrefix);\n    if ($tw.wiki.tiddlerExists(newTRef) && !isForce) {\n      return; // undefined\n    }\n    fromToMapper[oldTRef] = newTRef;\n  }\n\n  for (var oldTRef in fromToMapper) {\n\n    utils.setField(oldTRef, 'title', fromToMapper[oldTRef]);\n    if (isDelete) {\n      $tw.wiki.deleteTiddler(oldTRef);\n    }\n  }\n\n  return fromToMapper;\n\n};\n\n/**\n * Clones all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are instead prefixed with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nutils.cp = function(oldPrefix, newPrefix, isForce) {\n\n  return utils.mv(oldPrefix, newPrefix, isForce, false);\n\n};\n\n/**\n * Checks if a value exists in an array. A strict search is used\n * which means that also the type of the needle in the haystack\n * is checked.\n *\n * @param {*} needle - The searched value.\n * @param {Array} - The array.\n * @return Returns true if needle is found in the array, false otherwise.\n */\nutils.inArray = function(needle, haystack) {\n\n  return (haystack.indexOf(needle) !== -1);\n\n};\n\n/**\n * Checks if a string exists in a string.\n */\nutils.hasSubString = function(str, sub) {\n\n  return (str.indexOf(sub) !== -1);\n\n};\n\n/**\n * Joins all elements of an array into a string where all elements\n * are wrapped between `left` and `right`.\n *\n * @param {Array} arr - The array to perform the join on.\n * @param {string} left - The wrapping string for the left side.\n * @param {string} right - The wrapping string for the right side.\n * @param {string} [separator] - The separator between a wrapped element\n *     and the next one. Defaults to space.\n * @return {string} The wrapped string, e.g. `[[hello]] [[world]]`.\n */\nutils.joinAndWrap = function(arr, left, right, separator) {\n\n  if (!separator) separator = ' ';\n  return left + arr.join(right + separator + left) + right;\n\n};\n\n/**\n * Function that searches an array for an object with a property\n * having a certain value.\n *\n * Attention: Not the item itself but the item's key is returned.\n *\n * @param {Collection} col - The collection to search in.\n * @param {string} key - The property name to look for.\n * @param {*} [val] - An optional value that the object's property must have\n *     in order to match.\n * @param {number} [limit] - An optional result limit (>0) to stop the search.\n * @return {Array<Id>} An array containing the indeces of matching items.\n */\nutils.keysOfItemsWithProperty = function(col, key, val, limit) {\n\n  col = utils.getIterableCollection(col);\n\n  var keys = Object.keys(col);\n  var result = [];\n  var limit = (typeof limit === 'number' ? limit : keys.length);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var index = keys[i];\n    if (typeof col[index] === 'object' && col[index][key]) {\n      if (!val || col[index][key] === val) {\n        result.push(index);\n        if (result.length === limit) {\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n\n};\n\n/**\n *\n *\n */\nutils.keyOfItemWithProperty = function(col, key, val) {\n  var keys = utils.keysOfItemsWithProperty(col, key, val, 1);\n  return (keys.length ? keys[0] : undefined);\n};\n\n/**\n * Delete all tiddlers with a given prefix.\n *\n * @param {string} prefix - The prefix\n */\nutils.deleteByPrefix = function(prefix, tiddlers) {\n\n  if (!prefix) return;\n\n  tiddlers = tiddlers || $tw.wiki.allTitles();\n\n  var deletedTiddlers = [];\n  for (var i = tiddlers.length; i--;) {\n    if (utils.startsWith(tiddlers[i], prefix)) {\n      $tw.wiki.deleteTiddler(tiddlers[i]);\n      deletedTiddlers.push(deletedTiddlers[i]);\n    }\n  }\n\n  return deletedTiddlers;\n\n};\n\n/**\n * This function will return a collection object whose data can be\n * via `Object.keys(col)` in a loop.\n *\n * @param {Collection} col - A collection\n * @return {Hashmap} The iterable object.\n */\nutils.getIterableCollection = function(col) {\n\n  return (col instanceof vis.DataSet ? col.get() : col);\n\n};\n\n/**\n * In a collection where all elements have a **distinct** property\n * `lookupKey`, use the value of each element's `lookupKey` as key\n * to identify the object. If no property `lookupKey` is specified,\n * the collection's values are used as keys and `true` is used as value,\n * however, if the used keys are not strings, an error is thrown.\n *\n * @param {Collection} col - The collection for which to create a lookup table.\n * @param {string} [lookupKey] - The property name to use as index in\n *     the lookup table. If not specified, the collection values are tried\n *     to be used as indeces.\n * @return {Hashmap} The lookup table.\n */\nutils.getLookupTable = function(col, lookupKey) {\n\n  col = utils.getIterableCollection(col);\n\n  var lookupTable = utils.makeHashMap();\n\n  var keys = Object.keys(col);\n  for (var i = 0, l = keys.length; i < l; i++) {\n\n    var key = keys[i];\n\n    // value to be used as the lookup table's index\n    var idx = (lookupKey ? col[key][lookupKey] : col[key]);\n\n    var type = typeof idx;\n    if ((type === 'string' && idx !== '') || type === 'number') {\n      if (!lookupTable[idx]) { // doesn't exist yet!\n        lookupTable[idx] = (lookupKey ? col[key] : true);\n        continue;\n      }\n    }\n\n    // in any other case\n    throw 'TiddlyMap: Cannot use \"' + idx + '\" as lookup table index';\n\n  }\n\n  return lookupTable;\n\n};\n\n/**\n * Remove any newline from a string\n */\nutils.getWithoutNewLines = function(str) {\n  if (typeof str === 'string') {\n    return str.replace(/[\\n\\r]/g, ' ');\n  }\n};\n\n/**\n * Wrapper for {@link utils.getLookupTable}\n */\nutils.getArrayValuesAsHashmapKeys = function(arr) {\n\n  return utils.getLookupTable(arr);\n\n};\n\n/**\n * Returns all tiddlers that possess a property with a certain value.\n *\n * @param {string} fieldName - The property name to look for.\n * @param {string} [value] - If provided, the field's value must\n *     equal this value in order to match.\n * @param {Hashmap} [options] - Further options.\n * @param {TiddlerCollection} [options.tiddlers=$tw.wiki.allTitles()] - A collection\n *     of tiddlers to perform the search on.\n * @param {boolean} [options.isIncludeDrafts=false] - True if drafts of the found\n *     tiddlers are also included in the result set.\n * @param {number} [options.limit] - A positive number delimiting the maximum\n *     number of results.\n *     tiddlers are also included in the result set.\n * @return {Hashmap.<TiddlerReference, Tiddler>} Result\n */\nutils.getTiddlersWithField = function(fieldName, value, options) {\n\n  if (!options || typeof options !== 'object') options = {};\n\n  var tiddlers = options.tiddlers || $tw.wiki.allTitles();\n  var limit = options.limit || 0;\n  var isIncludeDrafts = (options.isIncludeDrafts === true);\n  var result = utils.makeHashMap();\n  var keys = Object.keys(tiddlers);\n  var hasOwnProp = $tw.utils.hop;\n  for (var i = keys.length; i--;) {\n    var tObj = utils.getTiddler(tiddlers[keys[i]]);\n    var fields = tObj.fields;\n    if (hasOwnProp(fields, fieldName)\n       && (!hasOwnProp(fields, 'draft.of') || isIncludeDrafts)) {\n      if (!value || fields[fieldName] === value ) {\n        result[fields.title] = tObj;\n        if (--limit === 0) break;\n      }\n    }\n  }\n\n  return result;\n\n};\n\nutils.getTiddlerWithField = function(name, value) {\n\n  var result = utils.getTiddlersWithField(name, value, { limit: 1 });\n  return Object.keys(result)[0];\n\n};\n\n/**\n * Iterates over all tiddlers in a given way and returns tiddlers\n * whose title matches the prefix string.\n *\n * @param {string} prefix - The prefix to match\n * @param {Hashmap} [options] - An options object.\n * @param {string} [options.iterator=\"each\"] - A tw store iterator\n *    function, e.g. \"eachShadow\" or \"ShadowPlusTiddlers\".\n * @param {boolean} [options.removePrefix= false] - Whether to remove\n *     the prefix or to leave it.\n * @return {Array<string>} The matches with or without the prefix.\n */\nutils.getTiddlersByPrefix = function(prefix, options) {\n\n  options = options || {};\n\n  var removePrefix = (options.removePrefix === true);\n  var result = [];\n  $tw.wiki[options.iterator || 'each'](function(tObj, tRef) {\n    if (utils.startsWith(tRef, prefix)) {\n      result.push(removePrefix\n                  ? utils.getWithoutPrefix(tRef, prefix)\n                  : tRef);\n    }\n  });\n\n  return result;\n\n};\n\n/**\n * Advanced addTiddler method.\n *\n * It adds timestamps and only adds the tiddler if it doesn't exist\n * yet or the force option is used.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n */\nutils.addTiddler = function(tiddler, isForce) {\n\n  var tObj = utils.getTiddler(tiddler);\n  if (!isForce && tObj) return tObj;\n\n  tObj = new $tw.Tiddler({\n    title: tiddler,\n    text: ''\n  },\n                         $tw.wiki.getModificationFields(),\n                         $tw.wiki.getCreationFields());\n\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\nutils.getSnapshotTitle = function(viewLabel, type) {\n\n  return 'Snapshot – '\n         + viewLabel\n         + ' (' + new Date().toDateString() + ')'\n         + '.' + (type || 'png');\n\n};\n\n/**\n * URL parsing\n */\nutils.URL = URL;\n\n/************************* 3rd-party code **************************/\n\n/**\n * Modified TW-Code from Navigator widget\n * https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/widgets/navigator.js\n */\nutils.makeDraftTiddler = function(targetTitle) {\n\n  // See if there is already a draft tiddler for this tiddler\n  var draftTitle = $tw.wiki.findDraft(targetTitle);\n  if (draftTitle) {\n    return $tw.wiki.getTiddler(draftTitle);\n  }\n  // Get the current value of the tiddler we're editing\n  var tiddler = $tw.wiki.getTiddler(targetTitle);\n  // Save the initial value of the draft tiddler\n  draftTitle = utils.generateDraftTitle(targetTitle);\n  var draftTiddler = new $tw.Tiddler(\n      tiddler,\n    {\n      title: draftTitle,\n      'draft.title': targetTitle,\n      'draft.of': targetTitle\n    },\n      $tw.wiki.getModificationFields()\n  );\n  $tw.wiki.addTiddler(draftTiddler);\n  return draftTiddler;\n\n};\n\n/**\n * Modified TW-Code from Navigator widget\n * https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/widgets/navigator.js\n */\nutils.generateDraftTitle = function(title) {\n\n  var c = 0,\n    draftTitle;\n  do {\n    draftTitle = 'Draft ' + (c ? (c + 1) + ' ' : '') + 'of \\'' + title + '\\'';\n    c++;\n  } while ($tw.wiki.tiddlerExists(draftTitle));\n  return draftTitle;\n\n};\n\nutils.touch = function(tRef) {\n\n  utils.setField(tRef, 'modified', new Date());\n\n};\n\n/**\n * TW-Code\n * @deprecated delete this in 2016 and use $tw.utils.getFullScreenApis instead\n */\nutils.getFullScreenApis = function() {\n\n  var d = document,\n    db = d.body,\n    result = {\n      '_requestFullscreen': db.webkitRequestFullscreen !== undefined ? 'webkitRequestFullscreen' :\n              db.mozRequestFullScreen !== undefined ? 'mozRequestFullScreen' :\n              db.msRequestFullscreen !== undefined ? 'msRequestFullscreen' :\n              db.requestFullscreen !== undefined ? 'requestFullscreen' : '',\n      '_exitFullscreen': d.webkitExitFullscreen !== undefined ? 'webkitExitFullscreen' :\n              d.mozCancelFullScreen !== undefined ? 'mozCancelFullScreen' :\n              d.msExitFullscreen !== undefined ? 'msExitFullscreen' :\n              d.exitFullscreen !== undefined ? 'exitFullscreen' : '',\n      '_fullscreenElement': d.webkitFullscreenElement !== undefined ? 'webkitFullscreenElement' :\n              d.mozFullScreenElement !== undefined ? 'mozFullScreenElement' :\n              d.msFullscreenElement !== undefined ? 'msFullscreenElement' :\n              d.fullscreenElement !== undefined ? 'fullscreenElement' : '',\n      '_fullscreenChange': d.webkitFullscreenElement !== undefined ? 'webkitfullscreenchange' :\n              d.mozFullScreenElement !== undefined ? 'mozfullscreenchange' :\n              d.msFullscreenElement !== undefined ? 'MSFullscreenChange' :\n              d.fullscreenElement !== undefined ? 'fullscreenchange' : ''\n    };\n  if (!result._requestFullscreen || !result._exitFullscreen || !result._fullscreenElement) {\n    return null;\n  } else {\n    return result;\n  }\n\n};\n\n/**\n *\n * Slightly modified by me to allow an optional prefix.\n *\n * For the original code:\n *\n * Copyright (c) 2014, Hugh Kennedy, All rights reserved.\n * Code published under the BSD 3-Clause License\n *\n * @see oringal repo https://github.com/hughsk/flat\n * @see snapshot https://github.com/felixhayashi/flat\n * @see http://opensource.org/licenses/BSD-3-Clause\n */\nutils.flatten = function(target, opts) {\n\n  opts = opts || {};\n\n  var delimiter = opts.delimiter || '.';\n  var prefix = opts.prefix || '';\n  var output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach(function(key) {\n      var value = object[key];\n      var isarray = opts.safe && Array.isArray(value);\n      var type = Object.prototype.toString.call(value);\n      var isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      );\n\n      var newKey = prev\n        ? prev + delimiter + key\n        : prefix + key;\n\n      if (!isarray && isobject) {\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target);\n\n  return output;\n\n};\n\n\n/**\n * Copyright (c) 2014, Hugh Kennedy, All rights reserved.\n * Code published under the BSD 3-Clause License\n *\n * @see oringal repo https://github.com/hughsk/flat\n * @see snapshot https://github.com/felixhayashi/flat\n * @see http://opensource.org/licenses/BSD-3-Clause\n */\nutils.unflatten = function(target, opts) {\n\n  opts = opts || {};\n\n  var delimiter = opts.delimiter || '.';\n  var result = {};\n\n  if (Object.prototype.toString.call(target) !== '[object Object]') {\n    return target;\n  }\n\n  // safely ensure that the key is\n  // an integer.\n  function getkey(key) {\n    var parsedKey = Number(key);\n\n    return (\n      isNaN(parsedKey) ||\n      key.indexOf('.') !== -1\n    ) ? key\n      : parsedKey;\n  }\n\n  Object.keys(target).forEach(function(key) {\n    var split = key.split(delimiter);\n    var key1 = getkey(split.shift());\n    var key2 = getkey(split[0]);\n    var recipient = result;\n\n    while (key2 !== undefined) {\n      if (recipient[key1] === undefined) {\n        recipient[key1] = (\n          typeof key2 === 'number' &&\n          !opts.object ? [] : {}\n        );\n      }\n\n      recipient = recipient[key1];\n      if (split.length > 0) {\n        key1 = getkey(split.shift());\n        key2 = getkey(split[0]);\n      }\n    }\n\n    // unflatten again for 'messy objects'\n    recipient[key1] = utils.unflatten(target[key], opts);\n  });\n\n  return result;\n\n};\n\n\n/**\n * An adopted version of pmario's version to create\n * uuids of type RFC4122, version 4 ID.\n *\n * Shortened version:\n * pmario (1.0 - 2011.05.22):\n * http://chat-plugins.tiddlyspace.com/#UUIDPlugin\n *\n * Original version:\n * Math.uuid.js (v1.4)\n * http://www.broofa.com\n * mailto:robert@broofa.com\n *\n * Copyright (c) 2010 Robert Kieffer\n * Dual licensed under the MIT and GPL licenses.\n *\n * ---\n * @see https://github.com/almende/vis/issues/432\n*/\nutils.genUUID = (function() {\n\n  // Private array of chars to use\n  var CHARS = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\n\n  return function () {\n    var chars = CHARS, uuid = new Array(36);\n\n    var rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = '-';\n      } else if (i==14) {\n        uuid[i] = '4';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n\n    return uuid.join('');\n  };\n\n})();\n\n/*** Exports *******************************************************/\n\nexport default utils;\n"],"sourceRoot":"../../../../../src/plugins"}