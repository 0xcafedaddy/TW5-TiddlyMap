{"version":3,"sources":["felixhayashi/tiddlymap/js/macro/MapMacro.js"],"names":["_EdgeType","require","_utils","name","params","getParamSlots","run","this","substVarRefs","substituteVariableReferences","fn","command","arguments","args","Array","prototype","slice","call","result","apply","arr","i","maxArgs","push","_utils2","default","makeHashMap","basename","separator","str","getVariable","getBasename","tiddler","getDataUri","type","testJSON","fieldName","tObj","$tw","wiki","getTiddler","JSON","parse","fields","SyntaxError","splitAndSelect","index","concat","l","length","uuid","genUUID","oldStr","regStr","newStr","replace","regFlags","halfOfString","substr","Math","ceil","isETyVisible","viewNS","id","getETyId","isEdgeTypeMatch","eTyFilter","_EdgeType2","namespace","scale","parseInt","mergeFields","prefix","getPropertiesByPrefix","option","path","unit","propertyPath","split","prop","hasSubString","lastIndexOf"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/macro/MapMacro.js","sourcesContent":["// @preserve\n/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/js/macro/tmap\ntype: application/javascript\nmodule-type: macro\n\n@preserve\n\n\\*/\n\n\n/*** Imports *******************************************************/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nconst name = 'tmap';\nconst params = getParamSlots(5);\n\n/**\n * @this MacroCallWidget\n * @return {string} the result of the operation or an empty string.\n * @private\n */\nfunction run() {\n\n  this.substVarRefs = this.substituteVariableReferences;\n\n  const fn = command[arguments[0]];\n  let result = null;\n\n  if (typeof fn === 'function') {\n    const args = Array.prototype.slice.call(arguments,1);\n    result = fn.apply(this, args);\n  }\n\n  return (typeof result === 'string' ? result : '');\n\n}\n\n/**\n * unfortunately tw forces us to specify params in advance so I\n * will reserve some argument slots here.\n * @private\n */\nfunction getParamSlots(maxArgs) {\n\n  const arr = [];\n  for (let i = 0; i < maxArgs; i++) {\n    arr.push({ name : ('arg' + i) });\n  }\n\n  return arr;\n\n}\n\n/**\n * In connection with tiddlymap, this macro allows us to access\n * system information from within tiddlers as well as to execute\n * some util functions.\n *\n * Every command will be called with `this` pointing to the current\n * MacroCallWidget instance!\n *\n * @private\n */\nvar command = utils.makeHashMap();\n\n/**\n * Returns the basename of the string\n *\n * @see {@link utils.basename}\n */\ncommand.basename = function(separator) {\n\n  var str = this.getVariable('currentTiddler');\n  return utils.getBasename(str, separator);\n\n};\n\n/**\n * TW messes with svg urls so we always use base64 encoding when\n * a data uri is requested as macro call\n */\ncommand.datauri = function(tiddler, type) {\n\n  return utils.getDataUri(tiddler, type, true);\n\n};\n\ncommand.testJSON = function(fieldName) {\n\n  var tObj = $tw.wiki.getTiddler(this.getVariable('currentTiddler'));\n\n  try {\n    JSON.parse(tObj.fields[fieldName]);\n    return 'valid';\n  } catch (SyntaxError) {\n    return 'malformed';\n  }\n\n};\n\ncommand.splitAndSelect = function(separator, index) {\n\n  var str = this.getVariable('currentTiddler');\n  var result = str.split(separator)[index];\n\n  return (result != null ? result : str);\n\n};\n\ncommand.concat = function() {\n\n  var str = '';\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    str += arguments[i];\n  }\n  return str;\n\n};\n\ncommand.uuid = function() {\n\n  return utils.genUUID();\n\n};\n\ncommand.regRepl = function() {\n\n  var oldStr = this.substVarRefs(arguments[0]);\n  var regStr = arguments[1];\n  var newStr = this.substVarRefs(arguments[2]);\n  var regFlags = this.substVarRefs(arguments[4]);\n\n  return oldStr.replace(new RegExp(regStr, regFlags), newStr);\n\n};\n\ncommand.halfOfString = function() {\n\n  var str = this.substVarRefs(arguments[0]);\n  if (!str) return '';\n\n  return str.substr(0, Math.ceil(str.length / 2));\n\n};\n\ncommand.isETyVisible = function(viewNS, eTyFilter, id) {\n\n  id = command.getETyId.call(this, viewNS, id);\n  return '' + utils.isEdgeTypeMatch(id, eTyFilter);\n\n};\n\ncommand.getETyId = function(viewNS, id) {\n\n  id = id || this.getVariable('currentTiddler');\n  return (new EdgeType(id, null, { namespace: viewNS })).id;\n\n};\n\ncommand.scale = function() {\n\n  var str = '';\n  for (var i = 1, l = parseInt(arguments[0]); i < l; i++) {\n    str += '[[' + i + ']]';\n  }\n  return str;\n\n};\n\ncommand.mergeFields = function() {\n\n  var tObj = utils.getTiddler(arguments[0]);\n  var prefix = arguments[1];\n  var separator = arguments[2] || ' ';\n\n  if (!tObj) return;\n\n  var fields = utils.getPropertiesByPrefix(tObj.fields, prefix);\n  var str = '';\n  for (var name in fields) {\n\n    if (typeof fields[name] === 'string') {\n\n      str += fields[name] + separator;\n    }\n  }\n  return str;\n\n};\n\ncommand.option = function(path, unit) {\n\n  var prop = $tm;\n  var propertyPath = path.split('.');\n\n  for (var i = 0; i < propertyPath.length; i++) {\n    if (typeof prop == 'object' && prop[propertyPath[i]]) {\n      prop = prop[propertyPath[i]];\n    }\n  }\n\n  // TODO: ugly, use regex\n  if (unit && typeof prop === 'string'\n     && utils.hasSubString(unit)\n     && (prop.lastIndexOf(unit) + unit.length) === prop.length) {\n    prop = prop + unit;\n  }\n\n  return prop;\n\n};\n\n/*** Exports *******************************************************/\n\nexport { run, name, params };\n"],"sourceRoot":"../../../../../../src/plugins"}