{"version":3,"sources":["felixhayashi/tiddlymap/js/macro/MapMacro.js"],"names":["_EdgeType","require","_ViewAbstraction","_utils","name","params","getParamSlots","run","this","substVarRefs","substituteVariableReferences","fn","command","arguments","result","Array","prototype","slice","call","args","maxArgs","arr","_utils2","default","makeHashMap","basename","separator","str","getVariable","getBasename","datauri","tiddler","type","getDataUri","testJSON","tObj","$tw","wiki","getTiddler","JSON","parse","fields","fieldName","splitAndSelect","index","split","concat","i","l","length","genUUID","regRepl","oldStr","newStr","regFlags","replace","RegExp","regStr","substr","Math","ceil","isETyVisible","view","userInput","_ViewAbstraction2","id","getETyId","isEdgeTypeVisible","_EdgeType2","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","getConfig","getId","scale","parseInt","mergeFields","prefix","getPropertiesByPrefix","option","path","unit","prop","$tm","propertyPath","hasSubString","lastIndexOf"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/macro/MapMacro.js","sourcesContent":["// @preserve\n/*\\\ntitle: $:/plugins/felixhayashi/tiddlymap/js/macro/tmap\ntype: application/javascript\nmodule-type: macro\n\n@preserve\n\n\\*/\n\n\n/*** Imports *******************************************************/\n\nimport EdgeType        from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nconst name = 'tmap';\nconst params = getParamSlots(5);\n\n/**\n * @this MacroCallWidget\n * @return {string} the result of the operation or an empty string.\n * @private\n */\nfunction run() {\n\n  this.substVarRefs = this.substituteVariableReferences;\n\n  const fn = command[arguments[0]];\n  let result = null;\n\n  if (typeof fn === 'function') {\n    const args = Array.prototype.slice.call(arguments,1);\n    result = fn.apply(this, args);\n  }\n\n  return (typeof result === 'string' ? result : '');\n\n}\n\n/**\n * unfortunately tw forces us to specify params in advance so I\n * will reserve some argument slots here.\n * @private\n */\nfunction getParamSlots(maxArgs) {\n\n  const arr = [];\n  for (let i = 0; i < maxArgs; i++) {\n    arr.push({ name : ('arg' + i) });\n  }\n\n  return arr;\n\n}\n\n/**\n * In connection with tiddlymap, this macro allows us to access\n * system information from within tiddlers as well as to execute\n * some util functions.\n *\n * Every command will be called with `this` pointing to the current\n * MacroCallWidget instance!\n *\n * @private\n */\nvar command = utils.makeHashMap();\n\n/**\n * Returns the basename of the string\n *\n * @see {@link utils.basename}\n */\ncommand.basename = function(separator) {\n\n  var str = this.getVariable('currentTiddler');\n  return utils.getBasename(str, separator);\n\n};\n\n/**\n * TW messes with svg urls so we always use base64 encoding when\n * a data uri is requested as macro call\n */\ncommand.datauri = function(tiddler, type) {\n\n  return utils.getDataUri(tiddler, type, true);\n\n};\n\ncommand.testJSON = function(fieldName) {\n\n  var tObj = $tw.wiki.getTiddler(this.getVariable('currentTiddler'));\n\n  try {\n    JSON.parse(tObj.fields[fieldName]);\n    return 'valid';\n  } catch (SyntaxError) {\n    return 'malformed';\n  }\n\n};\n\ncommand.splitAndSelect = function(separator, index) {\n\n  var str = this.getVariable('currentTiddler');\n  var result = str.split(separator)[index];\n\n  return (result != null ? result : str);\n\n};\n\ncommand.concat = function() {\n\n  var str = '';\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    str += arguments[i];\n  }\n  return str;\n\n};\n\ncommand.uuid = function() {\n\n  return utils.genUUID();\n\n};\n\ncommand.regRepl = function() {\n\n  var oldStr = this.substVarRefs(arguments[0]);\n  var regStr = arguments[1];\n  var newStr = this.substVarRefs(arguments[2]);\n  var regFlags = this.substVarRefs(arguments[4]);\n\n  return oldStr.replace(new RegExp(regStr, regFlags), newStr);\n\n};\n\ncommand.halfOfString = function() {\n\n  var str = this.substVarRefs(arguments[0]);\n\n  if (!str) {\n    return '';\n  }\n\n  return str.substr(0, Math.ceil(str.length / 2));\n\n};\n\ncommand.isETyVisible = function(view, userInput) {\n\n  view = new ViewAbstraction(view);\n\n  const id = command.getETyId.call(this, view, userInput);\n\n  return '' + view.isEdgeTypeVisible(id);\n\n};\n\ncommand.getETyId = function(view, userInput) {\n\n  view = new ViewAbstraction(view);\n\n  let type = EdgeType.getInstance(userInput || this.getVariable('currentTiddler'));\n\n  if (!type.namespace) {\n\n    const { marker, name } = EdgeType.getIdParts(type.id);\n    const namespace = view.getConfig('edge_type_namespace');\n\n    type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n  }\n\n  return type.id;\n\n};\n\ncommand.scale = function() {\n\n  var str = '';\n  for (var i = 1, l = parseInt(arguments[0]); i < l; i++) {\n    str += '[[' + i + ']]';\n  }\n  return str;\n\n};\n\ncommand.mergeFields = function() {\n\n  var tObj = utils.getTiddler(arguments[0]);\n  var prefix = arguments[1];\n  var separator = arguments[2] || ' ';\n\n  if (!tObj) return;\n\n  var fields = utils.getPropertiesByPrefix(tObj.fields, prefix);\n  var str = '';\n  for (var name in fields) {\n\n    if (typeof fields[name] === 'string') {\n\n      str += fields[name] + separator;\n    }\n  }\n  return str;\n\n};\n\ncommand.option = function(path, unit) {\n\n  var prop = $tm;\n  var propertyPath = path.split('.');\n\n  for (var i = 0; i < propertyPath.length; i++) {\n    if (typeof prop == 'object' && prop[propertyPath[i]]) {\n      prop = prop[propertyPath[i]];\n    }\n  }\n\n  // TODO: ugly, use regex\n  if (unit && typeof prop === 'string'\n     && utils.hasSubString(unit)\n     && (prop.lastIndexOf(unit) + unit.length) === prop.length) {\n    prop = prop + unit;\n  }\n\n  return prop;\n\n};\n\n/*** Exports *******************************************************/\n\nexport { run, name, params };\n"],"sourceRoot":"../../../../../../src/plugins"}