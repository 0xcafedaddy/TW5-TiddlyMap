{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/NodeType.js"],"names":["_MapElementType","require","_utils","NodeType","id","data","_utils2","default","getWithoutPrefix","$tm","path","nodeTypes","_MapElementType2","call","this","prototype","Object","_fieldMeta","$tw","utils","extend","priority","parse","raw","parseInt","stringify","num","isInteger","toString","getWithoutNewLines","fa-icon","tw-icon","getInheritors","src","s","scope","getMatches","wiki","allTitles"],"mappings":"qEAaA,IAAAA,iBAAAC,QAAA,mHACA,IAAAC,QAAAD,QAAA;;;;;;;;;;;AAdA,QAAAE,UAAAC,EAAAC,GA2BE,GAAID,YAAcD,UAAU,CAC1B,MAAOC,GAGTA,QAAaA,KAAO,SACZE,QAAAC,QAAMC,iBAAiBJ,EAAIK,IAAIC,KAAKC,UAAY,KAChD,cAtBVC,kBAAAL,QAAAM,KA0BIC,KAZJV,EAcIK,IAAIC,KAAKC,UAZXR,SAAIC,WACFC,GAQFF,SAAAY,UAAAC,OAAeH,OACbD,iBAAAL,QAEAQ,UAOJZ,UAAAc,WAAAC,IAAAC,MAAAC,UAAAR,iBAAAL,QAAAU,YACAd,QACAkB,UAKIC,MAAO,QAAAA,GAASC,GAHpBpB,MAASc,OAATM,GAA0BJ,EAAJK,SAAiBD,IAErCE,UAAY,QAAAA,GAAAC,GACVJ,MAAOhB,SAAAC,QAAAoB,UAAAD,GAAcA,EAAAE,WAAA,MAGrBH,OACEA,UAAOnB,QAAAC,QAAAsB,oBALCC,aAQZC,cAcF5B,UAASY,UAAUiB,cAAgB,SAASC,GAE1C,GAAIC,GAAIpB,KAAKqB,KACb,OAAQD,GAAI5B,QAAAC,QAAM6B,WAAWF,EAAGD,GAAOf,IAAImB,KAAKC,iCAMnCnC","file":"../../../../../felixhayashi/tiddlymap/js/graph/NodeType.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/NodeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * Used to define the type of a node.\n *\n * @class\n * @extends MapElementType\n *\n */\nfunction NodeType(id, data) {\n\n  if (id instanceof NodeType) {\n    return id; // bounce back!\n  }\n\n  id = (typeof id === 'string'\n        ? utils.getWithoutPrefix(id, $tm.path.nodeTypes + '/')\n        : 'tmap:unknown');\n\n  // call the parent constructor\n  MapElementType.call(\n    this,\n    id,\n    $tm.path.nodeTypes,\n    NodeType._fieldMeta,\n    data\n  );\n\n}\n\n// !! EXTENSION !!\nNodeType.prototype = Object.create(MapElementType.prototype);\n// !! EXTENSION !!\n\nNodeType._fieldMeta = $tw.utils.extend({}, MapElementType._fieldMeta, {\n  'view': {},\n  'priority': {\n    parse: function(raw) {\n      return (isNaN(raw) ? 1 : parseInt(raw));\n    },\n    stringify: function(num) {\n      return utils.isInteger(num) ? num.toString() : '1';\n    }\n  },\n  'scope': {\n    stringify: utils.getWithoutNewLines\n  },\n  'fa-icon': {},\n  'tw-icon': {}\n});\n\n/**\n * Get all tiddlers that inherit this type.\n *\n * @param {Array<TiddlerReference>} [src=$tw.wiki.allTitles()] - A list\n *     of tiddlers that is searched for inheritors.\n * @return {Array<TiddlerReference>} The inheritors.\n */\nNodeType.prototype.getInheritors = function(src) {\n\n  var s = this.scope;\n  return (s ? utils.getMatches(s, src || $tw.wiki.allTitles()) : []);\n\n};\n\n/*** Exports *******************************************************/\n\nexport default NodeType;\n"],"sourceRoot":"../../../../../../src/plugins"}