{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FilterEdgeTypeSubscriber.js"],"names":["FilterEdgeTypeSubstriber","allEdgeTypes","options","priority","edgeType","namespace","tObj","fieldName","toWL","filter","fields","parentWidget","widget","setVariable","title","toRefs","getMatches","edge","type","to","name","currentFilter","toTRef","tracker","getTiddlerById","safe_toTRef","$tw","utils","stringifyList","length","setField"],"mappings":";;;;;;;;;;;AAaA;;;;AACA;;;;AACA;;;;;;;;;;+eAfA;AACA;;;;;;;;;;AAUA;;AAMA;;AAEA;;;;;;;IAOMA,wB;;;AAEJ;;;AAGA,oCAAYC,YAAZ,EAAwC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,+IAChCD,YADgC,aAChBE,UAAU,EADM,IACCD,OADD;AAEvC;;AAED;;;;;;;8BAGUE,Q,EAAU;;AAElB,aAAOA,SAASC,SAAT,KAAuB,WAA9B;AAED;;AAED;;;;;;2CAGuBC,I,EAAMC,S,EAAWC,I,EAAM;;AAE5C,UAAMC,SAASH,KAAKI,MAAL,CAAYH,SAAZ,CAAf;;AAEA;AACA,UAAMI,eAAe,IAAI,iBAAOC,MAAX,CAAkB,EAAlB,CAArB;AACAD,mBAAaE,WAAb,CAAyB,gBAAzB,EAA2CP,KAAKI,MAAL,CAAYI,KAAvD;AACA,UAAMF,SAAS,IAAI,iBAAOA,MAAX,CAAkB,EAAlB,EAAsB,EAAC,gBAAgBD,YAAjB,EAAtB,CAAf;AACA;AACA,UAAMI,SAAS,gBAAMC,UAAN,CAAiBP,MAAjB,EAAyBD,IAAzB,EAA+BI,MAA/B,CAAf;;AAEA,aAAOG,MAAP;AAED;;AAED;;;;;;+BAGWT,I,EAAMW,I,EAAMC,I,EAAM;;AAE3B,UAAI,CAACD,KAAKE,EAAV,EAAc;AACZ;AACD;;AAED;AACA,UAAMC,OAAOF,KAAKE,IAAlB;AACA,UAAMC,gBAAgBf,KAAKI,MAAL,CAAYU,IAAZ,KAAqB,EAA3C;AACA,UAAME,SAAS,KAAKC,OAAL,CAAaC,cAAb,CAA4BP,KAAKE,EAAjC,CAAf;AACA;AACA;AACA;AACA;AACA,UAAIM,cAAcC,IAAIC,KAAJ,CAAUC,aAAV,CAAwB,CAACN,MAAD,CAAxB,CAAlB;;AAEA,UAAID,cAAcQ,MAAd,GAAuB,CAA3B,EAA8B;AAC5BJ,sBAAc,MAAMA,WAApB;AACD;;AAED;AACA,sBAAMK,QAAN,CAAexB,IAAf,EAAqBc,IAArB,EAA2BC,gBAAgBI,WAA3C;;AAEA,aAAOR,IAAP;AAED;;;;;;AAGH;;QAESjB,wB,GAAAA,wB","file":"../../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/magicEdgeTypeSubscriber/FilterEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/filter\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport AbstractMagicEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber';\nimport Widget from \"$:/core/modules/widgets/widget.js\";\n\n/*** Code **********************************************************/\n\n/**\n * The FilterEdgeTypeSubstriber deals with connections that are stored inside\n * tiddler fields via a dynamic filter.\n *\n * @see http://tiddlymap.org/#tw-filter\n * @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/206\n */\nclass FilterEdgeTypeSubstriber extends AbstractMagicEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 10, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return edgeType.namespace === 'tw-filter';\n\n  }\n\n  /**\n   * @override\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    const filter = tObj.fields[fieldName];\n\n    // Solves https://github.com/felixhayashi/TW5-TiddlyMap/issues/278\n    const parentWidget = new Widget.widget({});\n    parentWidget.setVariable(\"currentTiddler\", tObj.fields.title);\n    const widget = new Widget.widget({}, {\"parentWidget\": parentWidget});\n    //noinspection UnnecessaryLocalVariableJS\n    const toRefs = utils.getMatches(filter, toWL, widget);\n\n    return toRefs;\n\n  }\n\n  /**\n   * Stores and maybe overrides an edge in this tiddler\n   */\n  insertEdge(tObj, edge, type) {\n\n    if (!edge.to) {\n      return;\n    }\n\n    // get the name without the private marker or the namespace\n    const name = type.name;\n    const currentFilter = tObj.fields[name] || \"\";\n    const toTRef = this.tracker.getTiddlerById(edge.to);\n    // by treating the toTRef as a list of one, we can make\n    // it safe to append to any filter.\n    // \"tiddler\" -> \"tiddler\"\n    // \"tiddler with spaces\" -> \"[[tiddler with spaces]]\"\n    var safe_toTRef = $tw.utils.stringifyList([toTRef]);\n\n    if (currentFilter.length > 0) {\n      safe_toTRef = \" \" + safe_toTRef;\n    }\n\n    // save\n    utils.setField(tObj, name, currentFilter + safe_toTRef);\n\n    return edge;\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport { FilterEdgeTypeSubstriber };\n"],"sourceRoot":"../../../../../../../src/plugins"}