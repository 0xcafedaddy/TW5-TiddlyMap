{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["_CallbackManager","require","_ViewAbstraction","_EdgeType","_Popup","_vis","_widget","_utils","_SelectionRectangle","_environment","env","MapWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAttr","getAttribute","isDebug","_utils2","default","isTrue","$tm","config","sys","debug","bindTo","callbackManager","_CallbackManager2","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","contextmenu","handleContextMenu","widgetDomListeners","handleWidgetKeyup","repaintGraph","handleWidgetKeydown","conVector","from","to","edge","callback","_this2","eTyFilter","param","fromLabel","adapter","label","toLabel","selectNodeById","view","getLabel","dialogManager","open","isConfirmed","outTObj","str","getText","type","_EdgeType2","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","raw","getEntry","ref","sysMeta","setEntry","tiddlerExists","setText","touch","x","y","n1","n2","message","args","Array","prototype","slice","arguments","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","appendChild","graphDomNode","isPreviewed","isTiddlyWikiFakeDom","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","addLoadingBar","tooltip","_Popup2","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","getFirstElementByClassName","sidebar","contains","rebuildEditorBar","initAndRenderGraph","registry","push","reloadRefreshTriggers","checkForFreshInstall","misc","mainEditorId","url","query","toggleEnlargedMode","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","widgetQualifier","widgetTempPath","isViewBound","viewRoot","viewLabel","viewHolder","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","rasterMenuBtnClass","variables","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","updates","isZombieWidget","changedTiddlers","refresh","isViewSwitched","hasChangedAttributes","isViewUpdated","update","reloadBackgroundImage","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","isForce","hide","remove","refreshTriggers","parseStringArray","i","length","add","handleTriggeredRefresh","hidePopups","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","visOptions","physics","network","setOptions","stabilize","start","graph","getGraph","graphData","nodes","changedEdges","refreshDataSet","edges","nodesById","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","keys","maybeMatches","inGraph","isShowNeighbourhood","tRef","modified","nodeFilter","getNodeFilter","matches","getMatches","_this3","_destructVis","isInSidebar","getVisOptions","_vis2","DataSet","makeHashMap","setEnabled","enabled","canvas","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","ev","_this4","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","selectNodes","allNodes","ucFirst","role","Network","openTiddlerWithId","getSelection","focus","paramObject","elements","handleRemoveElements","selectRect","selectedNodes","redraw","stopPropagation","target","mouse","offsetY","handleConnectionEvent","_SelectionRectangle2","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","zoomView","enlargedMode","interaction","nodeId","getNodeAt","offsetX","DOMtoCanvas","mode","registerTransclude","_this5","contextMenuWidget","focusButtonStateTRef","deleteByPrefix","isLiveView","clipBoard","ids","removeNode","_this6","globalOptions","vis","localOptions","parseJSON","merge","manipulation","deleteNode","data","deleteEdge","addEdge","resetVisManipulationBar","addNode","handleInsertNode","editNode","handleEditNode","editEdge","solver","visCallback","getElementsByClassName","_this7","getField","isClone","newView","_ViewAbstraction2","protoView","setView","references","getOccurrences","toString","refFilter","joinAndWrap","_this8","_this9","visInherited","JSON","stringify","viewConfig","filter.prettyNodeFltr","filter.prettyEdgeFltr","getEdgeTypeFilter","createdOn","getCreationDate","numberOfNodes","numberOfEdges","dialog","extend","preselects","getPropertiesByPrefix","fields","prvBg","saveNodePositions","curBg","nf","eTf","setNodeFilter","_this10","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","snapshot","width","height","action","cp","dispatchEvent","navigateTo","wiki","deleteTiddler","title","a","download","href","MouseEvent","addTiddler","Tiddler","text","Date","stripPreamble","toDataURL","getWithoutPrefix","viewname","isLocked","count","openStandardConfirmDialog","addPlaceholder","_this11","destroy","defaultViewLabel","msg","trigger","getSnapshot","curTiddler","liveTab","fallbackView","_ref2","handleRemoveNodes","edgeIds","deleteEdges","get","_this12","tiddlers","params","stringifyList","delete-from","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","_ref3","setCentralTopic","properties","iterations","undefined","idsOfNodesWithoutPosition","centralGravity","fitGraph","_ref4","scale","animation","getContainer","_this13","window","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","_this14","isMatch","makeNode","tObj","draft.title","insertNode","_this15","tracker","getTiddlerById","globalDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","getNodeData","nodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","inherited-local-default-style","localDefaults","inherited-group-styles","global.tmap.style","local-node-style","addToPreselects","scope","store","global","p","local","isActivated","singleClickMode","handleOpenMapElementEvent","_ref5","typeId","behaviour","edgeClickBehaviour","rootWidget","rect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","pointer","style","evt","selected","_ref6","isArray","defaultColor","colorObj","hover","_ref7","pos","_extends","draggedNode","setNodesMoveable","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","highlight","fillStyle","fillRect","_toConsumableArray","beginPath","globalAlpha","strokeStyle","strokeRect","rPos","getNearestRasterPosition","moveTo","lineTo","stroke","arc","Math","PI","fill","div","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","render","indeces","allETy","description","isShown","constructTooltip","total","display","setAttribute","_ref9","buttons","populator","_this16","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","getBoundingClientRect","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","noCache","_this17","defaultViewHolder","imgTObj","bgFieldValue","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","toggleClass","b","isMoveable","isFixed","fixed","buttonEvents","addEventListener","setGraphButtonEnabled"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    $tm.dialogManager.open('welcome', {}, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      const view = $tm.misc.defaultViewLabel;\n\n      const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n      const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers) // use changed view\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n      this.rebuildEditorBar();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n\n        this.rebuildEditorBar();\n        this.reloadBackgroundImage();\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n\n      if (!this.isPreventZoomOnNextUpdate) {\n\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      this.isPreventZoomOnNextUpdate = false;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const zoomView = !!(ev.ctrlKey || this.isInSidebar || this.enlargedMode);\n\n    if (zoomView) {\n      ev.preventDefault();\n    }\n\n    if (zoomView !== this.visOptions.interaction.zoomView) {\n\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      this.visOptions.interaction.zoomView = zoomView;\n      this.network.setOptions({ interaction: { zoomView }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.tooltip.hide(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    window.clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = window.setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n\n        this.handleOpenMapElementEvent(properties);\n\n      }\n\n\n    } else { // = clicked on an empty spot\n\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    this.contextMenu.hide(0, true);\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n\n      if (nodes.length === 1) {\n        this.draggedNode = nodes[0];\n      }\n\n    }\n\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) {\n        $tm.notify(msg);\n      }\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}