{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["_DialogManager","require","_CallbackManager","_ViewAbstraction","_EdgeType","_Popup","_vis","_widget","_utils","_SelectionRectangle","MapWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAttr","getAttribute","isDebug","_utils2","default","isTrue","$tm","config","sys","debug","bindTo","callbackManager","_CallbackManager2","dialogManager","_DialogManager2","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","tmap:tm-edit-view","handleEditView","tmap:tm-store-position","handleStorePositions","tmap:tm-generate-widget","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","repaintGraph","visListeners","click","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","dragEnd","handleVisDragEnd","hoverNode","hoverEdge","handleVisHoverElement","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","mousewheel","handleCanvasScroll","contextmenu","handleContextMenu","widgetDomListeners","handleWidgetKeyup","handleVisSingleClickEvent","conVector","from","_this2","eTyFilter","param","fromLabel","adapter","selectNodeById","edge","label","toLabel","to","viewNS","view","handleWidgetKeydown","open","isConfirmed","outTObj","namespace","getConfig","type","_EdgeType2","getText","exists","save","insertEdge","isEdgeTypeVisible","getLabel","pretty","callback","ref","sysMeta","setEntry","tiddlerExists","setText","misc","defaultViewLabel","n1","insertNode","x","y","n2","message","args","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","appendChild","graphDomNode","Array","prototype","isTiddlyWikiFakeDom","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","widget","setDomListeners","window","addLoadingBar","tooltip","_Popup2","showDelay","popups","delay","contextMenu","sidebar","getFirstElementByClassName","isInSidebar","contains","initAndRenderGraph","registry","push","reloadRefreshTriggers","checkForFreshInstall","url","query","toggleEnlargedMode","rebuildEditorBar","graphLoadingBarDomNode","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","edgeTypeFilter","getPaths","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","name","setVariable","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","renderChildren","firstChild","updates","network","isZombieWidget","isPreviewed","changedTiddlers","rebuildGraph","reinitNetwork","rebuildGraphOptions","refresh","isViewSwitched","hasChangedAttributes","nodeTypes","isViewUpdated","update","ignoreNextViewModification","reloadBackgroundImage","hasChangedElements","hidePopups","removeChildDomNodes","refreshChildren","isForce","str","refreshTriggers","parseStringArray","hide","length","i","add","handleTriggeredRefresh","_ref","arguments","undefined","resetFocus","hasNetworkStabilized","changes","withoutPosition","duration","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","stabilize","start","graph","changedNodes","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","getGraph","keys","maybeMatches","inGraph","isShowNeighbourhood","tRef","isSystemOrDraft","getId","modified","nodeFilter","getNodeFilter","matches","getMatches","_this3","_destructVis","getVisOptions","_vis2","DataSet","makeHashMap","setEnabled","enabled","Network","canvas","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","focus","ev","_this4","nodeIds","getSelectedNodes","ctrlKey","preventDefault","handleAddNodesToClipboard","keyCode","handlePasteNodesFromClipboard","tabIndex","selectNodes","allNodes","notify","ucFirst","role","handleConnectionEvent","openTiddlerWithId","handleRemoveElements","getSelection","paramObject","elements","selectRect","selectedNodes","redraw","stopPropagation","target","mouse","DOMtoCanvas","offsetX","offsetY","_SelectionRectangle2","nodePositions","getPositions","inArray","assignActiveStyle","zoomView","enlargedMode","interaction","_this5","nodeId","show","div","registerTransclude","contextMenuWidget","mode","render","focusButtonStateTRef","getNodeAt","clipBoard","ids","get","returnType","removeNode","globalOptions","vis","localOptions","parseJSON","merge","manipulation","deleteNode","data","_this6","resetVisManipulationBar","addEdge","addNode","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","getElementsByClassName","_this7","getField","isClone","newView","_ViewAbstraction2","protoView","_this8","isLocked","references","getOccurrences","count","toString","filter","joinAndWrap","rename","visInherited","JSON","stringify","viewConfig","filter.prettyNodeFltr","filter.prettyEdgeFltr","getEdgeTypeFilter","vis-inherited","createdOn","getCreationDate","numberOfNodes","isCreate","preselects","extend","getPropertiesByPrefix","fields","prvBg","_this9","setConfig","curBg","nf","eTf","setEdgeTypeFilter","_this10","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","dialog","snapshot","width","height","action","cp","navigateTo","wiki","deleteTiddler","title","a","download","setNodeFilter","href","MouseEvent","dispatchEvent","addTiddler","Tiddler","text","toDataURL","stripPreamble","getWithoutPrefix","_this11","viewname","openStandardConfirmDialog","destroy","setView","msg","trigger","curTiddler","getTiddler","liveTab","fallbackView","_ref2","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","tiddlers","params","stringifyList","delete-from","deletionCount","deleteNodes","success","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","_ref3","setCentralTopic","withNotify","positions","saveNodeData","properties","idsOfNodesWithoutPosition","getNodeData","_ref4","scale","animation","getContainer","_this13","fit","fitGraph","easingFunction","activeFitTimeout","setTimeout","node","_this14","isMatch","makeNode","tObj","draft.title","_this15","getTiddlerById","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","globalDefaults","inherited-local-default-style","localDefaults","inherited-group-styles","global.tmap.style","addToPreselects","scope","store","tracker","local","p","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","global","_ref5","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","clientWidth","left","distRight","distBottom","calculatedHeight","innerHeight","top","style","evt","selected","_ref6","isArray","defaultColor","colorObj","highlight","hover","_ref7","setNodesMoveable","backgroundImage","context2d","drawImage","getRect","fillStyle","fillRect","_toConsumableArray","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","globalAlpha","strokeRect","isShown","constructTooltip","populator","total","_ref8","display","setAttribute","isVisInEditMode","_this16","draftTRef","wasInDraftAlready","tiddlerTitle","findDraft","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","genUUID","defaultViewHolder","noCache","_this17","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","b","toggleClass","isFixed","isMoveable","fixed","buttonEvents","addEventListener","setGraphButtonEnabled","tmap","tiddlymap"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport DialogManager        from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n    this.dialogManager = new DialogManager(this.callbackManager, this);\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-store-position': this.handleStorePositions,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      viewNS: this.view.getConfig('edge_type_namespace'),\n      eTyFilter: eTyFilter.raw\n    };\n\n    this.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const options = {\n          namespace: this.view.getConfig('edge_type_namespace')\n        };\n        const type = new EdgeType(utils.getText(outTObj), null, options);\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) type.save();\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        if (!this.view.isEdgeTypeVisible(type.id)) {\n\n          this.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    this.dialogManager.open('welcome', {}, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      const view = $tm.misc.defaultViewLabel;\n\n      const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n      const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    this.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    // register variables\n\n    const view = this.view;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.getPaths().edgeTypeFilter,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: 'tmap-neigh-scope-button'\n                          + (view.isEnabled('neighbourhood_scope')\n                             ? ' ' + 'tmap-active-button'\n                             : '')\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const changedTiddlers = updates.changedTiddlers;\n\n    let rebuildEditorBar = false;\n    let rebuildGraph = false;\n    let reinitNetwork = false;\n    let rebuildGraphOptions = {};\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes()\n       || updates[$tm.path.options]\n       || updates[$tm.path.nodeTypes]\n       || changedTiddlers[this.view.getRoot()]) {\n\n      this.logger('warn', 'View switched (or main config change)');\n\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n\n      rebuildEditorBar = true;\n      reinitNetwork = true;\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh its components\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated && !this.ignoreNextViewModification) {\n\n        this.logger('warn', 'View components modified');\n\n        this.reloadBackgroundImage();\n        rebuildEditorBar = true;\n        rebuildGraph = true;\n        rebuildGraphOptions.resetEdgeTypeWL = true;\n\n      } else { // neither view switch or view modification\n\n        if (updates[$tm.path.nodeTypes]) {\n          rebuildGraph = true;\n\n        } else if (this.hasChangedElements(changedTiddlers)) {\n          rebuildGraph = true;\n        }\n\n      }\n    }\n\n    if (reinitNetwork) {\n      this.initAndRenderGraph(this.graphDomNode);\n      this.hidePopups(0, true);\n\n    } else if (rebuildGraph) {\n      this.rebuildGraph(rebuildGraphOptions);\n      this.hidePopups(0, true);\n    }\n\n    if (rebuildEditorBar) {\n\n      this.removeChildDomNodes();\n      this.rebuildEditorBar();\n\n    } else {\n\n      // give children a chance to update themselves\n      this.refreshChildren(changedTiddlers);\n\n    }\n\n    // reset this again\n    this.ignoreNextViewModification = false;\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n      // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n      // see https://github.com/almende/vis/issues/939\n      this.network.stabilize();\n\n      this.resetFocus = resetFocus;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n      return !!matches.length;\n\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const zoomView = !!(ev.ctrlKey || this.isInSidebar || this.enlargedMode);\n\n    if (zoomView) {\n      ev.preventDefault();\n    }\n\n    if (zoomView !== this.visOptions.interaction.zoomView) {\n\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      this.visOptions.interaction.zoomView = zoomView;\n      this.network.setOptions({ interaction: { zoomView }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.tooltip.hide(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    this.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n      const view = new ViewAbstraction(label);\n\n      if (view.exists()) {\n        $tm.notify('Forbidden! View already exists!');\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count : references.length.toString(),\n      filter : utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    this.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getText(outTObj);\n      const view = new ViewAbstraction(label);\n\n      if (!label) {\n        $tm.notify('Invalid name!');\n\n      } else if (view.exists()) {\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n        this.view.rename(label);\n        this.setView(this.view);\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    this.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.handleStorePositions();\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    this.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n      $tm.notify('Forbidden!');\n      return;\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count : references.length.toString(),\n        filter : utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      this.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * This action represents a direct graph manipulation by the user,\n   * which means it will prevent a graph fitting (viewport adjusting)\n   * in the course of the next rebuild.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    this.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      } else {\n\n        for (let i = nodeIds.length; i--;) {\n          const success = this.view.removeNode(nodeIds[i]);\n          if (success) {\n            deletionCount++;\n          }\n        }\n\n      }\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  handleStorePositions(withNotify) {\n\n    const data = this.view.getNodeData();\n    const positions = this.network.getPositions();\n\n    for (let id in positions) {\n\n      data[id] = data[id] || {};\n      data[id].x = positions[id].x;\n      data[id].y = positions[id].y;\n\n    }\n\n    this.view.saveNodeData(data);\n    this.ignoreNextViewModification = true;\n\n    if (withNotify) {\n      $tm.notify('positions stored');\n    }\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (!nodes[id].x) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    window.clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) return;\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = window.setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    this.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n\n      }\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    this.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode\n         || !utils.isTrue($tm.config.sys.singleClickMode)) {\n        this.handleOpenMapElementEvent(properties);\n      }\n\n\n    } else { // = clicked on an empty spot\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    this.contextMenu.hide(0, true);\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  handleVisBeforeDrawing(context2d) {\n\n    if (this.backgroundImage) {\n      //utils.drawRaster(context2d, this.network.getScale(), this.network.getViewPosition());\n      context2d.drawImage(this.backgroundImage, 0, 0);\n    }\n\n  }\n\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      // fill\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      // stroke\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n\n    }\n\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id)\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      this.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    view = new ViewAbstraction(view);\n\n    if (!view.exists()) {\n      return;\n    }\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const text = utils.getText(viewHolderRef);\n    let view = new ViewAbstraction(text);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    if (!view.exists()) {\n      this.logger('debug', `Warning: View \"${text}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) {\n        $tm.notify(msg);\n      }\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    //~ this.network.storePositions();\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.handleStorePositions();\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}