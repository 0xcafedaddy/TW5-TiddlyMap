{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["_CallbackManager","require","_ViewAbstraction","_EdgeType","_Popup","_vis","_widget","_utils","_SelectionRectangle","_environment","env","MapWidget","parseTreeNode","options","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAttr","getAttribute","isDebug","_utils2","default","isTrue","$tm","config","sys","debug","bindTo","callbackManager","_CallbackManager2","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","contextmenu","handleContextMenu","widgetDomListeners","handleWidgetKeyup","repaintGraph","handleWidgetKeydown","conVector","from","to","edge","callback","_this2","eTyFilter","param","fromLabel","adapter","label","toLabel","selectNodeById","viewNS","view","getConfig","dialogManager","open","isConfirmed","outTObj","namespace","type","_EdgeType2","getText","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","getLabel","pretty","getEdgeTypeFilter","ref","setEntry","sysMeta","tiddlerExists","setText","touch","defaultViewLabel","n2","insertNode","x","y","n1","message","getEntry","args","Array","prototype","slice","arguments","unshift","misc","logger","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","appendChild","graphDomNode","isPreviewed","isTiddlyWikiFakeDom","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","widget","setDomListeners","addLoadingBar","tooltip","_Popup2","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","getFirstElementByClassName","sidebar","contains","rebuildEditorBar","initAndRenderGraph","registry","push","reloadRefreshTriggers","checkForFreshInstall","mainEditorId","url","query","toggleEnlargedMode","isInSidebar","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","activeUnicodeBtnClass","rasterMenuBtnClass","name","setVariable","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","renderChildren","firstChild","updates","network","isZombieWidget","refresh","changedTiddlers","isViewSwitched","hasChangedAttributes","isViewUpdated","update","reloadBackgroundImage","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","hide","isForce","remove","refreshTriggers","str","parseStringArray","i","add","handleTriggeredRefresh","_ref","length","undefined","hidePopups","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","solver","centralGravity","setOptions","visOptions","graphData","stabilize","start","graph","getGraph","refreshDataSet","nodes","changedEdges","edges","nodesById","edgesById","getTiddlersByIds","stop","localHolders","keys","maybeMatches","inGraph","setField","isShowNeighbourhood","tRef","isSystemOrDraft","startsWith","modified","nodeFilter","getNodeFilter","matches","getMatches","_this3","_destructVis","getVisOptions","_vis2","DataSet","makeHashMap","enabled","canvas","getElementsByTagName","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","ev","_this4","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","ucFirst","role","handleConnectionEvent","openTiddlerWithId","getSelection","paramObject","elements","handleRemoveElements","selectRect","selectedNodes","stopPropagation","target","mouse","DOMtoCanvas","offsetX","offsetY","span","nodePositions","getPositions","inArray","assignActiveStyle","zoomView","enlargedMode","interaction","nodeId","getNodeAt","show","div","mode","registerTransclude","_this5","contextMenuWidget","render","focusButtonStateTRef","deleteByPrefix","focus","isLiveView","clipBoard","ids","get","returnType","globalOptions","vis","localOptions","parseJSON","merge","manipulation","deleteNode","data","_this6","resetVisManipulationBar","addEdge","addNode","handleInsertNode","handleEditNode","editEdge","stabilization","iterations","visCallback","enableEditMode","getElementsByClassName","_this7","getField","isClone","deleteEdge","isCreate","protoView","isLocked","references","getOccurrences","count","toString","disableEditMode","_ViewAbstraction2","_this8","rename","setView","_this9","visInherited","JSON","stringify","preselects","filter.prettyNodeFltr","vis-inherited","createdOn","getCreationDate","numberOfNodes","numberOfEdges","extend","viewConfig","getPropertiesByPrefix","fields","prvBg","setConfig","saveNodePositions","curBg","nf","_this10","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","dialog","snapshot","width","height","action","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","eTf","text","setNodeFilter","stripPreamble","toDataURL","getWithoutPrefix","refFilter","joinAndWrap","openStandardConfirmDialog","_this11","destroy","msg","viewname","trigger","curTiddler","getTiddler","liveTab","fallbackView","_ref2","handleRemoveNodes","handleRemoveEdges","deleteEdges","edgeIds","_this12","tiddlers","params","stringifyList","delete-from","deletionCount","success","removeNode","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","_ref3","setCentralTopic","properties","idsOfNodesWithoutPosition","fitGraph","_ref4","scale","animation","getContainer","_this13","window","clearTimeout","activeFitTimeout","fit","redraw","setNodesMoveable","easingFunction","setTimeout","node","_this14","isMatch","makeNode","tObj","draft.title","_this15","tracker","getTiddlerById","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","getNodeData","nodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","globalDefaults","inherited-local-default-style","inherited-group-styles","global.tmap.style","local-node-style","addToPreselects","scope","store","global","p","local","singleClickMode","isActivated","handleOpenMapElementEvent","pointer","_ref5","handleEditEdgeType","typeId","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","calculatedHeight","top","style","evt","selected","_ref6","isArray","defaultColor","colorObj","highlight","hover","_ref7","pos","_extends","parseInt","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","globalAlpha","fillStyle","fillRect","apply","_toConsumableArray","beginPath","strokeStyle","strokeRect","rPos","getNearestRasterPosition","moveTo","lineTo","stroke","arc","Math","PI","fill","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isShown","constructTooltip","populator","total","_ref8","display","setAttribute","buttons","isVisInEditMode","_this16","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","bounds","right","bottom","viewName","holderRef","viewRef","genUUID","defaultViewHolder","noCache","_this17","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","setGraphButtonEnabled","tiddlymap"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      viewNS: this.view.getConfig('edge_type_namespace'),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const options = {\n          namespace: this.view.getConfig('edge_type_namespace')\n        };\n        const type = new EdgeType(utils.getText(outTObj), null, options);\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type.id)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    $tm.dialogManager.open('welcome', {}, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      const view = $tm.misc.defaultViewLabel;\n\n      const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n      const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers) // use changed view\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n      this.rebuildEditorBar();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n\n        this.rebuildEditorBar();\n        this.reloadBackgroundImage();\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n\n      if (!this.isPreventZoomOnNextUpdate) {\n\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      this.isPreventZoomOnNextUpdate = false;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const zoomView = !!(ev.ctrlKey || this.isInSidebar || this.enlargedMode);\n\n    if (zoomView) {\n      ev.preventDefault();\n    }\n\n    if (zoomView !== this.visOptions.interaction.zoomView) {\n\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      this.visOptions.interaction.zoomView = zoomView;\n      this.network.setOptions({ interaction: { zoomView }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.tooltip.hide(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    window.clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = window.setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n\n        this.handleOpenMapElementEvent(properties);\n\n      }\n\n\n    } else { // = clicked on an empty spot\n\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    this.contextMenu.hide(0, true);\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n\n      if (nodes.length === 1) {\n        this.draggedNode = nodes[0];\n      }\n\n    }\n\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) {\n        $tm.notify(msg);\n      }\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}