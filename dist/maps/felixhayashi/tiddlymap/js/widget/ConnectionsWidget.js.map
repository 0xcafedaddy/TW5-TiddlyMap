{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/ConnectionsWidget.js"],"names":["_widget","require","_utils","EdgeListWidget","parseTreeNode","options","widget","call","this","prototype","Object","create","render","parent","nextSibling","parentDomNode","execute","renderChildren","computeAttributes","nodes","getVariable","filter","getAttribute","direction","_utils2","default","allETy","typeWL","$tm","matches","adapter","getNeighbours","neighbours","neighbourhood","edges","entries","id","neighbour","edge","to","from","type","children","length","getEmptyMessage","wasEmpty","makeChildWidgets","parser","wiki","parseText","parseAsInline","tree","refresh","changedTiddlers","changedAttributes","hasChangedAttributes","keys","refreshSelf","tRef","isSystemOrDraft","refreshChildren","EdgeListItemWidget","arrows","misc","item","tracker","getTiddlerById","flatten","p","setVariable","indeces","indexedAs","biArrow","arrow","invertedArrow","bi","in","exports"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/ConnectionsWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/connections\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * @constructor\n */\nfunction EdgeListWidget(parseTreeNode,options) {\n\n  // call the parent constructor\n  Widget.call(this, parseTreeNode, options);\n\n}\n\n// !! EXTENSION !!\nEdgeListWidget.prototype = Object.create(Widget.prototype);\n// !! EXTENSION !!\n\nEdgeListWidget.prototype.render = function(parent,nextSibling) {\n\n  this.parentDomNode = parent;\n  this.computeAttributes();\n  this.execute();\n  this.renderChildren(parent,nextSibling);\n\n};\n\nEdgeListWidget.prototype.execute = function() {\n\n  var nodes = [ this.getVariable('currentTiddler') ];\n  var filter = this.getAttribute('filter', '');\n  var direction = this.getAttribute('direction', 'both');\n  var allETy = $tm.indeces.allETy;\n\n  var matches = utils.getEdgeTypeMatches(filter, allETy);\n\n  var options = {\n    typeWL: utils.getLookupTable(matches),\n    direction: direction\n  };\n\n  var neighbourhood = $tm.adapter.getNeighbours(nodes, options);\n\n  // retrieve nodes and edges\n  var neighbours = neighbourhood.nodes;\n  var edges = neighbourhood.edges;\n\n  var entries = [];\n  for (var id in edges) {\n\n    var edge = edges[id];\n    var neighbour = neighbours[edge.to] || neighbours[edge.from];\n\n    if (!neighbour) continue; // obsolete edge from old times;\n\n    // make item template\n    entries.push({\n      type: 'tmap-edgelistitem',\n      edge: edge,\n      typeWL: options.typeWL,\n      neighbour: neighbour,\n      // the children of this widget (=what is wrapped inside the\n      // widget-element's body) is used as template for the list items\n      children: this.parseTreeNode.children\n    });\n  }\n\n  if (!entries.length) {\n    this.wasEmpty = true;\n    entries = this.getEmptyMessage();\n  } else if (this.wasEmpty) {\n    // we need to remove the empty message\n    this.removeChildDomNodes();\n  }\n\n  this.makeChildWidgets(entries);\n\n};\n\nEdgeListWidget.prototype.getEmptyMessage = function() {\n\n  var parser = this.wiki.parseText(\n                  'text/vnd.tiddlywiki',\n                  this.getAttribute('emptyMessage', ''),\n                  {parseAsInline: true});\n\n  return parser ? parser.tree : [];\n\n};\n\nEdgeListWidget.prototype.refresh = function(changedTiddlers) {\n\n  var changedAttributes = this.computeAttributes();\n  var hasChangedAttributes = Object.keys(changedAttributes).length;\n  if (hasChangedAttributes) {\n    this.refreshSelf();\n    return true;\n  }\n\n  for (var tRef in changedTiddlers) {\n\n    if (!utils.isSystemOrDraft(tRef)) {\n      this.refreshSelf();\n      return true;\n    }\n  }\n\n  // let children decide for themselves\n  return this.refreshChildren(changedTiddlers);\n\n};\n\n/**\n * @constructor\n */\nfunction EdgeListItemWidget(parseTreeNode, options) {\n\n  Widget.call(this, parseTreeNode, options);\n\n  this.arrows = $tm.misc.arrows;\n\n}\n\n// !! EXTENSION !!\nEdgeListItemWidget.prototype = Object.create(Widget.prototype);\n// !! EXTENSION !!\n\nEdgeListItemWidget.prototype.execute = function() {\n\n  var item = this.parseTreeNode;\n  var tRef = $tm.tracker.getTiddlerById(item.neighbour.id);\n\n  // make edge properties available as variables\n  var edge = utils.flatten(item.edge);\n  for (var p in edge) {\n\n    if (typeof edge[p] === 'string') {\n\n      this.setVariable('edge.' + p, edge[p]);\n    }\n  }\n\n  // Perspective: Neighbour\n  this.setVariable('currentTiddler', tRef);\n  this.setVariable('neighbour', tRef);\n\n  var type = $tm.indeces.allETy[edge.type];\n\n  var indexedAs = (edge.to === item.neighbour.id ? 'to' : 'from');\n  var arrow = indexedAs;\n\n  if (type.biArrow) {\n    arrow = 'bi';\n  } else {\n    if (indexedAs === 'to' && type.invertedArrow) {\n      arrow = 'from';\n    } else if (indexedAs === 'from' && type.invertedArrow) {\n      arrow = 'to';\n    }\n  }\n\n  this.setVariable('direction', arrow);\n  this.setVariable('directionSymbol', arrow === 'bi'\n                                      ? this.arrows.bi\n                                      : arrow === 'from'\n                                        ? this.arrows.in\n                                        : this.arrows.out);\n\n  // Construct the child widgets\n  this.makeChildWidgets();\n\n};\n\nEdgeListItemWidget.prototype.refresh = function(changedTiddlers) {\n\n  return this.refreshChildren(changedTiddlers);\n\n};\n\n\n/*** Exports *******************************************************/\n\nexports['tmap-edgelistitem'] = EdgeListItemWidget;\nexports['tmap-connections'] = EdgeListWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}