{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Listener.js"],"names":["_NodeType","require","_EdgeType","_Edge","_utils","_vis","handleCancelDialog","_ref","param","_utils2","default","setField","handleClearTiddler","_ref2","arguments","length","undefined","paramObject","title","keep","tObj","originalFields","fields","fieldsToKeep","split","cloneFields","text","i","fieldName","$tw","wiki","deleteTiddler","addTiddler","Tiddler","_ref3$paramObject","_ref3","output","tiddlersStringArray","utils","parseStringArray","getMergedTiddlers","tiddlers","handleConfirmDialog","_ref4","handleSuppressDialog","_ref5","dialog","suppress","isTrue","$tm","ref","sysUserConf","_ref6","view","graph","adapter","getGraph","nodes","convert","edges","tRef","JSON","stringify","rootWidget","dispatchEvent","type","filename","handleConfigureSystem","allTiddlers","getMatches","selector","allPotentialNodes","allEdges","getEdgesForSet","plugin","getTiddler","path","pluginRoot","meta","getTiddlerData","sysMeta","hasLiveTab","liveTab","hasTag","handleDownloadGraph","numberOfNodes","numberOfEdges","Object","keys","pluginVersion","version","dataStructureVersion","dataStructureState","vis-inherited","_vis2","getText","visUserConf","config.sys","config","sys","open","args","isConfirmed","outTObj","getPropertiesByPrefix","setTiddlerData","handleGenerateWidget","_ref7","_ref7$paramObject","options","preselects","var.view","misc","defaultViewLabel","dialogManager","handleRemoveEdge","deleteEdge","handleCreateEdge","_ref9","from","to","isForce","force","tiddlerExists","makeNode","id","label","insertEdge","edge","notify","handleOpenTypeManager","_ref10","_ref10$paramObject","mode","match","allTypesSelector","allEdgeTypes","topic","allNodeTypes","typeRootPath","nodeTypes","searchSelector","handleLoadTypeForm","dialogTObj","_ref11","_EdgeType2","_NodeType2","save","outTRef","count","usage","fullPath","isShipped","vis","deleteByPrefix","_ref12","deleteType","saveType","logger","_processEdgesWithType","action","removeNodeType","getTiddlerRef","dialogOutput","loadFromTiddler","newId","newType","_ref13","load","name","platforms","after","before","synchronous","startup","handleCreateType","tmap:tm-remove-edge","tmap:tm-load-type-form","tmap:tm-save-type-form","handleSaveTypeForm","tmap:tm-create-type","tmap:tm-create-edge","tmap:tm-generate-widget","tmap:tm-clear-tiddler","tmap:tm-merge-tiddlers","handleMixTiddlers","tmap:tm-confirm-dialog"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Listener.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/listener\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport NodeType from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport visDefConf from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\n\n/*** Code **********************************************************/\n\n/**\n * @param {Object} param - event.param\n */\nconst handleCancelDialog = ({param}) => {\n  utils.setField(param, 'text', '');\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleClearTiddler = ({paramObject} = {})  => {\n\n  const {title, keep} = paramObject;\n\n  if (!title) return;\n\n  const tObj = utils.getTiddler(title);\n  const originalFields = tObj ? tObj.fields : {};\n  const fieldsToKeep = keep ? keep.split() : [];\n  const cloneFields = {\n    title,\n    text: '' // see https://github.com/Jermolene/TiddlyWiki5/issues/2025\n  };\n\n  for (let i = fieldsToKeep.length; i--;) {\n    const fieldName = fieldsToKeep[i];\n    cloneFields[fieldName] = originalFields[fieldName];\n  }\n\n  $tw.wiki.deleteTiddler(title);\n  $tw.wiki.addTiddler(new $tw.Tiddler(cloneFields));\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleMixTiddlers = ({paramObject = {}}) => {\n\n  const {tiddlers: tiddlersStringArray, output} = paramObject;\n\n  if (!tiddlersStringArray || !output) return;\n\n  const tiddlers = $tw.utils.parseStringArray(tiddlersStringArray);\n  const tObj = utils.getMergedTiddlers(tiddlers, output);\n\n  $tw.wiki.addTiddler(tObj);\n\n};\n\n/**\n * @param {string} param - event.param\n */\nconst handleConfirmDialog = ({param}) => {\n\n  utils.setField(param, 'text', '1');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSuppressDialog = ({paramObject}) => {\n\n  const {dialog, suppress} = paramObject;\n\n  if (utils.isTrue(suppress, false)) {\n    utils.setEntry($tm.ref.sysUserConf, `suppressedDialogs.${dialog}`, true);\n  }\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleDownloadGraph = ({paramObject}) => {\n\n  const { view } = paramObject;\n  const graph = $tm.adapter.getGraph({ view });\n\n  graph.nodes = utils.convert(graph.nodes, 'array');\n  graph.edges = utils.convert(graph.edges, 'array');\n\n  const tRef = '$:/temp/tmap/export';\n\n  utils.setField(tRef, 'text', JSON.stringify(graph, null, 2));\n\n  $tw.rootWidget.dispatchEvent({\n    type: 'tm-download-file',\n    param: tRef,\n    paramObject: {\n      filename: `${view}.json`\n    }\n  });\n};\n\n/**\n *\n */\nconst handleConfigureSystem = () => {\n\n  const allTiddlers = utils.getMatches($tm.selector.allPotentialNodes);\n  const allEdges = $tm.adapter.getEdgesForSet(allTiddlers);\n  const plugin = $tw.wiki.getTiddler($tm.path.pluginRoot).fields;\n  const meta = $tw.wiki.getTiddlerData($tm.ref.sysMeta);\n  const hasLiveTab = utils.getTiddler($tm.ref.liveTab).hasTag('$:/tags/SideBar');\n\n  const args = {\n    numberOfNodes: '' + allTiddlers.length,\n    numberOfEdges: '' + Object.keys(allEdges).length,\n    pluginVersion: `v${plugin.version}`,\n    dataStructureVersion: `v${meta.dataStructureState}`,\n    dialog: {\n      preselects: {\n        'liveTab': '' + hasLiveTab,\n        'vis-inherited': JSON.stringify(visDefConf),\n        'config.vis': utils.getText($tm.ref.visUserConf),\n        'config.sys': $tm.config.sys,\n      }\n    }\n  };\n\n  $tm.dialogManager.open('globalConfig', args, (isConfirmed, outTObj) => {\n\n    if (!isConfirmed) return;\n\n    const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.sys.', true);\n\n    // CAREFUL: this is a data tiddler!\n    $tw.wiki.setTiddlerData($tm.ref.sysUserConf, config);\n\n    // show or hide the live tab; to hide the live tab, we override\n    // the shadow tiddler; to show it, we remove the overlay again.\n    if (utils.isTrue(outTObj.fields.liveTab, false)) {\n      utils.setField($tm.ref.liveTab, 'tags', '$:/tags/SideBar');\n    } else {\n      $tw.wiki.deleteTiddler($tm.ref.liveTab);\n    }\n\n    // tw doesn't translate the json to an object so this is already a string\n    utils.setField($tm.ref.visUserConf, 'text', outTObj.fields['config.vis']);\n\n  });\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleGenerateWidget = ({paramObject = {}}) => {\n\n  const options = {\n    dialog: {\n      preselects: {\n        'var.view': (paramObject.view || $tm.misc.defaultViewLabel)\n      }\n    }\n  };\n\n  $tm.dialogManager.open('widgetCodeGenerator', options);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleRemoveEdge = ({paramObject}) => {\n\n  $tm.adapter.deleteEdge(paramObject);\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleCreateEdge = ({paramObject}) => {\n\n  const {from, to, force: isForce} = paramObject;\n\n  if (!from || !to) return;\n\n  if ((utils.tiddlerExists(from) && utils.tiddlerExists(to)) || isForce) {\n\n    // will not override any existing tiddlers…\n    utils.addTiddler(to);\n    utils.addTiddler(from);\n\n    const edge = new Edge(\n      $tm.adapter.makeNode(from).id,\n      $tm.adapter.makeNode(to).id,\n      paramObject.label,\n      paramObject.id\n    );\n\n    $tm.adapter.insertEdge(edge);\n    $tm.notify('Edge inserted');\n\n  }\n\n};\n\n/**\n * @param {string} type - event.type\n * @param {Object} [paramObject] - event.paramObject\n */\nconst handleOpenTypeManager = ({type, paramObject = {}}) => {\n\n  // either 'manage-edge-types' or 'manage-node-types'\n  const mode = type.match(/tmap:tm-(.*)/)[1];\n\n  if (mode === 'manage-edge-types') {\n    var topic = 'Edge-Type Manager';\n    var allTypesSelector = $tm.selector.allEdgeTypes;\n    var typeRootPath = $tm.path.edgeTypes;\n  } else {\n    var topic = 'Node-Type Manager';\n    var allTypesSelector = $tm.selector.allNodeTypes;\n    var typeRootPath = $tm.path.nodeTypes;\n  }\n\n  const args = {\n    mode: mode,\n    topic: topic,\n    searchSelector: allTypesSelector,\n    typeRootPath: typeRootPath\n  };\n\n  const dialogTObj = $tm.dialogManager.open('MapElementTypeManager', args);\n\n  if (paramObject.type) {\n    handleLoadTypeForm({\n      paramObject: {\n        mode: mode,\n        id: paramObject.type,\n        output: dialogTObj.fields['output']\n      }\n    });\n  }\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleLoadTypeForm = ({paramObject}) => {\n\n  const outTRef = paramObject.output;\n\n  const type = (paramObject.mode === 'manage-edge-types'\n    ? new EdgeType(paramObject.id)\n    : new NodeType(paramObject.id));\n\n  // inject all the type data as fields into the dialog output\n  type.save(outTRef);\n\n  // fields that need preprocessing\n\n  if (paramObject.mode === 'manage-edge-types') {\n    const usage = $tm.adapter.selectEdgesByType(type);\n    const count = Object.keys(usage).length;\n    utils.setField(outTRef, 'temp.usageCount', count);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler(\n    utils.getTiddler(outTRef),\n    {\n      'typeTRef': type.fullPath,\n      'temp.idImmutable': (type.isShipped ? 'true' : ''),\n      'temp.newId': type.id,\n      'vis-inherited': JSON.stringify($tm.config.vis)\n    }\n  ));\n\n  // reset the tabs to default\n  utils.deleteByPrefix('$:/state/tabs/MapElementTypeManager');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleSaveTypeForm = ({paramObject}) => {\n\n  const tObj = utils.getTiddler(paramObject.output);\n  if (!tObj) return;\n\n  const id = tObj.fields.id;\n  const mode = paramObject.mode;\n  const type = (mode === 'manage-edge-types' ? new EdgeType(id) : new NodeType(id));\n\n  if (utils.isTrue(tObj.fields['temp.deleteType'], false)) {\n    deleteType(mode, type, tObj);\n  } else {\n    saveType(mode, type, tObj);\n  }\n\n};\n\nconst deleteType = (mode, type, dialogOutput) => {\n\n  $tm.logger('debug', 'Deleting type', type);\n\n  if (mode === 'manage-edge-types') {\n    $tm.adapter._processEdgesWithType(type, {action: 'delete'});\n  } else {\n    $tm.adapter.removeNodeType(type);\n  }\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title: utils.getTiddlerRef(dialogOutput)\n  }));\n\n  $tm.notify('Deleted type');\n\n};\n\nconst saveType = (mode, type, dialogOutput) => {\n\n  const tObj = utils.getTiddler(dialogOutput);\n\n  // update the type with the form data\n  type.loadFromTiddler(tObj);\n  type.save();\n\n  const newId = tObj.fields['temp.newId'];\n\n  if (newId && newId !== tObj.fields['id']) { //renamed\n\n    if (mode === 'manage-edge-types') {\n\n      $tm.adapter._processEdgesWithType(type, {\n        action: 'rename',\n        newName: newId\n      });\n\n    } else {\n\n      const newType = new NodeType(newId);\n      newType.load(type);\n      newType.save();\n      $tw.wiki.deleteTiddler(type.fullPath);\n\n    }\n\n    utils.setField(tObj, 'id', newId);\n\n  }\n\n  $tm.notify('Saved type data');\n\n};\n\n/**\n * @param {Object} paramObject - event.paramObject\n */\nconst handleCreateType = ({paramObject}) => {\n\n  const id = paramObject.id || 'New type';\n  const type = (paramObject.mode === 'manage-edge-types'\n    ? new EdgeType(id)\n    : new NodeType(id));\n  type.save();\n\n  handleLoadTypeForm({\n    paramObject: {\n      id: type.id,\n      mode: paramObject.mode,\n      output: paramObject.output\n    }\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.listener';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'rootwidget', 'tmap.caretaker' ];\nexport const before = [ 'story' ];\nexport const synchronous = true;\nexport const startup = () => {\n  utils.addTWlisteners({\n    'tmap:tm-remove-edge': handleRemoveEdge,\n    'tmap:tm-load-type-form': handleLoadTypeForm,\n    'tmap:tm-save-type-form': handleSaveTypeForm,\n    'tmap:tm-create-type': handleCreateType,\n    'tmap:tm-create-edge': handleCreateEdge,\n    'tmap:tm-suppress-dialog': handleSuppressDialog,\n    'tmap:tm-generate-widget': handleGenerateWidget,\n    'tmap:tm-download-graph': handleDownloadGraph,\n    'tmap:tm-configure-system': handleConfigureSystem,\n    'tmap:tm-manage-edge-types': handleOpenTypeManager,\n    'tmap:tm-manage-node-types': handleOpenTypeManager,\n    'tmap:tm-cancel-dialog': handleCancelDialog,\n    'tmap:tm-clear-tiddler': handleClearTiddler,\n    'tmap:tm-merge-tiddlers': handleMixTiddlers,\n    'tmap:tm-confirm-dialog': handleConfirmDialog\n  }, $tw.rootWidget, this);\n};\n"],"sourceRoot":"../../../../../../src/plugins"}