{"version":3,"sources":["felixhayashi/tiddlymap/js/lib/utils/wiki.js"],"names":["_exception","require","_basic","basicUtils","getTiddlerRef","tiddler","$tw","Tiddler","fields","title","InvalidArgumentException","getTiddler","wiki","arguments","length","undefined","tObj","defValue","field","tRef","Boolean","tiddlerExists","isShadowTiddler","setSidebarTab","setText","getTiddlersByPrefix","mainEditor","setField","value","text","deleteTiddlers","tiddlers","keys","Object","storyList","getTiddlerList","i","index","indexOf","splice","deleteTiddler","moveFieldValues","oldName","newName","isRemoveOldField","isIncludeSystemTiddlers","allTitles","allTiddlers","isSystemTiddler","addTiddler","type","isForceBase64","imgTObj","encoding","contentTypeInfo","body","config","hasSubString","replace","window","btoa","getMatches","filter","source","compileFilter","_typeof","Array","callback","call","isMatch","children","isBlock","attributes","class","getElementNode","className","registerTransclude","widget","name","removeArrayElement","makeChildWidget","getTranscludeNode","push","message","notifyTiddlerRef","notifier","display","getVariable","cls","getAncestorWithClass","parentDomNode","parseFieldData","data","parseJSON","writeFieldData","indent","parseInt","JSON","stringify","clone","src","dest","setEntry","prop","getEntry","getTiddlerData","isLeftVersionGreater","v1","v2","utils","checkVersions","getText","getField","isDraft","isSystemOrDraft","getMergedTiddlers","getModificationFields","getCreationFields","child","bind","apply","getChildWidgetByProperty","val","addTWlisteners","listeners","context","id","addEventListener","targets","newPrefix","isForce","isDelete","oldPrefix","fromToMapper","oldTRef","newTRef","makeHashMap","mv","deleteByPrefix","prefix","deletedTiddlers","startsWith","fieldName","options","isIncludeDrafts","result","hasOwnProp","hop","limit","getTiddlerWithField","getTiddlersWithField","removePrefix","iterator","getWithoutPrefix","touch","Date"],"mappings":"kkCAaA,IAAAA,YAAAC,QAAA,iDAIA,IAAAC,QAAAD,QAAA,2DAAYE;;;;;;;;;;AAQL,GAAMC,eAAAA,QAAAA,cAAgB,QAAhBA,GAAgBC,GAE3B,GAAIA,YAAmBC,KAAIC,QAAS,CAElC,MAAOF,GAAQG,OAAOC,UAEjB,UAAWJ,KAAY,SAAU,CAEtC,MAAOA,OAEF,CAEL,KAAM,IAAAL,YAAAU,yBAA6BL,IAehC,IAAMM,YAAAA,QAAAA,WAAa,QAAbA,GAAaN,GAAA,MACxBC,KAAIM,KAAKD,WAAWN,YAAmBC,KAAIC,QAAUF,EAAQG,OAAOC,MAAQJ,GADpD,IACpBO,UAAAA,QAAAA,SAAKD,QAALC,GAAKD,EAAWN,GAAA,GAAAA,GAAAQ,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAuBN,EAS3C,IAAMS,GAAOL,WAAWN,EAP1B,QAAAW,EAAAC,EAAAD,EAAAR,OAAAU,IAAAD,EAQE,IAASD,eAAAA,QAAAA,cAAkBA,QAAlBA,GAAkBA,GAY3B,IAAKX,EAAS,CARhB,MAAA,OAYE,GAAMc,GAAOf,cAAcC,EAE3B,OAAOe,SAAQD,IAASb,IAAIM,KAAKS,cAAcF,IAASb,IAAIM,KAAKU,gBAAgBH,KAL/E,IAAOI,eAAAA,QAAAA,cAAP,QAAOA,GAAPJ,GAWFK,QAAQC,oBAAoB,yBAAyB,GAAIC,YAmBpD,IAAMC,UAAAA,QAAAA,SAAW,QAAXA,GAAYtB,EAASa,EAAOU,GAEvC,IAAKvB,IAAYa,EAAO,CACtB,OAGF,GAAMC,GAAOf,cAAcC,EAJ3B,IAAKA,GAAAA,iBACHI,MAAAU,GACDD,EAAAU,EAICnB,IAAAA,GAAOU,IAAAA,KAAAA,WAAAA,EAAAA,KAOT,IAAID,IAAU,QAAUF,IAASA,EAAKR,OAAOqB,KAAM,CAHnDrB,EAAAqB,KAAA,GAGAb,EAAIE,GAAAA,KAAUX,QAAVS,EAAAR,EACFA,KAAAA,KAAOqB,WAAPb,EAMF,OAAOA,GAYF,IAAMc,gBAAAA,QAAAA,eAAiB,QAAjBA,GAAiBC,GAE5B,GAAMC,GAAOC,OAAOD,KAAKD,EAFpB,IAAMD,GAAAA,IAAAA,KAAAA,eAAAA,eAEX,KAAME,GAAAA,GAAOC,EAAOD,OAAKD,KAAzB,CACA,GAAMG,GAAAA,cAAqBC,EAAAA,EAAeC,IAIxC,KAAK9B,IAAIM,KAAKS,cAAcU,EAASC,EAAKI,KAAM,CAAhD,SAGE,GAAAC,GAAAH,EAAAI,QAAAnB,EACD,IAAAkB,KAAA,EAAA,CAICH,EAAUK,OAAOF,EAAO,EAF1BV,UAAMU,eAAkBC,OAAxBJ,GASA5B,IAAIM,KAAK4B,cAAcrB,IAtBpB,IAAAsB,iBAAAA,QAAAA,gBAAA,QAAAA,GAAAC,EAAAC,EAAAC,EAAAC,EAAAd,GA4BA,GAAMU,IAAAA,EAAAA,MAEX,IAAIC,GAAYC,GAASrC,IAAAM,KAAAkC,WAEzB,KAAMC,GAAAA,GAAAA,EAAchB,OAAYzB,KAASwC,CAEzC,GAAK9B,GAAQ+B,WAAYjC,EAAzBsB,GAEE,IAAMpB,EAAAA,YAAkB+B,EAAAA,OAAAL,GAAxB,CAGE,SACD,IAAAG,GAAAvC,IAAAM,KAAAoC,gBAAAD,EAAAX,IAAA,CAGC,SACD,GAAA5B,GAAAA,mBAGEmC,EAAU3B,EAAKR,OAAOkC,GAGzB,IAAIE,EAAkB,CACpBpC,EAAOkC,GAAW3B,UAEpBT,IAAIM,KAAKqC,WAAW,GAAI3C,KAAIC,QAAQS,EAAMR,KAQ5C0C,IAAOA,YAAAA,QAAAA,WAAgB1C,QAAhB0C,GAAgB1C,EAAhB0C,EAA+BC,GAEtCD,EAAME,GAAUzC,EAAAA,OAAWN,MAA3B,eAEA,IAAIgD,GAAW/C,WAAWgD,EAD1B,IAAIC,GAAOH,EAAQ5C,OAAOqB,IAG1B,IAAIqB,GAAS5C,IAAAkD,OAAAF,gBAAiBJ,GAAAG,QAE5B,IAAAH,IAAA,gBAAA,CAGAK,EAAKpD,EAAAA,QAAWsD,YAAa,IAE3BF,KAAAA,WAAYG,aAAL,QAAqBH,GAAA,CAG/BA,EAAAA,EAAAG,QAAA,OAAA,4CAKA,GAAAP,GAAAE,IAAA,SAAA,CAFCA,EAAW,QAIbE,GAAAI,OAAAC,KAAAL,GAKF,MAAA,QAAAL,EAAA,IAAAG,EAAA,IAAAE,EAmBE,IAAAM,YAAAA,QAAAA,WAAA,QAAAA,GAAAC,EAAA/B,GAGA,GAAIgC,GAAOD,SAFX,IAAMlD,GAAON,IAAIM,IAOjB,UAAImB,KAAA,SAA2BA,CAJ7B+B,EAASlD,EAAKoD,cAAcF,GAI9B,GAAI/B,GAAY,aAAeA,KAAP,YAAA,YAAAkC,QAAOlC,MAAa,SAAU,CAOlD,IAAAmC,MAAS9B,QAAIL,GAAb,CACEA,EAAMf,OAAYL,KAAAA,GAGrBoD,EALD,QAAAA,GAAAI,GAOD,IAAA,GAAA/B,GAAAL,EAAAjB,OAAAsB,KAAA,CALK,GAAMpB,GAAOJ,EAAKD,WAAWoB,EAASK,GAO5C+B,GAAcC,EAAKxD,EAAMmD,MAAzB,MAAOD,GAAOM,KAAKxD,EAAMmD,GAYpB,IAAMM,SAAAA,QAAAA,QAAU,QAAVA,GAAWhE,EAASyD,GAAV,MACrB1D,eAAcC,KAAawD,WAAWC,GAAU1D,cAAcC,KAAY,GAexEiE,IAAAA,mBAAAA,QAAAA,kBAND,QAMCA,GANDjE,EAAAkE,GAAA,OAD8BrB,KAAA,aAA1BsB,YAIDnE,SAON6C,KAAA,SALQtB,MAAOxB,cAAcC,KACzBiE,YACAC,UAAWA,GAaXD,IAAAA,gBAAAA,QAAAA,eAAU,QAAVA,GAAUjE,GAAA,OANP6C,KAAA,UAGHsB,YAMJnE,SAJQ6C,KAAM,SAAUtB,MAAOxB,cAAcC,KACzCiE,aAcEG,IAAOC,gBAAAA,QAAAA,eAAA,QAAAA,GAAAxB,EAAAyB,EAAA9C,GAAA,OAELD,KAAAA,UACJ0C,IAAAA,EAR0BE,YAAvBC,OAMCvB,KAAM,SAKdtB,MAAA+C,IAHIL,SAAUzC,IAAUqB,KAAM,OAAQrB,KAAMA,QAUrC,IAAM+C,oBAAAA,QAAAA,mBAAqB,QAArBA,GAAsBC,EAAQC,EAAMzE,GAG/CF,WAAW4E,mBAAmBF,EAAOP,SAAUO,EAAOC,GAHjDD,GAAAC,GAAAD,EAAAG,gBAAAC,kBAAA5E,EAAA,MAMLwE,GAAOP,SAASY,KAAKL,EAAOC,GAE5B,OAAOD,GAAOC,GAgBVlE,IAAKqC,QAAAA,QAAAA,OAAW,QAAXA,GAAWkC,GAAgB,GAApCC,GAAA,0BAKA9E,KAAI+E,KAAAA,WAAJ,GAAqBD,KAAAA,SAVhB3E,MAAA2E,EAOHvD,KAAOsD,IAGT7E,KAAI+E,SAASC,QAAQF,GAcjBP,IAAOU,aAAAA,QAAAA,YAAY,QAAZA,GAAYV,GAEtB,IAFDA,EAEO,CAAE,MAAA,OAGR,GAAAA,EAAAU,YAAA,sBAAA,CAXI,MAAA,UAQE,CAOT,GAAAC,GAAA,4BALI,SAASrF,WAAWsF,qBAAqBZ,EAAOa,cAAeF,IAa5D,IAAMG,gBAAAA,QAAAA,eAAiB,QAAjBA,GAAkBtF,GAAkC,GAAzBa,GAAyBL,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAjB,MAAiB,IAAT+E,GAAS/E,UAAA,EAK7D,IAAAG,GAAAL,WAAAN,EADF,KAAKW,EAAM,CAIX,MAAOb,GAIT,MAAAA,YAAA0F,UAAA7E,EAAAR,OAAAU,GAAA0E,GAYG,IAAAE,gBAAAA,QAAAA,eAAA,QAAAA,GAAAzF,EAAAa,EAAA0E,EAAAG,GAEDA,UAASC,KAATD,YAAAA,YAAAA,QAASC,MAASD,SAAlB,CACAA,OAPKA,EAAAC,SAAAD,EAOLA,GAAUA,EAAS,GAAK7E,IAAU,OAAS6E,EAAS,CAEpDpE,UAAStB,EAASa,EAAO+E,KAAKC,UAAUN,EAAM,KAAMG,IActD,IAAAI,OAAAA,QAAAA,MAAA,QAAAA,GAAAC,EAAAC,GAJE1E,SAASyE,EAAK,QAASC,GAOlB,IAAMC,UAAAA,QAAAA,SAAW,QAAXA,GAAYjG,EAASkG,EAAM3E,GASjCtB,IAAMkG,KAAAA,QAAAA,cAAAA,GAAAA,KAAAA,EAAYnG,GAQzB,IAAAmG,UAAAA,QAAAA,SAAA,QAAAA,GAAAnG,EAAAkG,EAAAtF,GAEE,GAAA2E,GAAAtF,IAAAM,KAAA6F,eAAArG,cAAAC,MACE,OAAAuF,GAAAW,IAAA,KAAAtF,EAAA2E,EAAAW,GAYG,IAAMG,sBAAAA,QAAAA,qBAAuB,QAAvBA,GAAwBC,EAAIC,GAAL,MAAYD,KAAOC,GAAMtG,IAAIuG,MAAMC,cAAcH,EAAIC,GAOlF,IAAMG,SAAAA,QAAAA,QAAU,QAAVA,GAAW1G,EAASY,GAAV,MAAuB+F,UAAS3G,EAAS,OAAQY,GAOjE,IAAMO,SAAAA,QAAAA,QAAU,QAAVA,GAAWnB,EAASuB,GAE/BD,SAAStB,EAAS,OAAQuB,GASrB,IAAMqF,SAAAA,QAAAA,QAAU,QAAVA,GAAU5G,GAErB,GAAMW,GAAOL,WAAWN,EACxB,OAAQW,IAAQA,EAAKiG,UAQhB,IAAMC,iBAAAA,QAAAA,gBAAkB,QAAlBA,GAAkB7G,GAAA,MAC7BC,KAAIM,KAAKoC,gBAAgB5C,cAAcC,KAAa4G,QAAQ5G,GAiB5D,IAAA8G,mBAAAA,QAAAA,kBAAA,QAAAA,GAAApF,EAAAtB,GAEEsB,IAAAA,MAASK,QAAKzB,GAAWoB,CAC1B,OAIA,IAAA,GAAAK,GAAAL,EAAAjB,OAAAsB,KAAA,CALCL,EAASK,GAAKzB,WAAWoB,EAASK,IAapC,IAAAL,EAAAjB,OAAA,CACAiB,OAtBKA,EAAAmD,MAgBDzE,MAAQA,GAASsB,EAAS,GAAGvB,OAAOC,OAY1CH,IAAAM,KAAAwG,wBAVI9G,IAAIM,KAAKyG,oBAeXtF,GAAMuC,QAAWO,KAEf,OAAIyC,KAAAA,SAAQhD,UAAZiD,KAAAC,MAAAlH,IAAAC,QAAAwB,IAOG,IAAA0F,0BAAAA,QAAAA,yBAAA,QAAAA,GAAA5C,EAAA0B,EAAAmB,GAEJ,GAAApD,GAAAO,EAAAP,QAbI,KAAA,GAAAlC,GAAAkC,EAAAxD,OAAAsB,KAAA,CAIH,GAAIkF,GAAQhD,EAASlC,EAazB,IAAAkF,EAAAf,KAAAmB,EAAA,CAXM,MAAOJ,OACF,CACLA,EAAQG,EAAyBH,EAAOf,EAAMmB,EAC9C,IAAIJ,EAAO,CACT,MAAOA,MAcR,IAAMK,gBAAAA,QAAAA,eAAiB,QAAjBA,GAAkBC,EAAW/C,EAAQgD,GAEhD,IAAK,GAAIC,KAAMF,GAAW,CACxB/C,EAAOkD,iBAAiBD,EAAIF,EAAUE,GAAIP,KAAKM,KAoC5C,IAAIzF,IAAAA,QAAAA,GAAI4F,QAAJ5F,GAAI4F,EAAbC,EAAmCC,EAAAC,GAEjC,GAAAC,IAAgBJ,IAAhBI,IAAAH,EAAA,CACA,OAGCC,QAAAA,KAAA,UAAAA,EAAA,KACDG,SAAaC,KAAWC,UAAxBJ,EAAA,IAIF,IAAKH,GAAIM,oBAAyBF,EAblC,IAAMC,GAAelI,WAAWqI,aAgB9B,KAAA,GAAIL,GAAAA,EAAUrH,OAAAsB,KAAA,CAEb,GAAAkG,GAAAN,EAAA5F,EACF,IAAAmG,GAAAD,EAAA5E,QAAA0E,EAAAH,EAbC,IAAI3H,IAAIM,KAAKS,cAAckH,KAAaL,EAAS,CAenD,OAZEG,EAAaC,GAAWC,EAI1B,IAAK,GAAID,KAAWD,GAAc,CAEhC1G,SAAS2G,EAAS,QAASD,EAAaC,GACxC,IAAIH,EAAU,CACZ7H,IAAIM,KAAK4B,cAAc8F,IAI3B,MAAOD,GAiCPtG,IAAWA,IAAAA,QAAAA,GAAAA,QAAAA,GAAAA,EAAgBnB,EAAKkC,GAArBf,MAbX0G,IAAGL,EAAWH,EAAWC,EAAS,OAqBjC,IAAAQ,gBAAAA,QAAAA,eAAA,QAAAA,GAAAC,EAAA5G,GAED,IAAA4G,EAAOC,CAhBF,OAML7G,EAAWA,GAAYzB,IAAIM,KAAKkC,WAEhC,IAAM8F,KACN,KAAK,GAAIxG,GAAIL,EAASjB,OAAQsB,KAAM,CAClC,GAAIjC,WAAW0I,WAAW9G,EAASK,GAAIuG,GAAS,CAC9CrI,IAAIM,KAAK4B,cAAcT,EAASK,GAChCwG,GAAgB1D,KAAK0D,EAAgBxG,KAIzC,MAAOwG,GAmCH,IAAKhH,sBAAAA,QAAAA,qBAAS,QAATA,GAASkH,EAAdlH,GAA4C,GAAAmH,GAAAlI,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAE1C,IAAAkB,GAAIgH,EAAehH,UAAAzB,IAAAM,KAAAkC,WACjB,IAAAkG,GAAAD,EAAAC,kBAAA,IACD,IAAAC,GAAA9I,WAAAqI,aACF,IAAAxG,GAAAC,OAAAD,KAAAD,EACF,IAAAmH,GAAA5I,IAAAuG,MAAAsC,GAEF,IAAAC,GAAAL,EAAAK,OAAA,CAED,KAAA,GAAOH,GAAPjH,EAAAlB,OAAAsB,KAAA,CAbE,GAAMpB,GAAOL,WAAWoB,EAASC,EAAKI,IAiB1C,IAAA5B,GAAAQ,EAAAR,MAfI,IAAI0I,EAAW1I,EAAQsI,MAAgBI,EAAW1I,EAAQ,aAAewI,GAAkB,CACzF,IAAKpH,GAASpB,EAAOsI,KAAelH,EAAQ,CAC1CqH,EAAOzI,EAAOC,OAASO,CACvB,MAAMoI,IAAU,EAAG,CAiBdC,SATX,MAAOJ,GAwBIxH,IAAAA,qBAAAA,QAAAA,oBAAAA,QAAAA,GAAAA,EAAAA,GAAAA,MAAgDQ,QAAjB8G,KAAiBO,qBAAAxE,EAAAlD,GAAAwH,MAAA,KAAA,GAAtD,IAAA3H,qBAAAA,QAAAA,oBAAA,QAAAA,GAAAkH,GAAA,GAAAI,GAAAlI,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,KAgBP,IAAA0I,GAAAR,EAAAQ,eAAA,IAbE,IAAMN,KACN,IAAMO,GAAWlJ,IAAIM,KAAKmI,EAAQS,UAAY,OAE9CA,GAAS,SAACxI,EAAMG,GACd,GAAIhB,WAAW0I,WAAW1H,EAAMwH,GAAS,CACvCM,EAAO/D,KAAKqE,EAAepJ,WAAWsJ,iBAAiBtI,EAAMwH,GAAUxH,KAI3E,OAAO8H,GAaF,IAAMhG,YAAAA,QAAAA,WAAa,QAAbA,GAAc5C,EAAS6H,GAA7B,GAAAlH,GAAAL,WAAAN,EAuBA,KAAMqJ,GAAAA,EAAAA,CACX/H,MAASR,GAhBTH,EAAO,GAAIV,KAAIC,SAEXE,MAAOJ,EACPwB,KAAM,IAERvB,IAAIM,KAAKwG,wBACT9G,IAAIM,KAAKyG,oBAGX/G,KAAIM,KAAKqC,WAAWjC,EAEpB,OAAOA,GAIF,IAAM0I,OAAAA,QAAAA,MAAQ,QAARA,GAAQvI,GACnBQ,SAASR,EAAM,WAAY,GAAIwI","file":"../../../../../../felixhayashi/tiddlymap/js/lib/utils/wiki.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/lib/utils/wiki\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport {\n  EnvironmentError,\n  InvalidArgumentException,\n}                           from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport * as basicUtils      from '$:/plugins/felixhayashi/tiddlymap/js/lib/utils/basic';\n\n/**\n * Gets a tiddler reference from a tRef or tObj\n *\n * @param {Tiddler|string} tiddler - A tiddler reference or object.\n * @return {TiddlerReference|null} A tiddler reference (title)\n */\nexport const getTiddlerRef = tiddler => {\n\n  if (tiddler instanceof $tw.Tiddler) {\n\n    return tiddler.fields.title;\n\n  } else if (typeof tiddler === 'string') {\n\n    return tiddler;\n\n  } else {\n\n    throw new InvalidArgumentException(tiddler);\n\n  }\n\n};\n\n/**\n * Similar to {@code wiki.getTiddler()} but also accepts a tObj as\n * argument, thus, making it unnecessary to always differentiate or remember\n * if we are dealing with an object or a reference.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js#L866\n * @param {Tiddler} tiddler - A tiddler reference or object.\n * @return {Tiddler} A tiddler object.\n */\nexport const getTiddler = tiddler =>\n  $tw.wiki.getTiddler(tiddler instanceof $tw.Tiddler ? tiddler.fields.title : tiddler);\n\n/**\n * Get a tiddler's field value. If the field does not exist or\n * its value is an empty string, return the default or an empty\n * string.\n */\nexport const getField = (tiddler, field, defValue = '') => {\n\n  const tObj = getTiddler(tiddler);\n  return (!tObj ? defValue : tObj.fields[field] || defValue);\n\n};\n\n/**\n * Checks if tiddlers (including shadow tiddlers) exist.\n *\n * @param {Tiddler} tiddler\n * @return {boolean} True if the tiddler exists, false otherwise\n */\nexport const tiddlerExists = tiddler => {\n\n  if (!tiddler) {\n    return false;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n\n  return Boolean(tRef && ($tw.wiki.tiddlerExists(tRef) || $tw.wiki.isShadowTiddler(tRef)));\n\n};\n\nexport const setSidebarTab = tRef => {\n\n  setText(getTiddlersByPrefix('$:/state/tab/sidebar-')[0], mainEditor);\n\n};\n\n\n\n/**\n * Set a tiddler field to a given value.\n *\n * Setting the title field to another value will clone the tiddler.\n * In this case, better use @link{clone} as this is\n * semantically stronger.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n *\n * @return {$tw.Tiddler|undefined} The tiddler object containing\n *     the field with the assigned value.\n */\nexport const setField = (tiddler, field, value) => {\n\n  if (!tiddler || !field) {\n    return;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n  const fields = {\n    title: tRef,\n    [field]: value\n  };\n\n  // do not use any tObj provided, it may result in a lost update!\n  let tObj = $tw.wiki.getTiddler(tRef, true);\n\n  if (field !== 'text' && tObj && !tObj.fields.text) {\n    fields.text = '';\n  }\n\n  tObj = new $tw.Tiddler(tObj, fields);\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\n/**\n * Pendant to tw native {@code addTiddlers()}.\n *\n * Also removes tiddlers from the river.\n *\n * @param {TiddlerCollection} tiddlers - A collection of tiddlers\n * to be removed.\n */\nexport const deleteTiddlers = tiddlers => {\n\n  const keys = Object.keys(tiddlers);\n  const storyList = $tw.wiki.getTiddlerList('$:/StoryList');\n\n  for (let i = keys.length; i--;) {\n    let tRef = getTiddlerRef(tiddlers[keys[i]]);\n    if (!$tw.wiki.tiddlerExists(tiddlers[keys[i]])) {\n      // this check is important!\n      // see https://github.com/Jermolene/TiddlyWiki5/issues/1919\n      continue;\n    }\n\n    const index = storyList.indexOf(tRef);\n    if (index !== -1) { // tiddler is displayed in river\n      storyList.splice(index, 1);\n      setField('$:/StoryList', 'list', storyList);\n    }\n\n    // finally delete the tiddler;\n\n\n    $tw.wiki.deleteTiddler(tRef);\n\n  }\n\n};\n\nexport const moveFieldValues = (oldName, newName, isRemoveOldField, isIncludeSystemTiddlers, tiddlers) => {\n\n  if (oldName === newName) return;\n\n  const allTiddlers = tiddlers || $tw.wiki.allTitles();\n\n  for (let i = allTiddlers.length; i--;) {\n\n    const tObj = getTiddler(allTiddlers[i]);\n\n    if (tObj.isDraft() || !tObj.fields[oldName]) {\n      continue;\n    }\n\n    if (!isIncludeSystemTiddlers && $tw.wiki.isSystemTiddler(allTiddlers[i])) {\n      continue;\n    }\n\n    const fields = {\n      [newName]: tObj.fields[oldName]\n    };\n\n    if (isRemoveOldField) {\n      fields[oldName] = undefined;\n    }\n    $tw.wiki.addTiddler(new $tw.Tiddler(tObj, fields));\n\n  }\n\n};\n\nexport const getDataUri = (tiddler, type, isForceBase64) => {\n\n  type = type || imgTObj.fields.type || 'image/svg+xml';\n\n  const imgTObj = getTiddler(tiddler);\n  let body = imgTObj.fields.text;\n  let encoding = $tw.config.contentTypeInfo[type].encoding;\n\n  if (type === 'image/svg+xml') {\n\n    // see http://stackoverflow.com/questions/10768451/inline-svg-in-css\n    body = body.replace(/\\r?\\n|\\r/g, ' ');\n\n    if (!basicUtils.hasSubString('xmlns', body)) {\n      // @tiddlywiki it is bad to remove the xmlns attribute!\n      body = body.replace(/<svg/, '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n\n  }\n\n  if (isForceBase64 && encoding !== 'base64') {\n    encoding = 'base64';\n    body = window.btoa(body);\n  }\n\n  return `data:${type};${encoding},${body}`;\n\n};\n\n\n/**\n * This function facilitates to check whether a list of tiddlers\n * matches a certain filter. If the tiddler does not exist, it is not\n * returned as match. If no list is specified, all tiddlers in\n * the wiki are considered.\n *\n * @Todo: skip drafts! Or not?\n *\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @param {TiddlerCollection} [tiddlers] - A set of tiddlers used as\n *     source. If not defined, all tiddlers and system tiddlers are\n *     selected. Shadows are *not* included.\n * @return {Array.<TiddlerReference>}\n */\nexport const getMatches = (filter, tiddlers) => {\n\n  // use wiki as default source\n  let source = undefined;\n\n  // shortcuts for performance\n  const wiki = $tw.wiki;\n\n  if (typeof filter === 'string') {\n    filter = wiki.compileFilter(filter);\n  }\n\n  // if a source is provided, create an iterator callback\n  if (tiddlers != null && typeof tiddlers === 'object') {\n\n    if (!Array.isArray(tiddlers)) {\n      tiddlers = Object.keys(tiddlers);\n    }\n\n    source = callback => {\n      for (let i = tiddlers.length; i--;) {\n        const tObj = wiki.getTiddler(tiddlers[i]);\n        callback(tObj, tiddlers[i]);\n      }\n    };\n\n  }\n\n  return filter.call(wiki, source);\n\n};\n\n/**\n * Tries to match a single tiddler object against a filter.\n * Returns a boolean value.\n *\n * @param {Tiddler} tiddler - The object to apply the filter to.\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @return {boolean} True if the tiddler matches the filter, false otherwise.\n */\nexport const isMatch = (tiddler, filter) =>\n  getTiddlerRef(tiddler) === getMatches(filter, [ getTiddlerRef(tiddler) ])[0];\n\n\n/**\n *\n * @param {Tiddler} tiddler\n * @param {boolean} isBlock\n */\nexport const getTranscludeNode = (tiddler, isBlock) =>\n  ({\n    type: 'transclude',\n    attributes: {\n      tiddler: {\n        type: 'string',\n        value: getTiddlerRef(tiddler) }},\n    children: [],\n    isBlock: !!isBlock\n  });\n\n/**\n *\n * @param {Tiddler} tiddler\n */\nexport const getTiddlerNode = tiddler =>\n  ({\n    type: 'tiddler',\n    attributes: {\n      tiddler: {\n        type: 'string', value: getTiddlerRef(tiddler) }},\n    children: []\n  });\n\n/**\n *\n * @param type\n * @param className\n * @param text\n */\nexport const getElementNode = (type, className, text) =>\n  ({\n    type: 'element',\n    tag: type,\n    attributes: {\n      class: {\n        type: 'string',\n        value: className }},\n    children: text ? [ {type: 'text', text: text } ] : []\n  });\n\n/**\n *\n * @param {Widget} widget\n * @param {string} name\n * @param {Tiddler} tiddler\n * @return {*}\n */\nexport const registerTransclude = (widget, name, tiddler) => {\n\n  // if an instance exists, remove it\n  basicUtils.removeArrayElement(widget.children, widget[name]);\n\n  widget[name] = widget.makeChildWidget(getTranscludeNode(tiddler, true));\n  widget.children.push(widget[name]);\n\n  return widget[name];\n\n};\n\n/**\n * This function uses the tw-notification mechanism to display a\n * temporary message.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/dom/notifier.js\n * @param {string} message - A short message to display.\n */\nexport const notify = message => {\n\n  // @todo add to environment\n  const notifyTiddlerRef = '$:/temp/tiddlymap/notify';\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title : notifyTiddlerRef,\n    text : message\n  }));\n\n  $tw.notifier.display(notifyTiddlerRef);\n\n};\n\n/**\n * The function allows to detect whether a widget is displayed\n * in preview or not.\n */\nexport const isPreviewed = widget => {\n\n  if (!widget) {\n    return false;\n  }\n\n  if (widget.getVariable('tv-tiddler-preview')) {\n    return true;\n  } else { // fallback for < v5.1.9\n    const cls = 'tc-tiddler-preview-preview';\n    return !!basicUtils.getAncestorWithClass(widget.parentDomNode, cls);\n  }\n\n};\n\n/**\n * Parse json from field or return default value on error.\n *\n * @param {Tiddler} tiddler - The tiddler containing the json.\n * @param {string} field - The field with the json data.\n * @param {Object} [data] - An optional default value.\n * @return {*} Either the parsed data or the default data.\n */\nexport const parseFieldData = (tiddler, field = 'text', data) => {\n\n  const tObj = getTiddler(tiddler);\n\n  if (!tObj) {\n    return data;\n  }\n\n  return basicUtils.parseJSON(tObj.fields[field], data);\n\n};\n\n/**\n * Serialize json data and store it in a tiddler's field.\n *\n * @param {Tiddler} tiddler - The tiddler to store the json in.\n * @param {string} field - The field that will store the json.\n * @param {Object} data - The json data.\n * @param {int} [indent = 0] - the indentation\n */\nexport const writeFieldData = (tiddler, field, data, indent) => {\n\n  if (typeof data !== 'object') {\n    return;\n  }\n\n  indent = parseInt(indent);\n  indent = (indent > 0 && field === 'text' ? indent : 0);\n\n  setField(tiddler, field, JSON.stringify(data, null, indent));\n\n};\n\n/**\n * Clone a tiddler and give it another title.\n * This means the tiddlers are equal except from their titles.\n */\nexport const clone = (src, dest) => {\n\n  setField(src, 'title', dest);\n\n};\n\n/**\n * Set the value of a data tiddler entry (index) to a given value\n */\nexport const setEntry = (tiddler, prop, value) => {\n\n  $tw.wiki.setText(getTiddlerRef(tiddler), null, prop, value);\n\n};\n\n/**\n * Get the value of a data tiddler entry (index)\n */\nexport const getEntry = (tiddler, prop, defValue) => {\n\n  const data = $tw.wiki.getTiddlerData(getTiddlerRef(tiddler), {});\n  return (data[prop] == null ? defValue : data[prop]);\n\n};\n\n//~ utils.getNestedProperty = function(obj, propPath) {\n//~\n  //~ propPath = propPath.split(\".\");\n  //~ for (var i = propPath.length; i--;) {\n    //~ if (obj !== null && typeof obj === \"object\") {\n      //~ obj = obj[propPath[i]];\n  //~ }\n  //~\n//~ };\n\n/**\n * Compare versions.\n * @return {boolean} Unlike `$tw.utils.checkVersions`, this function\n * only returns true if the left argument is greater than the right\n * argument.\n */\nexport const isLeftVersionGreater = (v1, v2) => v1 !== v2 && $tw.utils.checkVersions(v1, v2);\n\n/**\n *\n * @param tiddler\n * @param defValue\n */\nexport const getText = (tiddler, defValue) => getField(tiddler, 'text', defValue);\n\n/**\n *\n * @param tiddler\n * @param value\n */\nexport const setText = (tiddler, value) => {\n\n  setField(tiddler, 'text', value);\n\n};\n\n/**\n * Checks whether a tiddler is a draft or not.\n *\n * @param {Tiddler} tiddler - The tiddler to check on.\n */\nexport const isDraft = tiddler => {\n\n  const tObj = getTiddler(tiddler);\n  return (tObj && tObj.isDraft());\n\n};\n\n\n/**\n * Get a tiddler's text or otherwise return a default text.\n */\nexport const isSystemOrDraft = tiddler =>\n  $tw.wiki.isSystemTiddler(getTiddlerRef(tiddler)) || isDraft(tiddler);\n\n/**\n * Function to merge an array of tiddlers into a single tiddler.\n *\n * @param {Array<TiddlerReference|Tiddler>} tiddlers - The\n *     tiddlers to merge.\n * @param {string} [title=null] - The title where the result is\n *     written to. If not specified, the first array item is used\n *     as output title.\n */\nexport const getMergedTiddlers = (tiddlers, title) => {\n\n  if (!Array.isArray(tiddlers)) {\n    return;\n  }\n\n  // turn all array elements into tiddler objects\n  for (let i = tiddlers.length; i--;) {\n    tiddlers[i] = getTiddler(tiddlers[i]);\n  }\n\n  if (!tiddlers.length) {\n    return;\n  }\n\n  tiddlers.push(\n    { title: (title || tiddlers[0].fields.title) },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  // add context for `apply()` function\n  tiddlers.unshift(null);\n\n  return new (Function.prototype.bind.apply($tw.Tiddler, tiddlers));\n\n};\n\n/**\n * Depth first search\n */\nexport const getChildWidgetByProperty = (widget, prop, val) => {\n\n  const children = widget.children;\n  for (let i = children.length; i--;) {\n    let child = children[i];\n    if (child[prop] === val) {\n      return child;\n    } else {\n      child = getChildWidgetByProperty(child, prop, val);\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n};\n\n/**\n * Register listeners to widget using a hashmap.\n *\n * @param {Hashmap<Key, Function>} listeners - The listeners to attach.\n * @param {Widget} widget - the widget to attach the listeners to.\n * @param {Object} context - The context to bind the listeners to.\n */\nexport const addTWlisteners = (listeners, widget, context) => {\n\n  for (let id in listeners) {\n    widget.addEventListener(id, listeners[id].bind(context));\n  }\n\n};\n\n/**\n * Renames all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are prefixed with `newPrefix` by replacing\n * `oldPrefix` with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @param {boolean} [isDelete=true] - True, if the tiddlers with the\n *     old prefix should be deleted or false, if they should be kept.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const mv = (oldPrefix, newPrefix, isForce, isDelete) => {\n\n  if (oldPrefix === newPrefix || !oldPrefix || !newPrefix) {\n    return;\n  }\n\n  isForce = (typeof isForce === 'boolean' ? isForce : false);\n  isDelete = (typeof isDelete === 'boolean' ? isDelete : true);\n\n  // prepare\n  const targets = getTiddlersByPrefix(oldPrefix);\n  const fromToMapper = basicUtils.makeHashMap();\n\n  for (let i = targets.length; i--;) {\n\n    const oldTRef = targets[i];\n    const newTRef = oldTRef.replace(oldPrefix, newPrefix);\n    if ($tw.wiki.tiddlerExists(newTRef) && !isForce) {\n      return; // undefined\n    }\n    fromToMapper[oldTRef] = newTRef;\n\n  }\n\n  for (let oldTRef in fromToMapper) {\n\n    setField(oldTRef, 'title', fromToMapper[oldTRef]);\n    if (isDelete) {\n      $tw.wiki.deleteTiddler(oldTRef);\n    }\n  }\n\n  return fromToMapper;\n\n};\n\n/**\n * Clones all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are instead prefixed with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const cp = (oldPrefix, newPrefix, isForce) =>\n  mv(oldPrefix, newPrefix, isForce, false);\n\n/**\n * Delete all tiddlers with a given prefix.\n *\n * @param {string} prefix - The prefix\n */\nexport const deleteByPrefix = (prefix, tiddlers) => {\n\n  if (!prefix) {\n    return;\n  }\n\n  tiddlers = tiddlers || $tw.wiki.allTitles();\n\n  const deletedTiddlers = [];\n  for (let i = tiddlers.length; i--;) {\n    if (basicUtils.startsWith(tiddlers[i], prefix)) {\n      $tw.wiki.deleteTiddler(tiddlers[i]);\n      deletedTiddlers.push(deletedTiddlers[i]);\n    }\n  }\n\n  return deletedTiddlers;\n\n};\n\n\n/**\n * Returns all tiddlers that possess a property with a certain value.\n *\n * @param {string} fieldName - The property name to look for.\n * @param {string} [value] - If provided, the field's value must\n *     equal this value in order to match.\n * @param {Hashmap} [options] - Further options.\n * @param {TiddlerCollection} [options.tiddlers=$tw.wiki.allTitles()] - A collection\n *     of tiddlers to perform the search on.\n * @param {boolean} [options.isIncludeDrafts=false] - True if drafts of the found\n *     tiddlers are also included in the result set.\n * @param {number} [options.limit] - A positive number delimiting the maximum\n *     number of results.\n *     tiddlers are also included in the result set.\n * @return {Hashmap.<TiddlerReference, Tiddler>} Result\n */\nexport const getTiddlersWithField = (fieldName, value, options = {}) => {\n\n  const tiddlers = options.tiddlers || $tw.wiki.allTitles();\n  const isIncludeDrafts = (options.isIncludeDrafts === true);\n  const result = basicUtils.makeHashMap();\n  const keys = Object.keys(tiddlers);\n  const hasOwnProp = $tw.utils.hop;\n  let limit = options.limit || 0;\n\n  for (let i = keys.length; i--;) {\n\n    const tObj = getTiddler(tiddlers[keys[i]]);\n    const fields = tObj.fields;\n    if (hasOwnProp(fields, fieldName) && (!hasOwnProp(fields, 'draft.of') || isIncludeDrafts)) {\n      if (!value || fields[fieldName] === value ) {\n        result[fields.title] = tObj;\n        if (--limit === 0) {\n          break;\n        }\n      }\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n *\n * @param name\n * @param value\n */\nexport const getTiddlerWithField = (name, value) =>\n  Object.keys(getTiddlersWithField(name, value, { limit: 1 }))[0];\n\n/**\n * Iterates over all tiddlers in a given way and returns tiddlers\n * whose title matches the prefix string.\n *\n * @param {string} prefix - The prefix to match\n * @param {Hashmap} [options] - An options object.\n * @param {string} [options.iterator=\"each\"] - A tw store iterator\n *    function, e.g. \"eachShadow\" or \"ShadowPlusTiddlers\".\n * @param {boolean} [options.removePrefix= false] - Whether to remove\n *     the prefix or to leave it.\n * @return {Array<string>} The matches with or without the prefix.\n */\nexport const getTiddlersByPrefix = (prefix, options = {}) => {\n\n  const removePrefix = (options.removePrefix === true);\n  const result = [];\n  const iterator = $tw.wiki[options.iterator || 'each'];\n\n  iterator((tObj, tRef) => {\n    if (basicUtils.startsWith(tRef, prefix)) {\n      result.push(removePrefix ? basicUtils.getWithoutPrefix(tRef, prefix) : tRef);\n    }\n  });\n\n  return result;\n\n};\n\n/**\n * Advanced addTiddler method.\n *\n * It adds timestamps and only adds the tiddler if it doesn't exist\n * yet or the force option is used.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n */\nexport const addTiddler = (tiddler, isForce) => {\n\n  let tObj = getTiddler(tiddler);\n\n  if (!isForce && tObj) {\n    return tObj;\n  }\n\n  tObj = new $tw.Tiddler(\n    {\n      title: tiddler,\n      text: ''\n    },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\nexport const touch = tRef => {\n  setField(tRef, 'modified', new Date());\n};\n"],"sourceRoot":"../../../../../../../src/plugins"}