/*\

title: $:/plugins/felixhayashi/tiddlymap/view_abstraction.js
type: application/javascript
module-type: library

@preserve

\*/
(function(){var t=require("$:/plugins/felixhayashi/tiddlymap/utils.js").utils;var e=require("$:/plugins/felixhayashi/tiddlymap/edgetype.js").EdgeType;var i=function(e,r){if(e instanceof i){return e}this.createShortcuts();this.path=t.getDataMap();this.path.config=this._getConfigPath(e);if(r){this._createView()}else if(!this.exists()){return}this.path.map=this.path.config+"/map";this.path.nodeFilter=this.path.config+"/filter/nodes";this.path.edgeFilter=this.path.config+"/filter/edges";this._ignoreOnNextRebuild=t.getDataMap();this.rebuildCache(t.getValues(this.path))};i.prototype.createShortcuts=function(){this.wiki=$tw.wiki;this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger};i.prototype._getConfigPath=function(e){if(e instanceof $tw.Tiddler){return e.fields.title}if(typeof e=="string"){e=t.getWithoutPrefix(e,this.opt.path.views+"/");if(!t.hasSubString(e,"/")){return this.opt.path.views+"/"+e}}};i.prototype.getPaths=function(){return this.path};i.prototype._createView=function(){if(this.exists()){this.destroy()}var e={};e.title=this.path.config;e[this.opt.field.viewMarker]=true;e.id=t.genUUID();this.wiki.addTiddler(new $tw.Tiddler(e))};i.prototype.isLocked=function(){return this.wiki.isShadowTiddler(this.path.config)};i.prototype.refresh=function(t){return this.rebuildCache(Object.keys(t))};i.prototype.rebuildCache=function(e,i){if(!this.exists())return[];if(t.inArray(this.path.config,e)){this.logger("debug","Reloading config of view",this.getLabel(),"; trigger full rebuild");e=t.getValues(this.path)}var r=this._ignoreOnNextRebuild;this._ignoreOnNextRebuild=t.getDataMap();var s=[];for(var o=0;o<e.length;o++){var n=e[o];if(!i&&r[n]){continue}else if(n===this.path.config){this.config=this.getConfig(null,true)}else if(n===this.path.map){this.positions=this.getPositions(true)}else if(n===this.path.nodeFilter){this.nodeFilter=this.getNodeFilter(null,true)}else if(n===this.path.edgeFilter){this.edgeFilter=this.getEdgeFilter(null,true);this.typeWhiteList=this.getTypeWhiteList(true)}else if(t.startsWith(n,this.opt.path.edgeTypes)){this.typeWhiteList=this.getTypeWhiteList(true)}else{continue}s.push(n)}return s};i.prototype.exists=function(){return t.tiddlerExists(this.path.config)};i.prototype.getRoot=function(){return this.path.config};i.prototype.getLabel=function(){if(!this.exists())return;return t.getBasename(this.path.config)};i.prototype.destroy=function(){if(!this.exists())return;var e="[prefix["+this.getRoot()+"]]";t.deleteTiddlers(t.getMatches(e));this.path=t.getDataMap()};i.prototype.getReferences=function(){var e="[regexp:text[<\\$tiddlymap.*?view=."+this.getLabel()+"..*?>]]";return t.getMatches(e)};i.prototype.rename=function(e){if(!this.exists()||typeof e!=="string"||t.inArray("/",e)){return}var i=this.getLabel();if(i===e){return}for(index in this.path){var r=this.wiki.getTiddler(this.path[index]);if(!r)continue;this.path[index]=this.path[index].replace(i,e);this.wiki.addTiddler(new $tw.Tiddler(r,{title:this.path[index]}));this.wiki.deleteTiddler(r.fields.title)}this.rebuildCache(t.getValues(this.path),true)};i.prototype.isEnabled=function(e){return t.isTrue(this.getConfig(e),false)};i.prototype.getConfig=function(e,i,r){if(!this.exists()){var s=t.getDataMap()}else if(!i&&this.config){var s=this.config}else{var o=this.wiki.getTiddler(this.path.config).fields;var s=t.getPropertiesByPrefix(o,"config.");defaults={"config.layout.active":"user"};$tw.utils.extend(defaults,s)}return e?s[t.startsWith(e,"config.")?e:"config."+e]:s};i.prototype.getStabilizationIterations=function(){return this.stabIterations?this.stabIterations:1e3};i.prototype.setStabilizationIterations=function(t){};i.prototype.getHierarchyEdgeTypes=function(){if(this.getConfig("layout.active")!=="hierarchical")return[];var e=t.getPropertiesByPrefix(this.getConfig(),"config.layout.hierarchical.order-by-",true);var i=t.getDataMap();for(var r in e){if(e[r]==="true"){var s=t.getTiddler($tw.tmap.indeces.tById[r]);if(s){i[t.getBasename(s.fields.title)]=true}}}return i};i.prototype.setConfig=function(){this.logger("log","Updating config",this.config,"with",arguments);if(arguments[0]==null)return;if(arguments.length===1&&typeof arguments[0]==="object"){for(var e in arguments[0]){this.setConfig(e,arguments[0][e])}}else if(arguments.length===2&&typeof arguments[0]==="string"){var e=t.getWithoutPrefix(arguments[0],"config.");var i=arguments[1];if(i){if(e==="edge_type_namespace"){i=i.replace(/([^:])$/,"$1:")}this.config["config."+e]=i}}else{return}this.wiki.addTiddler(new $tw.Tiddler(this.wiki.getTiddler(this.path.config),this.config));this._ignoreOnNextRebuild[this.path.config]=true};i.prototype.removeNodeFromFilter=function(t){var e=this.getNodeFilter("expression");var i=e.replace("[["+t.label+"]]","").replace(this._getAddNodeFilterPart(t),"");if(i!==e){this.setNodeFilter(i);return true}return false};i.prototype._getAddNodeFilterPart=function(t){return"[field:"+this.opt.field.nodeId+"["+t.id+"]]"};i.prototype.setNodeFilter=function(e){if(!this.exists())return;e=e.replace("\n"," ");if(this.getNodeFilter.expression===e){return}t.setField(this.path.nodeFilter,"filter",e);this.logger("debug","Node filter set to",e);this.nodeFilter=this.getNodeFilter(null,true);this._ignoreOnNextRebuild[this.path.nodeFilter]=true};i.prototype.setEdgeFilter=function(e){if(!this.exists())return;e=e.replace("\n"," ");if(this.getEdgeFilter.expression===e){return}t.setField(this.path.edgeFilter,"filter",e);this.logger("debug","Edge filter set to",e,this.path.edgeFilter);this.edgeFilter=this.getEdgeFilter(null,true);this._ignoreOnNextRebuild[this.path.edgeFilter]=true};i.prototype.appendToNodeFilter=function(t){var t=this.getNodeFilter("expression")+" "+t;this.setNodeFilter(t)};i.prototype.addNodeToView=function(t){this.appendToNodeFilter(this._getAddNodeFilterPart(t));this.setNodePosition(t)};i.prototype.getEdgeFilter=function(e,i){if(!i&&this.edgeFilter){var r=this.edgeFilter}else{var r=t.getDataMap();var s=this.wiki.getTiddler(this.path.edgeFilter);r.expression=s&&s.fields.filter?s.fields.filter:this.opt.filter.defaultEdgeFilter;r.compiled=this.wiki.compileFilter(r.expression)}return e?r[e]:r};i.prototype.getTypeWhiteList=function(i){if(!i&&this.typeWhiteList){return this.typeWhiteList}else{var r=t.getDataMap();var s=t.getMatches(this.opt.selector.allEdgeTypes);var o=t.getMatches(this.getEdgeFilter("compiled"),s);for(var n=0;n<o.length;n++){var h=t.getWithoutPrefix(o[n],this.opt.path.edgeTypes+"/");r[h]=new e(h)}return r}};i.prototype.getNodeFilter=function(e,i){if(!i&&this.nodeFilter){var r=this.nodeFilter}else{var r=t.getDataMap();var s=this.wiki.getTiddler(this.path.nodeFilter);r.expression=s&&s.fields.filter?s.fields.filter:"";r.compiled=this.wiki.compileFilter(r.expression)}return e?r[e]:r};i.prototype.getPositions=function(t){if(!t&&this.positions){return this.positions}return $tw.wiki.getTiddlerData(this.path.map,{})};i.prototype.setPositions=function(t){if(!this.exists())return;$tw.tmap.logger("log",'Storing positions in view "'+this.getLabel()+'"');if(typeof t!=="object")return;this.wiki.setTiddlerData(this.path.map,t);this.positions=t;this._ignoreOnNextRebuild[this.path.map]=true};i.prototype.setNodePosition=function(t){if(t&&t.x&&t.y){var e=this.getPositions();e[t.id]={x:t.x,y:t.y};this.setPositions(e)}};exports.ViewAbstraction=i})();