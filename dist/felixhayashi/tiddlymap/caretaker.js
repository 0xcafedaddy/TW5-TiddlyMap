/*\

title: $:/plugins/felixhayashi/tiddlymap/caretaker.js
type: application/javascript
module-type: startup

This module is responsible for registering a global namespace under $tw
and loading (and refreshing) the configuration.

Since changes in configuration tiddlers are instantly acknowledged,
the user does not need to refresh its browser (in theory :)).

Like a caretaker in real life, nobody can communicate with him. He does
all his work in the background without being ever seen. What I want to
say here is: do not require the caretaker!

@preserve

\*/
(function(){"use strict";exports.name="tiddlymap-setup";exports.platforms=["browser"];exports.after=["startup"];exports.before=["rootwidget"];exports.synchronous=true;var t=require("$:/plugins/felixhayashi/tiddlymap/utils.js").utils;var e=require("$:/plugins/felixhayashi/tiddlymap/adapter.js").Adapter;var a=function(e){var a=e;if(!a.path)a.path=t.getEmptyMap();a.path.pluginRoot="$:/plugins/felixhayashi/tiddlymap";a.path.edges="$:/plugins/felixhayashi/tiddlymap/graph/edges";a.path.views="$:/plugins/felixhayashi/tiddlymap/graph/views";a.path.options="$:/plugins/felixhayashi/tiddlymap/config";a.path.tempRoot="$:/temp/felixhayashi/tiddlymap";a.path.localHolders="$:/temp/felixhayashi/tiddlymap/holders";a.path.dialogs="$:/plugins/felixhayashi/tiddlymap/dialog";if(!a.ref)a.ref=t.getEmptyMap();a.ref.dialogStandardFooter="$:/plugins/felixhayashi/tiddlymap/dialog/standardFooter";a.ref.defaultGraphViewHolder="$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder";a.ref.graphBar="$:/plugins/felixhayashi/tiddlymap/misc/advancedEditorBar";a.ref.sysConf="$:/plugins/felixhayashi/tiddlymap/config/sys";a.ref.visConf="$:/plugins/felixhayashi/tiddlymap/config/vis";if(!a.config)a.config=t.getEmptyMap();a.config.sys=$tw.wiki.getTiddlerData(a.ref.sysConf,{});var i=t.unflatten($tw.wiki.getTiddlerData(a.ref.sysConf+"/user",{}));console.log("new data",i);a.config.sys=$tw.utils.extendDeepCopy(a.config.sys,i);console.log("new merged data",a.config.sys);a.config.vis=$tw.wiki.getTiddlerData(a.ref.visConf,{});var i=t.unflatten($tw.wiki.getTiddlerData(a.ref.visConf+"/user",{}));a.config.vis=$tw.utils.extendDeepCopy(a.config.vis,i);if(!a.field)a.field=t.getEmptyMap();$tw.utils.extend(a.field,a.config.sys.field);if(!a.misc)a.misc=t.getEmptyMap();a.misc.unknownEdgeLabel="__noname__";a.misc.cssPrefix="tmap-";if(!a.filter)a.filter=t.getEmptyMap();a.filter.allSharedEdges="[prefix["+a.path.edges+"]]";a.filter.allSharedEdgesByLabel="[prefix["+a.path.edges+"]removeprefix["+a.path.edges+"/]]";a.filter.allViews="[all[tiddlers+shadows]has["+a.field.viewMarker+"]]";a.filter.allViewsByLabel="[all[tiddlers+shadows]has["+a.field.viewMarker+"]removeprefix["+a.path.views+"/]]"};var i=function(e){var a=e;var i=function(){};if($tw.tiddlymap.opt.config.sys.debug==="true"&&console){a.logger=function(){if(arguments.length<2)return;var t=Array.prototype.slice.call(arguments);var e=t.shift(t);var a=console.hasOwnProperty(e)?e:"debug";console[a].apply(console,t)}}else{a.logger=i}a.notify=$tw.tiddlymap.opt.config.sys.notifications==="true"?t.notify:i;return a};var d=function(){var t=function(){var t=[];t.push("prefix["+$tw.tiddlymap.opt.path.options+"]");t.push("!has[draft.of]");return"["+t.join("")+"]"}.call(this);$tw.tiddlymap.logger("log","Caretaker's filter: \""+t+'"');return $tw.wiki.compileFilter(t)};var r=function(){for(var t=$tw.tiddlymap.registry.length-1;t>=0;t--){var e=$tw.tiddlymap.registry[t];if(!document.body.contains(e.getContainer())){$tw.tiddlymap.logger("warn","A graph has been removed.");e.destruct();$tw.tiddlymap.registry.splice(t,1)}}};exports.startup=function(){$tw.tiddlymap=t.getEmptyMap();$tw.tiddlymap.registry=[];window.setInterval(r,1e3);$tw.tiddlymap.opt=t.getEmptyMap();a($tw.tiddlymap.opt);i($tw.tiddlymap,$tw.tiddlymap.opt);$tw.tiddlymap.adapter=new e;$tw.tiddlymap.logger("warn","TiddlyMap's caretaker was started");$tw.tiddlymap.logger("log","Registered namespace and options");$tw.tiddlymap.edgeChanges=[];var l=d();$tw.rootWidget.addEventListener("tm-create-edge",function(t){var e={from:$tw.tiddlymap.adapter.createNode(t.paramObject.from).id,to:$tw.tiddlymap.adapter.createNode(t.paramObject.to).id,label:t.paramObject.label};$tw.tiddlymap.adapter.insertEdge(e);$tw.tiddlymap.notify("Edge inserted")});$tw.wiki.addEventListener("change",function(e){$tw.tiddlymap.logger("warn","These tiddlers changed:",e);var d=t.getMatches(l,Object.keys(e));if(!d.length)return;$tw.tiddlymap.logger("warn","Global options will be rebuild");a($tw.tiddlymap.opt);i($tw.tiddlymap)})}})();