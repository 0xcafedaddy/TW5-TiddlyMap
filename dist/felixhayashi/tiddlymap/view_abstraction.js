/*\

title: $:/plugins/felixhayashi/tiddlymap/view_abstraction.js
type: application/javascript
module-type: library

@preserve

\*/
var utils=require("$:/plugins/felixhayashi/tiddlymap/utils.js").utils;var ViewAbstraction=function(t,i){if(t instanceof ViewAbstraction){return t}this.wiki=$tw.wiki;this.opt=$tw.tiddlymap.opt;this.logger=$tw.tiddlymap.logger;this.path=utils.getEmptyMap();this.path.config=this._getConfigPath(t);if(i){this._createView()}else if(!this.exists()){return}this.path.map=this.path.config+"/map";this.path.nodeFilter=this.path.config+"/filter/nodes";this.path.edgeFilter=this.path.config+"/filter/edges";this._ignoreOnNextRebuild=utils.getEmptyMap();this.rebuildCache(utils.getValues(this.path))};ViewAbstraction.prototype._getConfigPath=function(t){if(t instanceof $tw.Tiddler){return t.fields.title}if(typeof t=="string"){if(utils.startsWith(t,this.opt.path.views)){var i=this.opt.path.views+"/";t=t.substr(i.length)}if(t.indexOf("/")===-1){return this.opt.path.views+"/"+t}}};ViewAbstraction.prototype.getPaths=function(){return this.path};ViewAbstraction.prototype._createView=function(){if(this.exists()){this.destroy()}var t={};t.title=this.path.config;t[this.opt.field.viewMarker]=true;t.id=utils.genUUID();this.wiki.addTiddler(new $tw.Tiddler(t))};ViewAbstraction.prototype.refresh=function(t){return this.rebuildCache(Object.keys(t))};ViewAbstraction.prototype.rebuildCache=function(t,i){if(!this.exists())return[];if(t.indexOf(this.path.config)!=-1){this.logger("debug","View's config is requested to be rebuild -> trigger full rebuild");t=utils.getValues(this.path)}var e=this._ignoreOnNextRebuild;this._ignoreOnNextRebuild=utils.getEmptyMap();var s=[];for(var r=0;r<t.length;r++){var o=t[r];if(!i&&e[o]){continue}switch(o){case this.path.config:this.config=this.getConfig(null,true);break;case this.path.map:this.positions=this.getPositions(true);break;case this.path.nodeFilter:this.nodeFilter=this.getNodeFilter(null,true);break;case this.path.edgeFilter:this.edgeFilter=this.getEdgeFilter(null,true);break;default:continue}s.push(o)}return s};ViewAbstraction.prototype.exists=function(){return utils.tiddlerExists(this.path.config)};ViewAbstraction.prototype.getRoot=function(){return this.path.config};ViewAbstraction.prototype.getLabel=function(){if(!this.exists())return;return utils.getBasename(this.path.config)};ViewAbstraction.prototype.destroy=function(){if(!this.exists())return;var t="[prefix["+this.getRoot()+"]]";utils.deleteTiddlers(utils.getMatches(t));this.path=utils.getEmptyMap()};ViewAbstraction.prototype.rename=function(t){if(!this.exists()||typeof t!=="string"||t.indexOf("/")!==-1){return}var i=this.getLabel();if(i===t){return}for(index in this.path){var e=this.wiki.getTiddler(this.path[index]);if(!e)continue;this.path[index]=this.path[index].replace(i,t);this.wiki.addTiddler(new $tw.Tiddler(e,{title:this.path[index]}));this.wiki.deleteTiddler(e.fields.title)}this.rebuildCache(utils.getValues(this.path),true)};ViewAbstraction.prototype.isConfEnabled=function(t){return this.getConfig(t)==="true"};ViewAbstraction.prototype.getConfig=function(t,i){if(!this.exists()){return utils.getEmptyMap()}if(!i&&this.config){var e=this.config}else{var s=this.wiki.getTiddler(this.path.config).fields;var e=utils.getPropertiesByPrefix(s,"config.")}if(t){return e[utils.startsWith(t,"config.")?t:"config."+t]}else{return e}};ViewAbstraction.prototype.setConfig=function(t){this.logger("log","Updating config",this.config,"with",t);$tw.utils.extend(this.config,t);this.wiki.addTiddler(new $tw.Tiddler(this.wiki.getTiddler(this.path.config),this.config));this._ignoreOnNextRebuild[this.path.config]=true};ViewAbstraction.prototype.setNodeFilter=function(t){if(!this.exists())return;t=t.replace("\n"," ");if(this.getNodeFilter.expression===t){return}this.wiki.addTiddler(new $tw.Tiddler({title:this.path.nodeFilter,filter:t.replace("\n"," ")}));this.logger("debug","Node filter set to",t);this.nodeFilter=this.getNodeFilter(null,true);this._ignoreOnNextRebuild[this.path.nodeFilter]=true};ViewAbstraction.prototype.getPrettyNodeFilterExpr=function(){var t=this.getNodeFilter("expression").trim().replace("][","] [");var i=/[\+\-]?\[.+?[\]\}\>]\]/g;var e=t.match(i);t=t.replace(i," [] ").trim();var s=t.split(/\s+/);var r=0;var o=[];for(var n=0;n<s.length;n++){o[n]=s[n]==="[]"?e[r++]:s[n]}return o.join("\n")};ViewAbstraction.prototype.appendToNodeFilter=function(t){var t=this.getNodeFilter("expression")+" "+t;this.setNodeFilter(t)};ViewAbstraction.prototype.addNodeToView=function(t){var i="[field:"+this.opt.field.nodeId+"["+t.id+"]]";this.appendToNodeFilter(i);this.setNodePosition(t)};ViewAbstraction.prototype.getEdgeStoreLocation=function(){return this.isConfEnabled("private_edge_mode")?this.getRoot()+"/graph/edges":this.opt.path.edges};ViewAbstraction.prototype.getAllEdgesFilterExpr=function(t){var i=t?"removeprefix["+this.getEdgeStoreLocation()+"/]":"";return"[prefix["+this.getEdgeStoreLocation()+"]"+i+"]"};ViewAbstraction.prototype.getEdgeFilter=function(t,i){if(!i&&this.edgeFilter){var e=this.edgeFilter}else{var e=utils.getEmptyMap();e.expression=function(){var t=[];t.push("prefix["+this.getEdgeStoreLocation()+"]");var i=$tw.wiki.getTiddler(this.path.edgeFilter);if(i){var e=utils.getPropertiesByPrefix(i.fields,"show-",true);for(var s in e){if(e[s]==="false"){t.push("!field:id["+s+"]")}}}return"["+t.join("")+"]"}.call(this);e.compiled=this.wiki.compileFilter(e.expression)}return t?e[t]:e};ViewAbstraction.prototype.getNodeFilter=function(t,i){if(!i&&this.nodeFilter){var e=this.nodeFilter}else{var e=utils.getEmptyMap();var s=$tw.wiki.getTiddler(this.path.nodeFilter);if(s&&typeof s.fields.filter==="string"){e.expression=s.fields.filter}else{e.expression=""}e.compiled=this.wiki.compileFilter(e.expression)}return t?e[t]:e};ViewAbstraction.prototype.getPositions=function(t){if(!t&&this.positions){return this.positions}return $tw.wiki.getTiddlerData(this.path.map,{})};ViewAbstraction.prototype.setPositions=function(t){if(!this.exists())return;$tw.tiddlymap.logger("log",'Storing positions in view "'+this.getLabel()+'"');if(typeof t!=="object")return;this.wiki.setTiddlerData(this.path.map,t);this.positions=t;this._ignoreOnNextRebuild[this.path.map]=true};ViewAbstraction.prototype.setNodePosition=function(t){if(t&&t.x&&t.y){var i=this.getPositions();i[t.id]={x:t.x,y:t.y};this.setPositions(i)}};exports.ViewAbstraction=ViewAbstraction;