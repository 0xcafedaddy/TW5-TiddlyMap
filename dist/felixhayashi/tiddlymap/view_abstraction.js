/*\

title: $:/plugins/felixhayashi/tiddlymap/view_abstraction.js
type: application/javascript
module-type: library

@preserve

\*/
(function(){var t=require("$:/plugins/felixhayashi/tiddlymap/utils.js").utils;var i=function(e,r){if(e instanceof i){return e}this.wiki=$tw.wiki;this.opt=$tw.tiddlymap.opt;this.logger=$tw.tiddlymap.logger;this.path=t.getEmptyMap();this.path.config=this._getConfigPath(e);if(r){this._createView()}else if(!this.exists()){return}this.path.map=this.path.config+"/map";this.path.nodeFilter=this.path.config+"/filter/nodes";this.path.edgeFilter=this.path.config+"/filter/edges";this._ignoreOnNextRebuild=t.getEmptyMap();this.rebuildCache(t.getValues(this.path))};i.prototype._getConfigPath=function(i){if(i instanceof $tw.Tiddler){return i.fields.title}if(typeof i=="string"){if(t.startsWith(i,this.opt.path.views)){var e=this.opt.path.views+"/";i=i.substr(e.length)}if(i.indexOf("/")===-1){return this.opt.path.views+"/"+i}}};i.prototype.getPaths=function(){return this.path};i.prototype._createView=function(){if(this.exists()){this.destroy()}var i={};i.title=this.path.config;i[this.opt.field.viewMarker]=true;i.id=t.genUUID();this.wiki.addTiddler(new $tw.Tiddler(i))};i.prototype.refresh=function(t){return this.rebuildCache(Object.keys(t))};i.prototype.rebuildCache=function(i,e){if(!this.exists())return[];if(i.indexOf(this.path.config)!=-1){this.logger("debug","View's config is requested to be rebuild -> trigger full rebuild");i=t.getValues(this.path)}var r=this._ignoreOnNextRebuild;this._ignoreOnNextRebuild=t.getEmptyMap();var s=[];for(var o=0;o<i.length;o++){var n=i[o];if(!e&&r[n]){continue}switch(n){case this.path.config:this.config=this.getConfig(null,true);break;case this.path.map:this.positions=this.getPositions(true);break;case this.path.nodeFilter:this.nodeFilter=this.getNodeFilter(null,true);break;case this.path.edgeFilter:this.edgeFilter=this.getEdgeFilter(null,true);break;default:continue}s.push(n)}return s};i.prototype.exists=function(){return t.tiddlerExists(this.path.config)};i.prototype.getRoot=function(){return this.path.config};i.prototype.getLabel=function(){if(!this.exists())return;return t.getBasename(this.path.config)};i.prototype.destroy=function(){if(!this.exists())return;var i="[prefix["+this.getRoot()+"]]";t.deleteTiddlers(t.getMatches(i));this.path=t.getEmptyMap()};i.prototype.rename=function(i){if(!this.exists()||typeof i!=="string"||i.indexOf("/")!==-1){return}var e=this.getLabel();if(e===i){return}for(index in this.path){var r=this.wiki.getTiddler(this.path[index]);if(!r)continue;this.path[index]=this.path[index].replace(e,i);this.wiki.addTiddler(new $tw.Tiddler(r,{title:this.path[index]}));this.wiki.deleteTiddler(r.fields.title)}this.rebuildCache(t.getValues(this.path),true)};i.prototype.isConfEnabled=function(t){return this.getConfig(t)==="true"};i.prototype.getConfig=function(i,e){if(!this.exists()){return t.getEmptyMap()}if(!e&&this.config){var r=this.config}else{var s=this.wiki.getTiddler(this.path.config).fields;var r=t.getPropertiesByPrefix(s,"config.")}if(i){return r[t.startsWith(i,"config.")?i:"config."+i]}else{return r}};i.prototype.setConfig=function(t){this.logger("log","Updating config",this.config,"with",t);$tw.utils.extend(this.config,t);this.wiki.addTiddler(new $tw.Tiddler(this.wiki.getTiddler(this.path.config),this.config));this._ignoreOnNextRebuild[this.path.config]=true};i.prototype.setNodeFilter=function(t){if(!this.exists())return;t=t.replace("\n"," ");if(this.getNodeFilter.expression===t){return}this.wiki.addTiddler(new $tw.Tiddler({title:this.path.nodeFilter,filter:t.replace("\n"," ")}));this.logger("debug","Node filter set to",t);this.nodeFilter=this.getNodeFilter(null,true);this._ignoreOnNextRebuild[this.path.nodeFilter]=true};i.prototype.getPrettyNodeFilterExpr=function(){var t=this.getNodeFilter("expression").trim().replace("][","] [");var i=/[\+\-]?\[.+?[\]\}\>]\]/g;var e=t.match(i);t=t.replace(i," [] ").trim();var r=t.split(/\s+/);var s=0;var o=[];for(var n=0;n<r.length;n++){o[n]=r[n]==="[]"?e[s++]:r[n]}return o.join("\n")};i.prototype.appendToNodeFilter=function(t){var t=this.getNodeFilter("expression")+" "+t;this.setNodeFilter(t)};i.prototype.addNodeToView=function(t){var i="[field:"+this.opt.field.nodeId+"["+t.id+"]]";this.appendToNodeFilter(i);this.setNodePosition(t)};i.prototype.getEdgeStoreLocation=function(){return this.isConfEnabled("private_edge_mode")?this.getRoot()+"/graph/edges":this.opt.path.edges};i.prototype.getAllEdgesFilterExpr=function(t){var i=t?"removeprefix["+this.getEdgeStoreLocation()+"/]":"";return"[prefix["+this.getEdgeStoreLocation()+"]"+i+"]"};i.prototype.getEdgeFilter=function(i,e){if(!e&&this.edgeFilter){var r=this.edgeFilter}else{var r=t.getEmptyMap();var s=$tw.wiki.getTiddler(this.path.edgeFilter);r.defaultIsShow=!s||s.fields["default-is-show"]!=="false";r.expression=function(){var i=[];if(r.defaultIsShow){i.push("prefix["+this.getEdgeStoreLocation()+"]")}if(s){var e=t.getPropertiesByPrefix(s.fields,"show-",true);for(var o in e){var n=e[o]!=="false";if(r.defaultIsShow!==n){i.push((n?"":"!")+"field:id["+o+"]")}}}return"["+i.join("")+"]"}.call(this);r.compiled=this.wiki.compileFilter(r.expression)}return i?r[i]:r};i.prototype.getNodeFilter=function(i,e){if(!e&&this.nodeFilter){var r=this.nodeFilter}else{var r=t.getEmptyMap();var s=$tw.wiki.getTiddler(this.path.nodeFilter);if(s&&typeof s.fields.filter==="string"){r.expression=s.fields.filter}else{r.expression=""}r.compiled=this.wiki.compileFilter(r.expression)}return i?r[i]:r};i.prototype.getPositions=function(t){if(!t&&this.positions){return this.positions}return $tw.wiki.getTiddlerData(this.path.map,{})};i.prototype.setPositions=function(t){if(!this.exists())return;$tw.tiddlymap.logger("log",'Storing positions in view "'+this.getLabel()+'"');if(typeof t!=="object")return;this.wiki.setTiddlerData(this.path.map,t);this.positions=t;this._ignoreOnNextRebuild[this.path.map]=true};i.prototype.setNodePosition=function(t){if(t&&t.x&&t.y){var i=this.getPositions();i[t.id]={x:t.x,y:t.y};this.setPositions(i)}};exports.ViewAbstraction=i})();