/*\

title: $:/plugins/felixhayashi/tiddlymap/js/Adapter
type: application/javascript
module-type: library

@preserve

\*/
"use strict";module.exports=Adapter;var ViewAbstraction=require("$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction");var EdgeType=require("$:/plugins/felixhayashi/tiddlymap/js/EdgeType");var NodeType=require("$:/plugins/felixhayashi/tiddlymap/js/NodeType");var utils=require("$:/plugins/felixhayashi/tiddlymap/js/utils");var vis=require("$:/plugins/felixhayashi/vis/vis.js");var getContrastColour=require("$:/core/modules/macros/contrastcolour.js").run;function Adapter(){this.visShapesWithTextInside=utils.getLookupTable(["ellipse","circle","database","box","text"]);this.isTransTypeEnabled=typeof $tw.wiki.getTiddlerTranscludes==="function"}Adapter.prototype.deleteEdge=function(e){return this._processEdge(e,"delete")};Adapter.prototype.deleteEdges=function(e){e=utils.convert(e,"array");for(var t=e.length;t--;){this.deleteEdge(e[t])}};Adapter.prototype.insertEdge=function(e){return this._processEdge(e,"insert")};Adapter.prototype._processEdge=function(e,t){$tm.logger("debug","Edge",t,e);if(typeof e!=="object"||!t||!e.from)return;if(t==="insert"&&!e.to)return;var i=$tm.indeces.tById[e.from];if(!i||!utils.tiddlerExists(i))return;var r=new EdgeType(e.type);var s=utils.getTiddler(i);var a=r.namespace;if(a==="tw-list"){if(!e.to)return;return this._processListEdge(s,e,r,t)}else if(a==="tw-field"){if(!e.to)return;return this._processFieldEdge(s,e,r,t)}else if(a==="tw-body"){return null}else{return this._processTmapEdge(s,e,r,t)}return e};Adapter.prototype._processTmapEdge=function(e,t,i,r){if(r==="delete"&&!t.id)return;var s=utils.parseFieldData(e,"tmap.edges",{});if(r==="insert"){t.id=t.id||utils.genUUID();s[t.id]={to:t.to,type:i.id};if(!i.exists()){i.save()}}else{delete s[t.id]}utils.writeFieldData(e,"tmap.edges",s);return t};Adapter.prototype._processListEdge=function(e,t,i,r){var s=i.name;var a=utils.getTiddler(e);var o=$tw.utils.parseStringArray(e.fields[s]);o=(o||[]).slice();var d=$tm.indeces.tById[t.to];if(r==="insert"){o.push(d);if(!i.exists()){i.save()}}else{var n=o.indexOf(d);if(n>-1){o.splice(n,1)}}utils.setField(a,s,$tw.utils.stringifyList(o));return t};Adapter.prototype._processFieldEdge=function(e,t,i,r){var s=$tm.indeces.tById[t.to];if(s==null)return;var a=r==="insert"?s:"";utils.setField(e,i.name,a);if(!i.exists()){i.save()}return t};Adapter.prototype.getAdjacencyList=function(e,t){$tm.start("Creating adjacency list");t=t||{};if(!t.edges){var i=utils.getMatches($tm.selector.allPotentialNodes);t.edges=this.getEdgesForSet(i,t.toWL,t.typeWL)}var r=utils.groupByProperty(t.edges,e||"to");$tm.stop("Creating adjacency list");return r};Adapter.prototype.getNeighbours=function(e,t){$tm.start("Get neighbours");t=t||{};var i=utils.getArrayValuesAsHashmapKeys(e);var r=new ViewAbstraction(t.view);var s=t.addProperties;var a=utils.makeHashMap();var o=$tm.indeces.allETy;var d=utils.makeHashMap();var n=t.toWL;var l=t.typeWL;var p=$tm.indeces.tById;var u=$tm.indeces.idByT;var f=parseInt(t.steps)>0?t.steps:1;var g=t.direction||r.exists()&&r.getConfig("neighbourhood_directions");var c=!g||g==="both";var v=c||g==="in";var y=c||g==="out";var h=this.getAdjacencyList("to",t);var m=function(e,t){a[e.id]=e;var r=p[e[t]];if(!i[r]){i[r]=true;var o=this.makeNode(r,s);if(o){d[o.id]=o;A.push(r)}}}.bind(this);for(var w=0;w<f&&e.length;w++){var A=[];for(var b=e.length;b--;){if(utils.isSystemOrDraft(e[b])){continue}var T=this.getEdges(e[b],n,l);for(var $ in T){var E=o[T[$].type];if(c||y&&E.toArrow||v&&E.invertedArrow){m(T[$],"to")}}var N=h[u[e[b]]];if(!N)continue;for(var x=N.length;x--;){var E=o[N[x].type];if(c||v&&E.toArrow||y&&E.invertedArrow){m(N[x],"from")}}}e=A}var k={nodes:d,edges:a};$tm.logger("debug","Retrieved neighbourhood",k,"steps",w);$tm.stop("Get neighbours");return k};Adapter.prototype.getGraph=function(e){$tm.start("Assembling Graph");e=e||{};var t=new ViewAbstraction(e.view);var i=utils.getMatches(e.filter||t.exists()&&t.getNodeFilter("compiled"));var r=utils.getArrayValuesAsHashmapKeys(i);var s=e.edgeTypeWL||t.exists()&&t.getEdgeTypeFilter("whitelist");var a=parseInt(e.neighbourhoodScope||t.exists()&&t.getConfig("neighbourhood_scope"));var o={edges:this.getEdgesForSet(i,r,s),nodes:this.selectNodesByReferences(i,{view:t,outputType:"hashmap"})};if(a){var d=this.getNeighbours(i,{steps:a,view:t,typeWL:s,addProperties:{group:"tmap:neighbour"}});utils.merge(o,d);if(t.exists()&&t.isEnabled("show_inter_neighbour_edges")){var n=this.getTiddlersById(d.nodes);var r=utils.getArrayValuesAsHashmapKeys(n);$tw.utils.extend(o.edges,this.getEdgesForSet(n,r))}}this._removeObsoleteViewData(o.nodes,t);this.attachStylesToNodes(o.nodes,t);$tm.stop("Assembling Graph");$tm.logger("debug","Assembled graph:",o);return o};Adapter.prototype.getEdges=function(e,t,i){var r=utils.getTiddler(e);if(!r||utils.isSystemOrDraft(r))return;var s=utils.makeHashMap();this._addTmapEdges(s,r,t,i);this._addBodyAndFieldEdges(s,r,t,i);return s};Adapter.prototype._addBodyAndFieldEdges=function(e,t,i,r){var s=t.fields;var a=utils.getTiddlerRef(t);var o=$tm.indeces;var d=o.maETyFiNa;var n=utils.makeHashMap();if(!r||r["tw-body:link"]){n["tw-body:link"]=$tw.wiki.getTiddlerLinks(a)}if(this.isTransTypeEnabled&&(!r||r["tw-body:transclude"])){n["tw-body:transclude"]=$tw.wiki.getTiddlerTranscludes(a)}for(var l in s){var p=d[l];if(!p||r&&!r[p.id])continue;if(p.namespace==="tw-field"){n[p.id]=[s[l]]}else if(p.namespace==="tw-list"){n[p.id]=$tw.utils.parseStringArray(s[l])}else if(p.namespace==="tw-filter"){var u=s[l];n[p.id]=utils.getMatches(u,i)}}if(!n)return;var f=t.fields["tmap.id"];var g=o.idByT;var c=o.allETy;for(var v in n){var y=n[v];if(!y)continue;var p=c[v];for(var h=y.length;h--;){var m=y[h];if(!m||!$tw.wiki.tiddlerExists(m)||utils.isSystemOrDraft(m)||i&&!i[m])continue;var w=p.id+$tw.utils.hashString(a+m);var A=this.makeEdge(f,g[m],p,w);if(A){e[A.id]=A}}}};Adapter.prototype._addTmapEdges=function(e,t,i,r){var s=utils.parseFieldData(t,"tmap.edges");if(!s)return;var a=$tm.indeces.tById;var o=t.fields["tmap.id"];for(var d in s){var n=s[d];var l=a[n.to];if(l&&(!i||i[l])&&(!r||r[n.type])){var p=this.makeEdge(o,n.to,n.type,d);if(p){e[d]=p}}}};Adapter.prototype.getEdgesForSet=function(e,t,i){var r=utils.makeHashMap();for(var s=e.length;s--;){$tw.utils.extend(r,this.getEdges(e[s],t,i))}return r};Adapter.prototype.selectEdgesByType=function(e){var t=utils.makeHashMap();t[new EdgeType(e).id]=true;return this.getEdgesForSet(this.getAllPotentialNodes(),null,t)};Adapter.prototype.getAllPotentialNodes=function(){return utils.getMatches($tm.selector.allPotentialNodes)};Adapter.prototype._processEdgesWithType=function(e,t){e=new EdgeType(e);$tm.logger("debug","Processing edges",e,t);var i=this.selectEdgesByType(e);if(t.action==="rename"){var r=new EdgeType(t.newName);r.load(e);r.save()}for(var s in i){this._processEdge(i[s],"delete");if(t.action==="rename"){i[s].type=t.newName;this._processEdge(i[s],"insert")}}$tw.wiki.deleteTiddler(e.fullPath)};Adapter.prototype.selectNodesByFilter=function(e,t){var i=utils.getMatches(e);return this.selectNodesByReferences(i,t)};Adapter.prototype.selectNodesByReferences=function(e,t){t=t||{};var i=t.addProperties;var r=utils.makeHashMap();var s=Object.keys(e);for(var a=s.length;a--;){var o=this.makeNode(e[s[a]],i);if(o){r[o.id]=o}}return utils.convert(r,t.outputType)};Adapter.prototype.selectNodesByIds=function(e,t){var i=this.getTiddlersById(e);return this.selectNodesByReferences(i,t)};Adapter.prototype.selectNodeById=function(e,t){t=utils.merge(t,{outputType:"hashmap"});var i=this.selectNodesByIds([e],t);return i[e]};Adapter.prototype.makeEdge=function(e,t,i,r){if(!e||!t)return;if(e instanceof $tw.Tiddler){e=e.fields["tmap.id"]}else if(typeof e==="object"){e=e.id}i=$tm.indeces.allETy[i]||new EdgeType(i);var s=i.getLabel();var a={id:r||utils.genUUID(),from:e,to:t,type:i.id};if(utils.isTrue(i["show-label"],true)){a.label=s}a=$tw.utils.extend(a,i.style);return a};Adapter.prototype.removeNodeType=function(e){var e=new NodeType(e);$tw.wiki.deleteTiddler(e.fullPath)};Adapter.prototype.makeNode=function(e,t){var i=utils.getTiddler(e);if(!i||utils.isSystemOrDraft(i))return;var r=utils.merge({},t);r.id=this.assignId(i);var s=i.fields[$tm.field.nodeLabel];r.label=s&&$tm.field.nodeLabel!=="title"?$tw.wiki.renderText("text/plain","text/vnd-tiddlywiki",s):i.fields.title;return r};Adapter.prototype.getInheritedNodeStyles=function(e){var t=this.getTiddlersById(e);var i={};var r=$tm.indeces.glNTy;for(var s=r.length;s--;){var a=r[s];if(a.id==="tmap:neighbour"){var o=$tm.indeces.tById;var d=[];for(var n in e){if(e[n].group==="tmap:neighbour"){d.push(o[n])}}}else{var d=a.getInheritors(t)}for(var l=d.length;l--;){var p=d[l];var u=i[p]=i[p]||{};u.style=utils.merge(u.style||{},a.style);if(a["fa-icon"]){u["fa-icon"]=a["fa-icon"]}else if(a["tw-icon"]){u["tw-icon"]=a["tw-icon"]}}}return i};Adapter.prototype.attachStylesToEdges=function(e,t){};Adapter.prototype._removeObsoleteViewData=function(e,t){t=new ViewAbstraction(t);if(!t.exists()||!e)return;var i=t.getNodeData();var r=0;for(var s in i){if(e[s]===undefined&&i[s]!=null){i[s]=undefined;r++}}if(r){$tm.logger("debug","[Cleanup]","Removed obsolete node data:",t.getLabel(),r);t.saveNodeData(i)}};Adapter.prototype.attachStylesToNodes=function(e,t){t=new ViewAbstraction(t);var i=this.getInheritedNodeStyles(e);var r=t.exists()?t.getNodeData():utils.makeHashMap();var s=t.exists()&&!t.isEnabled("physics_mode");var a=$tm.field.nodeIcon;var o=$tm.indeces.tById;for(var d in e){var n=o[d];var l=$tw.wiki.getTiddler(n);var p=l.fields;var u=e[d];var f=null;var g=null;if(i[n]){if(i[n].style){utils.merge(u,i[n].style)}f=i[n]["fa-icon"];g=i[n]["tw-icon"]}if(p.color){u.color=p.color}if(p["tmap.style"]){utils.merge(u,utils.parseJSON(p["tmap.style"]))}f=p["tmap.fa-icon"]||f;g=p["icon"]||g;if(r[d]){utils.merge(u,r[d]);if(s){u.fixed={x:u.x!=null,y:u.y!=null}}f=r[d]["fa-icon"]||f;g=r[d]["tw-icon"]||g}var c=u.color!==null&&typeof u.color==="object";var v=c?u.color.background:u.color;u.color={background:v,border:c?u.color.border:undefined};this._addNodeIcon(u,f,g);u.font=u.font||{};if(u.shape&&!this.visShapesWithTextInside[u.shape]){u.font.color="black"}else if(!u.font.color&&v){u.font.color=getContrastColour(v,v,"black","white")}if(u.shape==="icon"&&typeof u.icon==="object"){u.icon.color=v}}};Adapter.prototype.deleteNode=function(e){if(!e)return;var t=typeof e==="object"?e.id:e;var i=$tm.indeces.tById[t];if(i){utils.deleteTiddlers([i])}var r=utils.getMatches($tm.selector.allViews);for(var s=r.length;s--;){var a=new ViewAbstraction(r[s]);a.removeNode(t);if(a.getNodeData(t)){a.saveNodeData(t,null)}}var o=this.getNeighbours([i]);this.deleteEdges(o.edges)};Adapter.prototype.deleteNodes=function(e){e=utils.convert(e,"array");for(var t=e.length;t--;){this.deleteNode(e[t])}};Adapter.prototype.storePositions=function(e,t){t=new ViewAbstraction(t);if(!t.exists())return;t.saveNodeData(e)};Adapter.prototype.assignId=function(e,t){var i=utils.getTiddler(e,true);if(!i)return;var r=i.fields["tmap.id"];if(!r||t){r=utils.genUUID();utils.setField(i,"tmap.id",r);$tm.logger("info","Assigning new id to",i.fields.title)}$tm.indeces.tById[r]=i.fields.title;$tm.indeces.idByT[i.fields.title]=r;return r};Adapter.prototype.insertNode=function(e,t,i){i=i||{};e=e||{};var r={"tmap.id":null};if(!i.fields||!i.fields.text){r.text=""}var s=$tw.wiki.generateNewTitle(e.label||utils.getRandomLabel());e.label=r.title=s;var a=new $tw.Tiddler(i.fields,r,$tw.wiki.getModificationFields(),$tw.wiki.getCreationFields());$tw.wiki.addTiddler(a);e=this.makeNode(a,e);var t=new ViewAbstraction(t);if(t.exists()){t.addNode(e)}return e};Adapter.prototype._getFAdigits=function(e){return e.length===4?e:e.substr(3,4)};Adapter.prototype.getTiddlersById=function(e){if(Array.isArray(e)){e=utils.getArrayValuesAsHashmapKeys(e)}else if(e instanceof vis.DataSet){e=utils.getLookupTable(e,"id")}var t=[];var i=$tm.indeces.tById;for(var r in e){if(i[r])t.push(i[r])}return t};Adapter.prototype.getId=function(e){return $tm.indeces.idByT[utils.getTiddlerRef(e)]};Adapter.prototype._addNodeIcon=function(e,t,i){if(t){e.shape="icon";e.icon={shape:"icon",face:"FontAwesome",color:e.color,code:String.fromCharCode("0x"+this._getFAdigits(t))};return}if(!i)return;var r=utils.getTiddler(i);if(!r)return;if(r.fields["_canonical_uri"]){e.image=r.fields["_canonical_uri"];e.shape="image";return}if(r.fields.text){e.image=utils.getDataUri(r);e.shape="image";return}};