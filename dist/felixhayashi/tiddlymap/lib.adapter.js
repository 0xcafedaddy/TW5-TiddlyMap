/*\

title: $:/plugins/felixhayashi/tiddlymap/js/Adapter
type: application/javascript
module-type: library

@module TiddlyMap
@preserve

\*/
(function(){"use strict";var e=require("$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction").ViewAbstraction;var t=require("$:/plugins/felixhayashi/tiddlymap/js/EdgeType").EdgeType;var i=require("$:/plugins/felixhayashi/tiddlymap/js/NodeType").NodeType;var r=require("$:/plugins/felixhayashi/tiddlymap/js/utils").utils;var a=require("$:/core/modules/macros/contrastcolour.js").run;var s=require("$:/plugins/felixhayashi/vis/vis.js");var o=function(){this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger;this.indeces=$tw.tmap.indeces;this.visShapesWithTextInside=r.getLookupTable(["ellipse","circle","database","box","text"])};o.prototype.deleteEdge=function(e){return this._processEdge(e,"delete")};o.prototype.deleteEdges=function(e){e=r.convert(e,"array");for(var t=e.length;t--;){this.deleteEdge(e[t])}};o.prototype.insertEdge=function(e){return this._processEdge(e,"insert")};o.prototype._processEdge=function(e,i){this.logger("debug","Edge",i,e);if(typeof e!=="object"||!i||!e.from)return;if(i==="insert"&&!e.to)return;var a=this.indeces.tById[e.from];if(!a||!r.tiddlerExists(a))return;var s=new t(e.type);var o=r.getTiddler(a);var n=s.namespace;if(n==="tw-list"){if(!e.to)return;return this._processListEdge(o,e,s,i)}else if(n==="tw-field"){if(!e.to)return;return this._processFieldEdge(o,e,s,i)}else if(n==="tw-body"){return null}else{return this._processTmapEdge(o,e,s,i)}return e};o.prototype._processTmapEdge=function(e,t,i,a){if(a==="delete"&&!t.id)return;var s=r.parseFieldData(e,"tmap.edges",{});if(a==="insert"){t.id=t.id||r.genUUID();s[t.id]={to:t.to,type:i.id};if(!i.exists()){i.save()}}else{delete s[t.id]}r.writeFieldData(e,"tmap.edges",s);return t};o.prototype._processListEdge=function(e,t,i,a){var s=i.getId(true);var o=r.getTiddler(e);var n=$tw.utils.parseStringArray(e.fields[s]);n=(n||[]).slice();var d=this.indeces.tById[t.to];if(a==="insert"){n.push(d);if(!i.exists()){i.save()}}else{var l=n.indexOf(d);if(l>-1){n.splice(l,1)}}r.setField(o,s,$tw.utils.stringifyList(n));return t};o.prototype._processFieldEdge=function(e,t,i,a){var s=this.indeces.tById[t.to];if(s==null)return;var o=a==="insert"?s:"";r.setField(e,i.getId(true),o);if(!i.exists()){i.save()}return t};o.prototype.getAdjacencyList=function(e,t){$tw.tmap.start("Creating adjacency list");t=t||{};if(!t.edges){var i=r.getMatches(this.opt.selector.allPotentialNodes);t.edges=this.getEdgesForSet(i,t.toWL,t.typeWL)}var a=r.groupByProperty(t.edges,e||"to");$tw.tmap.stop("Creating adjacency list");return a};o.prototype.getNeighbours=function(t,i){$tw.tmap.start("Get neighbours");i=i||{};var a=r.getArrayValuesAsHashmapKeys(t);var s=new e(i.view);var o=i.addProperties;var n=r.getDataMap();var d=this.indeces.allETy;var l=r.getDataMap();var p=i.toWL;var g=i.typeWL;var f=this.indeces.tById;var c=this.indeces.idByT;var v=parseInt(i.steps)>0?i.steps:1;var u=s.getConfig("neighbourhood_directions")||i.direction;var h=!u||u==="both";var y=h||u==="in";var w=h||u==="out";var m=this.getAdjacencyList("to",i);var b=function(e,t){n[e.id]=e;var i=f[e[t]];if(!a[i]){a[i]=true;var r=this.makeNode(i,o);if(r){l[r.id]=r;E.push(i)}}}.bind(this);for(var T=0;T<v&&t.length;T++){var E=[];for(var N=t.length;N--;){if(r.isSystemOrDraft(t[N])){continue}var $=this.getEdges(t[N],p,g);for(var I in $){var x=d[$[I].type];if(h||w&&x.toArrow||y&&x.invertedArrow){b($[I],"to")}}var A=m[c[t[N]]];if(!A)continue;for(var _=A.length;_--;){var x=d[A[_].type];if(h||y&&x.toArrow||w&&x.invertedArrow){b(A[_],"from")}}}t=E}var B={nodes:l,edges:n};this.logger("debug","Retrieved neighbourhood",B,"steps",T);$tw.tmap.stop("Get neighbours");return B};o.prototype.getGraph=function(t){$tw.tmap.start("Assembling Graph");t=t||{};var i=new e(t.view);var a=r.getMatches(t.filter||i.getNodeFilter("compiled"));var s=r.getArrayValuesAsHashmapKeys(a);var o=t.edgeTypeWL||this.getEdgeTypeWhiteList(i.getEdgeFilter("compiled"));var n=parseInt(t.neighbourhoodScope||i.getConfig("neighbourhood_scope"));var d={edges:this.getEdgesForSet(a,s,o),nodes:this.selectNodesByReferences(a,{view:i,outputType:"hashmap"})};if(n){var l=this.getNeighbours(a,{steps:n,view:i,typeWL:o,addProperties:{group:"tmap:neighbour"}});r.merge(d,l);if(i.isEnabled("show_inter_neighbour_edges")){var p=this.getTiddlersById(l.nodes);var s=r.getArrayValuesAsHashmapKeys(p);$tw.utils.extend(d.edges,this.getEdgesForSet(p,s))}}this._removeObsoleteViewData(d.nodes,i);this.attachStylesToNodes(d.nodes,i);$tw.tmap.stop("Assembling Graph");this.logger("debug","Assembled graph:",d);return d};o.prototype.getEdges=function(e,t,i){var a=r.getTiddler(e);if(!a||r.isSystemOrDraft(a))return;var s=r.getDataMap();this._addTmapEdges(s,a,t,i);this._addBodyAndFieldEdges(s,a,t,i);return s};o.prototype._addBodyAndFieldEdges=function(e,t,i,a){var s=t.fields;var o=r.getTiddlerRef(t);var n=this.indeces;var d=n.fiETy;var l=n.liETy;var p=n.maETyFiNa;var g=r.getDataMap();if(!a||a["tw-body:link"]){g["tw-body:link"]=$tw.wiki.getTiddlerLinks(o)}for(var f in s){if(!p[f])continue;var c=d["tw-field:"+f]||l["tw-list:"+f];if(a&&!a[c.id])continue;if(d[c.id]){g[c.id]=[s[f]]}else if(l[c.id]){g[c.id]=$tw.utils.parseStringArray(s[f])}}if(!g)return;var v=t.fields["tmap.id"];var u=n.idByT;var h=n.allETy;for(var y in g){var w=g[y];if(!w)continue;var c=h[y];for(var m=w.length;m--;){var b=w[m];if(!b||!$tw.wiki.tiddlerExists(b)||r.isSystemOrDraft(b)||i&&!i[b])continue;var T=c.id+$tw.utils.hashString(o+b);var E=this.makeEdge(v,u[b],c,T);if(E){e[E.id]=E}}}};o.prototype._addTmapEdges=function(e,t,i,a){var s=r.parseFieldData(t,"tmap.edges");if(!s)return;var o=this.indeces.tById;var n=t.fields["tmap.id"];for(var d in s){var l=s[d];var p=o[l.to];if(p&&(!i||i[p])&&(!a||a[l.type])){var g=this.makeEdge(n,l.to,l.type,d);if(g){e[d]=g}}}};o.prototype.getEdgeTypeWhiteList=function(e){var i=r.getDataMap();var a=r.getMatches(this.opt.selector.allEdgeTypes);var s=e?r.getMatches(e,a):a;for(var o=s.length;o--;){var n=new t(s[o]);i[n.id]=true}return i};o.prototype.getEdgesForSet=function(e,t,i){var a=r.getDataMap();for(var s=e.length;s--;){$tw.utils.extend(a,this.getEdges(e[s],t,i))}return a};o.prototype.selectEdgesByType=function(e){var i=r.getDataMap();i[new t(e).id]=true;return this.getEdgesForSet(this.getAllPotentialNodes(),null,i)};o.prototype.getAllPotentialNodes=function(){return r.getMatches(this.opt.selector.allPotentialNodes)};o.prototype._processEdgesWithType=function(e,i){e=new t(e);this.logger("debug","Processing edges",e,i);var r=this.selectEdgesByType(e);if(i.action==="rename"){var a=new t(i.newName);a.load(e);a.save()}for(var s in r){this._processEdge(r[s],"delete");if(i.action==="rename"){r[s].type=i.newName;this._processEdge(r[s],"insert")}}$tw.wiki.deleteTiddler(e.fullPath)};o.prototype.selectNodesByFilter=function(e,t){var i=r.getMatches(e);return this.selectNodesByReferences(i,t)};o.prototype.selectNodesByReferences=function(e,t){t=t||{};var i=t.addProperties;var a=r.getDataMap();var s=Object.keys(e);for(var o=s.length;o--;){var n=this.makeNode(e[s[o]],i);if(n){a[n.id]=n}}return r.convert(a,t.outputType)};o.prototype.selectNodesByIds=function(e,t){var i=this.getTiddlersById(e);return this.selectNodesByReferences(i,t)};o.prototype.selectNodeById=function(e,t){t=r.merge(t,{outputType:"hashmap"});var i=this.selectNodesByIds([e],t);return i[e]};o.prototype.makeEdge=function(e,i,a,s){if(!e||!i)return;if(e instanceof $tw.Tiddler){e=e.fields["tmap.id"]}else if(typeof e==="object"){e=e.id}a=this.indeces.allETy[a]||new t(a);var o=a.getLabel();var n={id:s||r.genUUID(),from:e,to:i,type:a.id};var d=a.description;n.title=d||o||n.id;if(r.isTrue(a["show-label"],true)){n.label=o}n=$tw.utils.extend(n,a.style);return n};o.prototype.removeNodeType=function(e){var e=new i(e);$tw.wiki.deleteTiddler(e.fullPath)};o.prototype.makeNode=function(e,t){var i=r.getTiddler(e);if(!i||i.isDraft()||$tw.wiki.isSystemTiddler(i.fields.title)){return}var a=r.merge({},t);a.id=this.assignId(i);var s=i.fields[this.opt.field.nodeLabel];a.label=s&&this.opt.field.nodeLabel!=="title"?$tw.wiki.renderText("text/plain","text/vnd-tiddlywiki",s):i.fields.title;return a};o.prototype.getInheritedNodeStyles=function(t,i){i=i?new e(i).getLabel():null;var a=this.getTiddlersById(t);var s={};var o=this.indeces.glNTy;for(var n=o.length;n--;){var d=o[n];if(d.id==="tmap:neighbour"){var l=$tw.tmap.indeces.tById;var p=[];for(var g in t){if(t[g].group==="tmap:neighbour"){p.push(l[g])}}}else{var p=d.getInheritors(a)}for(var f=p.length;f--;){var c=p[f];var v=s[c]=s[c]||{};v.style=r.merge(v.style||{},d.style);if(d["fa-icon"]){v["fa-icon"]=d["fa-icon"]}else if(d["tw-icon"]){v["tw-icon"]=d["tw-icon"]}}}return s};o.prototype.attachStylesToEdges=function(e,t){};o.prototype._removeObsoleteViewData=function(t,i){i=new e(i);if(!i.exists()||!t)return;var r=i.getNodeData();var a=0;for(var s in r){if(t[s]===undefined&&r[s]!=null){r[s]=undefined;a++}}if(a){this.logger("debug","[Cleanup]","Removed obsolete node data:",i.getLabel(),a);i.saveNodeData(r)}};o.prototype.attachStylesToNodes=function(t,i){i=new e(i);var s=this.getInheritedNodeStyles(t,i);var o=i.getNodeData();var n=!i.isEnabled("physics_mode");var d=this.opt.field.nodeInfo;var l=this.opt.field.nodeIcon;var p=this.indeces.tById;for(var g in t){var f=p[g];var c=$tw.wiki.getTiddler(f);var v=c.fields;var u=t[g];var h=null;var y=null;if(s[f]){if(s[f].style){r.merge(u,s[f].style)}h=s[f]["fa-icon"];y=s[f]["tw-icon"]}if(v.color){u.color=v.color}if(v["tmap.style"]){r.merge(u,r.parseJSON(v["tmap.style"]))}h=v["tmap.fa-icon"]||h;y=v["icon"]||y;if(o[g]){r.merge(u,o[g]);if(n){u.fixed={x:u.x!=null,y:u.y!=null}}h=o[g]["fa-icon"]||h;y=o[g]["tw-icon"]||y}var w=u.color!==null&&typeof u.color==="object";var m=w?u.color.background:u.color;u.color={background:m,border:w?u.color.border:undefined};this._addNodeIcon(u,h,y);u.font=u.font||{};if(u.shape&&!this.visShapesWithTextInside[u.shape]){u.font.color="black"}else if(!u.font.color&&m){u.font.color=a(m,m,"black","white")}if(u.shape==="icon"&&typeof u.icon==="object"){u.icon.color=m}if(v[d]){u.title=$tw.wiki.renderText("text/html","text/vnd-tiddlywiki",v[d])}else if(u.label!==f){u.title=f}}};o.prototype.deleteNode=function(t){if(!t)return;var i=typeof t==="object"?t.id:t;var a=this.indeces.tById[i];if(a){r.deleteTiddlers([a])}var s=$tw.tmap.opt.selector.allViews;var o=r.getMatches(s);for(var n=o.length;n--;){var d=new e(o[n]);d.removeNodeFromFilter(i);if(d.getNodeData(i)){d.saveNodeData(i,null)}}var l=this.getNeighbours([a]);this.deleteEdges(l.edges)};o.prototype.deleteNodes=function(e){e=r.convert(e,"array");for(var t=e.length;t--;){this.deleteNode(e[t])}};o.prototype.getView=function(t,i){return new e(t,i)};o.prototype.createView=function(t){return new e(t,true)};o.prototype.storePositions=function(t,i){i=new e(i);i.saveNodeData(t)};o.prototype.assignId=function(e,t){var i=r.getTiddler(e,true);if(!i)return;var a=i.fields["tmap.id"];if(!a||t){a=r.genUUID();r.setField(i,"tmap.id",a);this.logger("info","Assigning new id to",i.fields.title)}this.indeces.tById[a]=i.fields.title;this.indeces.idByT[i.fields.title]=a;return a};o.prototype.insertNode=function(t,i){if(!i||typeof i!=="object")i={};if(!t||typeof t!=="object"){t=r.getDataMap()}var a=r.getDataMap();a.title=$tw.wiki.generateNewTitle(t.label?t.label:"New node");a.text="";t.label=a.title;$tw.wiki.addTiddler(new $tw.Tiddler(a,$tw.wiki.getModificationFields(),$tw.wiki.getCreationFields()));t.id=$tw.tmap.adapter.assignId(a.title);if(i.view){var s=new e(i.view);s.addNodeToView(t)}return t};o.prototype._getFAdigits=function(e){return e.length===4?e:e.substr(3,4)};o.prototype.getTiddlersById=function(e){if(Array.isArray(e)){e=r.getArrayValuesAsHashmapKeys(e)}else if(e instanceof s.DataSet){e=r.getLookupTable(e,"id")}var t=[];var i=this.indeces.tById;for(var a in e){if(i[a])t.push(i[a])}return t};o.prototype.getId=function(e){return this.indeces.idByT[r.getTiddlerRef(e)]};o.prototype._addNodeIcon=function(e,t,i){if(t){e.shape="icon";e.icon={shape:"icon",face:"FontAwesome",color:e.color,code:String.fromCharCode("0x"+this._getFAdigits(t))};return}if(!i)return;var a=r.getTiddler(i);if(!a)return;if(a.fields["_canonical_uri"]){e.image=a.fields["_canonical_uri"];e.shape="image";return}if(a.fields.text){var s=a.fields.type||"image/svg+xml";var o=a.fields.text;if(s==="image/svg+xml"){o=o.replace(/\r?\n|\r/g," ");if(!r.inArray("xmlns",o)){o=o.replace(/<svg/,'<svg xmlns="http://www.w3.org/2000/svg"')}}var n=$tw.config.contentTypeInfo[s].encoding==="base64"?o:window.btoa(o);e.image="data:"+s+";base64,"+n;e.shape="image";return}};exports.Adapter=o})();