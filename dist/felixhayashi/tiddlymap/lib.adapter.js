/*\

title: $:/plugins/felixhayashi/tiddlymap/adapter.js
type: application/javascript
module-type: library

@preserve

\*/
(function(){var e=require("$:/plugins/felixhayashi/tiddlymap/utils.js").utils;var t=require("$:/plugins/felixhayashi/tiddlymap/view_abstraction.js").ViewAbstraction;var i=require("$:/plugins/felixhayashi/tiddlymap/edgetype.js").EdgeType;var r=require("$:/plugins/felixhayashi/vis/vis.js");var s=function(){this.wiki=$tw.wiki;this.opt=$tw.tmap.opt;this.logger=$tw.tmap.logger};s.prototype.deleteEdge=function(e){return this._processEdge(e,"delete")};s.prototype.deleteEdges=function(t){t=e.convert(t,"array");for(var i=0;i<t.length;i++){this.deleteEdge(t[i])}};s.prototype.insertEdge=function(e){return this._processEdge(e,"insert")};s.prototype._processEdge=function(t,r){this.logger("debug","Edge",r,t);if(typeof t!=="object"||!r||!t.from)return;if(r==="insert"&&!t.to)return;if(r==="delete"&&!t.id)return;var s=e.getTiddler($tw.tmap.indeces.tById[t.from]);if(!s)return;if(!t.id)t.id=e.genUUID();var a=new i(t.type);var o=e.parseFieldData(s.fields.title,this.opt.field.edges,{});if(r==="insert"){o[t.id]={to:t.to,type:a.getId()};if(!a.exists()){a.persist()}}else if(r==="delete"){delete o[t.id]}e.writeFieldData(s.fields.title,this.opt.field.edges,o);return t};s.prototype.getAdjacencyList=function(t,i){$tw.tmap.start("Creating adjacency list");if(!i)i={};if(!i.edges){var r=e.getMatches(this.opt.selector.allPotentialNodes);i.edges=this.getAllOutgoingEdges(r,i)}var s=e.groupByProperty(i.edges,t);$tw.tmap.stop("Creating adjacency list");return s};s.prototype.getNeighbours=function(t,i){$tw.tmap.start("Get neighbours");i=i||{};t=t.slice();var r=i.addProperties;var s=this.getAdjacencyList("to",i);var a=e.getDataMap();var o=e.getDataMap();var d=i.steps==="*"?Number.MAX_VALUE:parseInt(i.steps)>0?i.steps:1;var n=function(){var d=e.getArrayValuesAsHashmapKeys(t);for(var n=t.length-1;n>=0;n--){if(e.isSystemOrDraft(t[n]))continue;var l=this.getEdges(t[n],i);for(var p in l){var g=$tw.tmap.indeces.tById[l[p].to];if(d[g])continue;if(!o[l[p].to]){var f=this.makeNode(g,r,i.view);if(f){o[l[p].to]=f;t.push(g)}}}$tw.utils.extend(a,l);var y=s[$tw.tmap.indeces.idByT[t[n]]];if(y){for(var u=0;u<y.length;u++){var h=$tw.tmap.indeces.tById[y[u].from];if(d[h])continue;if(!o[y[u].from]){var f=this.makeNode(h,r,i.view);if(f){o[y[u].from]=f;t.push(h)}}a[y[u].id]=y[u]}}}}.bind(this);for(var l=0;l<d;l++){var p=t.length;n();if(p===t.length)break}var g={nodes:o,edges:a};this.logger("debug","retrieved neighbourhood",g,"steps",l);$tw.tmap.stop("Get neighbours");return g};s.prototype.getGraph=function(i,r){$tw.tmap.start("Assembling Graph");if(!r||typeof r!=="object")r={};var s=new t(r.view);var a=e.getMatches(i);var o={};o.nodes=this.selectNodesByReferences(a,{view:s,outputType:"hashmap",addProperties:{group:"matches"}});o.edges=this.getAllOutgoingEdges(a,{toFilter:e.getArrayValuesAsHashmapKeys(a),toFilterStyle:"whitelist",typeFilter:s.getTypeWhiteList(),typeFilterStyle:"whitelist"});if(r.neighbourhoodScope){var d=this.getNeighbours(a,{steps:r.neighbourhoodScope,view:s,typeFilter:s.getTypeWhiteList(),typeFilterStyle:"whitelist",addProperties:{group:"neighbours"}});$tw.utils.extend(o.edges,d.edges);$tw.utils.extend(o.nodes,d.nodes)}$tw.tmap.stop("Assembling Graph");this.logger("debug","Assembled graph:",o);return o};s.prototype._getRelations=function(t,i){if(!e.tiddlerExists(t)||e.isSystemOrDraft(t)){return}if(!i)i={};var r=i.toFilter||e.getDataMap();var s=i.toFilterStyle==="whitelist";var a=i.typeFilter||e.getDataMap();var o=i.typeFilterStyle==="whitelist";var d=e.getTiddlerRef(t);var n=e.getDataMap();var l=e.parseFieldData(d,this.opt.field.edges,{});for(var p in l){var g=l[p];var f=$tw.tmap.indeces.tById[g.to];if(s?r[f]:!r[f]){if(o?a[g.type]:!a[g.type]){n[p]=this.makeEdge(this.getId(d),g.to,g.type,p)}}}return n};s.prototype._getLinks=function(t,r){if(!e.tiddlerExists(t)||e.isSystemOrDraft(t)){return}if(!r)r={};var s=r.toFilter||e.getDataMap();var a=r.toFilterStyle==="whitelist";var o=e.getTiddlerRef(t);var d=e.getDataMap();var n=new i("tmap:link");var l=this.wiki.getTiddlerLinks(o);for(var p=0;p<l.length;p++){if(!$tw.wiki.tiddlerExists(l[p])||e.isSystemOrDraft(l[p]))continue;if(a?s[l[p]]:!s[l[p]]){var g=this.makeEdge(this.getId(o),this.getId(l[p]),n);d[g.id]=g}}return d};s.prototype.getEdges=function(t,i){if(!i)i={};var r=i.typeFilter||e.getDataMap();var s=i.typeFilterStyle==="whitelist";var a=e.getDataMap();var o=this._getRelations(t,i);$tw.utils.extend(a,o);if(s?r["tmap:link"]:!r["tmap:link"]){$tw.utils.extend(a,this._getLinks(t,i))}return a};s.prototype.getAllOutgoingEdges=function(t,i){var r=e.getDataMap();for(var s=0;s<t.length;s++){$tw.utils.extend(r,this.getEdges(t[s],i))}return r};s.prototype.selectEdgesByType=function(e,t){};s.prototype._processEdgesWithType=function(t,r){t=new i(t);this.logger("debug","Processing edges",t,r);var s=e.getDataMap();s[t.getId()]=true;var a=e.getMatches(this.opt.selector.allPotentialNodes);var o=this.getAllOutgoingEdges(a,{typeFilter:s,typeFilterStyle:"whitelist"});if(r.action==="rename"){var d=new i(r.newName);d.loadDataFromType(t);d.persist()}for(var n in o){if(r.action==="rename"){this._processEdge(o[n],"delete");o[n].type=r.newName;this._processEdge(o[n],"insert")}else if(r.action==="delete"){this._processEdge(o[n],"delete")}}$tw.wiki.deleteTiddler(t.getPath())};s.prototype.selectNodesByFilter=function(t,i){var r=e.getMatches(t);return this.selectNodesByReferences(r,i)};s.prototype.selectNodesByReferences=function(t,i){if(!i||typeof i!=="object")i={};var r=i.addProperties;var s=e.getDataMap();var a=Object.keys(t);for(var o=0;o<a.length;o++){var d=this.makeNode(t[a[o]],r,i.view);if(d){s[d.id]=d}}if(i.view){this._restorePositions(s,i.view)}return e.convert(s,i.outputType)};s.prototype.makeEdge=function(t,r,s,a){if(!t||!r)return;if(t instanceof $tw.Tiddler){t=t.fields[this.opt.field.nodeId]}else if(typeof t==="object"){t=t.id}s=new i(s);var o={id:a?a:e.genUUID(),from:t,to:r,type:s.getId()};o.label=e.isTrue(s.getData("show-label"),true)?s.getLabel():null;o=$tw.utils.extend(o,s.getData("style"));return o};s.prototype.makeNode=function(i,r,s){var a=e.getTiddler(i,true);if(!a||a.isDraft()||this.wiki.isSystemTiddler(a.fields.title)){return}var o=e.getDataMap();var d=a.fields[this.opt.field.nodeIcon];if(d){var n=e.getTiddler(d);if(n&&n.fields.text){var l=n.fields.type?n.fields.type:"image/svg+xml";var p=n.fields.text;o.shape="image";if(l==="image/svg+xml"){p=p.replace(/\r?\n|\r/g," ");if(!e.inArray("xmlns",p)){p=p.replace(/<svg/,'<svg xmlns="http://www.w3.org/2000/svg"')}}var g=$tw.config.contentTypeInfo[l].encoding==="base64"?p:window.btoa(p);o.image="data:"+l+";base64,"+g}}var f=a.fields[this.opt.field.nodeLabel];o.label=f&&this.opt.field.nodeLabel!=="title"?this.wiki.renderText("text/plain","text/vnd-tiddlywiki",f):a.fields.title;if(a.fields.color){o.color=a.fields.color}if(typeof r==="object"){o=$tw.utils.extend(o,r)}o.id=this.assignId(a);if(s){var s=new t(s);if(s.isEnabled("physics_mode")){o.allowedToMoveX=true;o.allowedToMoveY=true}}return o};s.prototype.selectNodesByIds=function(e,t){var i=this.getTiddlersById(e);return this.selectNodesByReferences(i,t)};s.prototype.selectNodeById=function(t,i){i=e.merge(i,{outputType:"hashmap"});var r=this.selectNodesByIds([t],i);return r[t]};s.prototype.getTiddlersById=function(t){if(Array.isArray(t)){t=e.getArrayValuesAsHashmapKeys(t)}else if(t instanceof r.DataSet){t=e.getLookupTable(t,"id")}var i=[];for(var s in t){var a=$tw.tmap.indeces.tById[s];if(a)i.push(a)}return i};s.prototype.getId=function(t){return $tw.tmap.indeces.idByT[e.getTiddlerRef(t)]};s.prototype.deleteNode=function(t){if(!t)return;var i=typeof t==="object"?t.id:t;var r=$tw.tmap.indeces.tById[i];if(!e.tiddlerExists(r))return;var s=this.opt.field.nodeId;var a=this.wiki.getTiddlerList("$:/StoryList");var o=a.indexOf(r);if(o!==-1){a.splice(o,1);var d=this.wiki.getTiddler("$:/StoryList");e.setField(d,"list",a)}this.wiki.deleteTiddler(r)};s.prototype.getView=function(e,i){return new t(e,i)};s.prototype.createView=function(e){if(typeof e!=="string"||e===""){e="My view"}var i=this.wiki.generateNewTitle(this.opt.path.views+"/"+e);return new t(i,true)};s.prototype._restorePositions=function(i,r){r=new t(r);if(!r.exists())return;var s=r.getPositions();for(var a in i){if(e.hasOwnProp(s,a)){i[a].x=s[a].x;i[a].y=s[a].y}}};s.prototype.storePositions=function(e,i){i=new t(i);i.setPositions(e)};s.prototype.assignId=function(t,i){var r=e.getTiddler(t,true);if(!r)return;var s=this.opt.field.nodeId;var a=r.fields[s];if(!a||i&&s!=="title"){a=e.genUUID();e.setField(r,s,a);this.logger("info","Assigning new id to",r.fields.title)}$tw.tmap.indeces.tById[a]=r.fields.title;$tw.tmap.indeces.idByT[r.fields.title]=a;return a};s.prototype.insertNode=function(i,r){if(!r||typeof r!=="object")r={};if(typeof i!=="object"){i=e.getDataMap()}var s=e.getDataMap();s.title=this.wiki.generateNewTitle(i.label?i.label:"New node");i.label=s.title;if(this.opt.field.nodeId==="title"){i.id=s.title}else{i.id=e.genUUID();s[this.opt.field.nodeId]=i.id}if(r.view){var a=new t(r.view);a.addNodeToView(i)}this.wiki.addTiddler(new $tw.Tiddler(s,this.wiki.getModificationFields(),this.wiki.getCreationFields()));return i};exports.Adapter=s})();